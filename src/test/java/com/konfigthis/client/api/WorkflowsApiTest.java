/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.TaskModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowsApi
 */
@Disabled
public class WorkflowsApiTest {

    private static WorkflowsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WorkflowsApi(apiClient);
    }

    /**
     * Create a new task.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTaskTest() throws ApiException {
        Object response = api.createNewTask()
                .execute();
        // TODO: test validations
    }

    /**
     * Get the details of a workflow task by task id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskDetailsByTaskIdTest() throws ApiException {
        Integer taskid = null;
        String authorization = null;
        Object response = api.getTaskDetailsByTaskId(taskid)
                .authorization(authorization)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tasks by user id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksByUserIdTest() throws ApiException {
        Object response = api.getTasksByUserId()
                .execute();
        // TODO: test validations
    }

    /**
     * Get workflows by user id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserWorkflowsTest() throws ApiException {
        String authorization = null;
        Object response = api.getUserWorkflows()
                .authorization(authorization)
                .execute();
        // TODO: test validations
    }

    /**
     * Get workflows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkflowsTest() throws ApiException {
        String status = null;
        Object response = api.getWorkflows()
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tasks by userworkflowid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTasksByUserworkflowIdTest() throws ApiException {
        Integer userworkflowid = null;
        String authorization = null;
        Object response = api.listTasksByUserworkflowId(userworkflowid)
                .authorization(authorization)
                .execute();
        // TODO: test validations
    }

    /**
     * Update status workflow task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatusTaskTest() throws ApiException {
        String authorization = null;
        Integer appraisalId = null;
        Integer assignedUserId = null;
        Boolean ci = null;
        Integer cid = null;
        Integer createUserId = null;
        LocalDate createts = null;
        String description = null;
        LocalDate dueDate = null;
        String lastEdit = null;
        Integer launchtsDate = null;
        Integer launchtsDay = null;
        Integer launchtsHours = null;
        Integer launchtsMinutes = null;
        Integer launchtsMonth = null;
        Integer launchtsNanos = null;
        Integer launchtsSeconds = null;
        Long launchtsTime = null;
        Integer launchtsTimezoneOffset = null;
        Integer launchtsYear = null;
        String phasename = null;
        Integer projectId = null;
        Integer recruitId = null;
        String statusCode = null;
        Integer systemTask = null;
        Integer taskId = null;
        Integer taskUID = null;
        String title = null;
        String transitionName = null;
        String type = null;
        Object response = api.updateStatusTask()
                .authorization(authorization)
                .appraisalId(appraisalId)
                .assignedUserId(assignedUserId)
                .ci(ci)
                .cid(cid)
                .createUserId(createUserId)
                .createts(createts)
                .description(description)
                .dueDate(dueDate)
                .lastEdit(lastEdit)
                .launchtsDate(launchtsDate)
                .launchtsDay(launchtsDay)
                .launchtsHours(launchtsHours)
                .launchtsMinutes(launchtsMinutes)
                .launchtsMonth(launchtsMonth)
                .launchtsNanos(launchtsNanos)
                .launchtsSeconds(launchtsSeconds)
                .launchtsTime(launchtsTime)
                .launchtsTimezoneOffset(launchtsTimezoneOffset)
                .launchtsYear(launchtsYear)
                .phasename(phasename)
                .projectId(projectId)
                .recruitId(recruitId)
                .statusCode(statusCode)
                .systemTask(systemTask)
                .taskId(taskId)
                .taskUID(taskUID)
                .title(title)
                .transitionName(transitionName)
                .type(type)
                .execute();
        // TODO: test validations
    }

}
