/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CandidatesExtractPdfResumeRequest;
import com.konfigthis.client.model.CandidatesExtractPdfResumeResponse;
import com.konfigthis.client.model.CandidatesGetBasicDetailsResponse;
import com.konfigthis.client.model.CandidatesGetCandidateDetailByRecruitidResponse;
import com.konfigthis.client.model.CandidatesGetResponse;
import com.konfigthis.client.model.CandidatesSubmitNewCandidateResponse;
import java.io.File;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CandidatesApi
 */
@Disabled
public class CandidatesApiTest {

    private static CandidatesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CandidatesApi(apiClient);
    }

    /**
     * Create a candidate from pdf resume
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extractPdfResumeTest() throws ApiException {
        File _file = null;
        CandidatesExtractPdfResumeResponse response = api.extractPdfResume(_file)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve candidates
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        CandidatesGetResponse response = api.get()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve candidates with basic details
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBasicDetailsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        CandidatesGetBasicDetailsResponse response = api.getBasicDetails()
                .page(page)
                .pageSize(pageSize)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the candidate detail by recruitid
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCandidateDetailByRecruitidTest() throws ApiException {
        Integer recruitid = null;
        CandidatesGetCandidateDetailByRecruitidResponse response = api.getCandidateDetailByRecruitid(recruitid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create new candidate
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitNewCandidateTest() throws ApiException {
        String name = null;
        String email = null;
        String isNewCand = null;
        Integer phone = null;
        String source = null;
        CandidatesSubmitNewCandidateResponse response = api.submitNewCandidate()
                .name(name)
                .email(email)
                .isNewCand(isNewCand)
                .phone(phone)
                .source(source)
                .execute();
        // TODO: test validations
    }

}
