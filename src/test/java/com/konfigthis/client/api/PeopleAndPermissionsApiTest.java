/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import java.time.LocalDate;
import com.konfigthis.client.model.PeopleAndPermissionsAddReportsToRequest;
import com.konfigthis.client.model.PeopleAndPermissionsAddReportsToRequestAddObjectsInner;
import com.konfigthis.client.model.PeopleAndPermissionsAddReportsToResponse;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetails201Response;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequest;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListInner;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactListInner;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationListInner;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner;
import com.konfigthis.client.model.PeopleAndPermissionsDeleteUserAddressResponse;
import com.konfigthis.client.model.PeopleAndPermissionsDeleteUserEmploymentResponse;
import com.konfigthis.client.model.PeopleAndPermissionsGetAllUsersDetailsResponseInner;
import com.konfigthis.client.model.PeopleAndPermissionsGetBasicUserDetailsResponseInner;
import com.konfigthis.client.model.PeopleAndPermissionsGetUsersResponse;
import com.konfigthis.client.model.PeopleAndPermissionsSaveCustomFieldValuesResponse;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserAddressRequest;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserAddressRequestRAWBODYInner;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserAddressResponse;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserEducationRequest;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserEducationRequestRAWBODYInner;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserEmploymentRequest;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner;
import com.konfigthis.client.model.PeopleAndPermissionsUploadUserProfilePictureRequest;
import com.konfigthis.client.model.PeopleAndPermissionsUploadUserProfilePictureResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PeopleAndPermissionsApi
 */
@Disabled
public class PeopleAndPermissionsApiTest {

    private static PeopleAndPermissionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PeopleAndPermissionsApi(apiClient);
    }

    /**
     * Add reports to
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addReportsToTest() throws ApiException {
        List<PeopleAndPermissionsAddReportsToRequestAddObjectsInner> addObjects = null;
        String empId = null;
        String email = null;
        PeopleAndPermissionsAddReportsToResponse response = api.addReportsTo()
                .addObjects(addObjects)
                .empId(empId)
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Create or Update user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateUserDetailsTest() throws ApiException {
        String firstName = null;
        String email = null;
        String lastName = null;
        String empId = null;
        String gender = null;
        String guid = null;
        String status = null;
        String displayFullName = null;
        String middleName = null;
        String secondLastName = null;
        String shortName = null;
        String namePronunciation = null;
        String familySuffix = null;
        String workerType = null;
        String userDateOfBirth = null;
        String phone = null;
        String cellPhone = null;
        Integer position = null;
        Integer departmentID = null;
        Integer locationId = null;
        String locationName = null;
        String userStartDate = null;
        List<String> reportsToEmail = null;
        List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListInner> addressList = null;
        List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationListInner> educationList = null;
        List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactListInner> contactList = null;
        List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner> financialList = null;
        String customFieldValues = null;
        Object response = api.createOrUpdateUserDetails()
                .firstName(firstName)
                .email(email)
                .lastName(lastName)
                .empId(empId)
                .gender(gender)
                .guid(guid)
                .status(status)
                .displayFullName(displayFullName)
                .middleName(middleName)
                .secondLastName(secondLastName)
                .shortName(shortName)
                .namePronunciation(namePronunciation)
                .familySuffix(familySuffix)
                .workerType(workerType)
                .userDateOfBirth(userDateOfBirth)
                .phone(phone)
                .cellPhone(cellPhone)
                .position(position)
                .departmentID(departmentID)
                .locationId(locationId)
                .locationName(locationName)
                .userStartDate(userStartDate)
                .reportsToEmail(reportsToEmail)
                .addressList(addressList)
                .educationList(educationList)
                .contactList(contactList)
                .financialList(financialList)
                .customFieldValues(customFieldValues)
                .execute();
        // TODO: test validations
    }

    /**
     * Create user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String firstName = null;
        String email = null;
        Object response = api.createUser(firstName, email)
                .execute();
        // TODO: test validations
    }

    /**
     * Create compensation for user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserCompensationTest() throws ApiException {
        String value = null;
        String compensationType = null;
        String currencyCode = null;
        String period = null;
        String effectivedate = null;
        String status = null;
        String enddate = null;
        String notes = null;
        Object response = api.createUserCompensation(value, compensationType, currencyCode, period, effectivedate, status)
                .enddate(enddate)
                .notes(notes)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete User Address
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAddressTest() throws ApiException {
        String addressId = null;
        PeopleAndPermissionsDeleteUserAddressResponse response = api.deleteUserAddress(addressId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete User Education
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserEducationTest() throws ApiException {
        String educationId = null;
        Object response = api.deleteUserEducation(educationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes User Employment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserEmploymentTest() throws ApiException {
        Integer empid = null;
        PeopleAndPermissionsDeleteUserEmploymentResponse response = api.deleteUserEmployment(empid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve all users details
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUsersDetailsTest() throws ApiException {
        String name = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        LocalDate startDateBefore = null;
        LocalDate startDateAfter = null;
        LocalDate endDateBefore = null;
        LocalDate endDateAfter = null;
        String status = null;
        List<PeopleAndPermissionsGetAllUsersDetailsResponseInner> response = api.getAllUsersDetails()
                .name(name)
                .page(page)
                .pageSize(pageSize)
                .search(search)
                .startDateBefore(startDateBefore)
                .startDateAfter(startDateAfter)
                .endDateBefore(endDateBefore)
                .endDateAfter(endDateAfter)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve basic user details
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBasicUserDetailsTest() throws ApiException {
        String name = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        LocalDate startDateBefore = null;
        LocalDate startDateAfter = null;
        LocalDate endDateBefore = null;
        LocalDate endDateAfter = null;
        String status = null;
        List<PeopleAndPermissionsGetBasicUserDetailsResponseInner> response = api.getBasicUserDetails()
                .name(name)
                .page(page)
                .pageSize(pageSize)
                .search(search)
                .startDateBefore(startDateBefore)
                .startDateAfter(startDateAfter)
                .endDateBefore(endDateBefore)
                .endDateAfter(endDateAfter)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve user financial record
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFinancialRecordTest() throws ApiException {
        String email = null;
        Object response = api.getFinancialRecord()
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve user financial status
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFinancialStatusTest() throws ApiException {
        Object response = api.getFinancialStatus()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve user basic information
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserBasicInformationTest() throws ApiException {
        String email = null;
        Object response = api.getUserBasicInformation()
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve user details
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserDetailsTest() throws ApiException {
        Object response = api.getUserDetails()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a user or list of users
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserListTest() throws ApiException {
        String name = null;
        Object response = api.getUserList()
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve user permissions and menu configurations
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPermissionsAndMenuConfigurationsTest() throws ApiException {
        Object response = api.getUserPermissionsAndMenuConfigurations()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve users
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String name = null;
        Integer page = null;
        Integer pageSize = null;
        String sortBy = null;
        String sortOrder = null;
        String status = null;
        PeopleAndPermissionsGetUsersResponse response = api.getUsers()
                .name(name)
                .page(page)
                .pageSize(pageSize)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Save Custom Field values
     *
     * Save Custom Field values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveCustomFieldValuesTest() throws ApiException {
        String empId = null;
        String guid = null;
        String email = null;
        PeopleAndPermissionsSaveCustomFieldValuesResponse response = api.saveCustomFieldValues()
                .empId(empId)
                .guid(guid)
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Save User Address
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveUserAddressTest() throws ApiException {
        List<PeopleAndPermissionsSaveUserAddressRequestRAWBODYInner> RAW_BODY = null;
        String empId = null;
        String email = null;
        PeopleAndPermissionsSaveUserAddressResponse response = api.saveUserAddress()
                .RAW_BODY(RAW_BODY)
                .empId(empId)
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Save User Education
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveUserEducationTest() throws ApiException {
        List<PeopleAndPermissionsSaveUserEducationRequestRAWBODYInner> RAW_BODY = null;
        String empId = null;
        String email = null;
        Object response = api.saveUserEducation()
                .RAW_BODY(RAW_BODY)
                .empId(empId)
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Save User Employment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveUserEmploymentTest() throws ApiException {
        List<PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner> RAW_BODY = null;
        String empId = null;
        String email = null;
        Object response = api.saveUserEmployment()
                .RAW_BODY(RAW_BODY)
                .empId(empId)
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Update financial record of User
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFinancialRecordTest() throws ApiException {
        String guid = null;
        String value = null;
        String compensationType = null;
        String currencyCode = null;
        String period = null;
        String status = null;
        LocalDate effectivedate = null;
        LocalDate enddate = null;
        String notes = null;
        Object response = api.updateFinancialRecord(guid, value, compensationType, currencyCode, period, status)
                .effectivedate(effectivedate)
                .enddate(enddate)
                .notes(notes)
                .execute();
        // TODO: test validations
    }

    /**
     * Update user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String guid = null;
        String email = null;
        String empId = null;
        String firstName = null;
        String middleName = null;
        String lastName = null;
        String secondLastName = null;
        String displayFullName = null;
        String cellPhone = null;
        String phone = null;
        String familySuffix = null;
        LocalDate userDateOfBirth = null;
        String jobGrade = null;
        LocalDate userStartDate = null;
        LocalDate userEndDate = null;
        String gender = null;
        String position = null;
        String profileId = null;
        String shortName = null;
        String status = null;
        String locationName = null;
        String locationId = null;
        String notes = null;
        Object response = api.updateUser()
                .guid(guid)
                .email(email)
                .empId(empId)
                .firstName(firstName)
                .middleName(middleName)
                .lastName(lastName)
                .secondLastName(secondLastName)
                .displayFullName(displayFullName)
                .cellPhone(cellPhone)
                .phone(phone)
                .familySuffix(familySuffix)
                .userDateOfBirth(userDateOfBirth)
                .jobGrade(jobGrade)
                .userStartDate(userStartDate)
                .userEndDate(userEndDate)
                .gender(gender)
                .position(position)
                .profileId(profileId)
                .shortName(shortName)
                .status(status)
                .locationName(locationName)
                .locationId(locationId)
                .notes(notes)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload user profile
     *
     *  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadUserProfilePictureTest() throws ApiException {
        File _file = null;
        String userid = null;
        PeopleAndPermissionsUploadUserProfilePictureResponse response = api.uploadUserProfilePicture(_file, userid)
                .execute();
        // TODO: test validations
    }

}
