/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PositionsCreatePositionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PositionsApi
 */
@Disabled
public class PositionsApiTest {

    private static PositionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PositionsApi(apiClient);
    }

    /**
     * Save Position
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPositionTest() throws ApiException {
        String name = null;
        Integer count = null;
        String status = null;
        String accessLevel = null;
        String dateOpen = null;
        String dateClose = null;
        String positionUID = null;
        Integer funnelId = null;
        String description = null;
        String requirements = null;
        String responsibilities = null;
        Integer projectid = null;
        Integer approvalFlowId = null;
        Integer locationid = null;
        String departmentId = null;
        Integer profileid = null;
        Integer recruiterId = null;
        PositionsCreatePositionResponse response = api.createPosition(name, count, status, accessLevel, dateOpen, dateClose, positionUID, funnelId)
                .description(description)
                .requirements(requirements)
                .responsibilities(responsibilities)
                .projectid(projectid)
                .approvalFlowId(approvalFlowId)
                .locationid(locationid)
                .departmentId(departmentId)
                .profileid(profileid)
                .recruiterId(recruiterId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve position
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPositionTest() throws ApiException {
        Integer positionid = null;
        Object response = api.getPosition(positionid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve positions
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPositionsListTest() throws ApiException {
        String search = null;
        Integer page = null;
        Integer pageSize = null;
        String response = api.getPositionsList()
                .search(search)
                .page(page)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

}
