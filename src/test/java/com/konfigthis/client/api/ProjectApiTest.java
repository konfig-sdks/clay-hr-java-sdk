/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.ProjectAssignUserAllocationRequest;
import com.konfigthis.client.model.ProjectCreateNewRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApi
 */
@Disabled
public class ProjectApiTest {

    private static ProjectApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProjectApi(apiClient);
    }

    /**
     * Assign Project Allocation
     *
     * Assigns the project to the user based on the project ID and user ID and returns the userProjectId, which is the ID of the assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignUserAllocationTest() throws ApiException {
        Integer projectId = null;
        Integer userId = null;
        String response = api.assignUserAllocation(projectId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Project
     *
     * Create a new project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        String projectName = null;
        String projectDesc = null;
        String shortCode = null;
        LocalDate startDate = null;
        String response = api.createNew(projectName, projectDesc, shortCode, startDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Project
     *
     * Retrieve the details of the Project by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detailsByIdTest() throws ApiException {
        String projectId = null;
        String response = api.detailsById(projectId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Allocations
     *
     * Returns all user allocations for the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllocationsTest() throws ApiException {
        Integer projectId = null;
        String response = api.listAllocations(projectId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Projects
     *
     * Returns a list of projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectsTest() throws ApiException {
        String response = api.listProjects()
                .execute();
        // TODO: test validations
    }

}
