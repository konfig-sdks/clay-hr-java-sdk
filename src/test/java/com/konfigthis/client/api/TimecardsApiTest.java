/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.TimecardsGetByUserId200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimecardsApi
 */
@Disabled
public class TimecardsApiTest {

    private static TimecardsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimecardsApi(apiClient);
    }

    /**
     * Clock Out
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clockOutTest() throws ApiException {
        String authorization = null;
        Object response = api.clockOut(authorization)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a past timecard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPastTimecardTest() throws ApiException {
        String authorization = null;
        String activity = null;
        Double amount = null;
        String approvalRejectionReason = null;
        String billable = null;
        Integer cardId = null;
        String caseNum = null;
        String caseURL = null;
        String categoryCode = null;
        String chargeType = null;
        Integer cid = null;
        Integer createUserID = null;
        Integer createtsDate = null;
        Integer createtsDay = null;
        Integer createtsHours = null;
        Integer createtsMinutes = null;
        Integer createtsMonth = null;
        Integer createtsNanos = null;
        Integer createtsSeconds = null;
        Long createtsTime = null;
        Integer createtsTimezoneOffset = null;
        Integer createtsYear = null;
        String customHours = null;
        LocalDate date = null;
        String description = null;
        Integer elapsedTimeDate = null;
        Integer elapsedTimeDay = null;
        Integer elapsedTimeHours = null;
        Integer elapsedTimeMinutes = null;
        Integer elapsedTimeMonth = null;
        Integer elapsedTimeSeconds = null;
        Long elapsedTimeTime = null;
        Integer elapsedTimeTimezoneOffset = null;
        Integer elapsedTimeYear = null;
        Integer endDateTimeDate = null;
        Integer endDateTimeDay = null;
        Integer endDateTimeHours = null;
        Integer endDateTimeMinutes = null;
        Integer endDateTimeMonth = null;
        Integer endDateTimeNanos = null;
        Integer endDateTimeSeconds = null;
        Long endDateTimeTime = null;
        Integer endDateTimeTimezoneOffset = null;
        Integer endDateTimeYear = null;
        String endDateTimeStr = null;
        Integer id = null;
        Integer invoiceId = null;
        String notes = null;
        Integer numberOfDays = null;
        LocalDate paymentDate = null;
        Integer projectId = null;
        String projectManager = null;
        Integer projectModelAccount = null;
        String ptoComputed = null;
        String source = null;
        Integer startDateTimeDate = null;
        Integer startDateTimeDay = null;
        Integer startDateTimeHours = null;
        Integer startDateTimeMinutes = null;
        Integer startDateTimeMonth = null;
        Integer startDateTimeNanos = null;
        Integer startDateTimeSeconds = null;
        Long startDateTimeTime = null;
        Integer startDateTimeTimezoneOffset = null;
        Integer startDateTimeYear = null;
        String startDateTimeStr = null;
        String status = null;
        String sumOfElapsedTime = null;
        Integer timesheetId = null;
        String timezone = null;
        Long usedTime = null;
        Object response = api.createPastTimecard(authorization)
                .activity(activity)
                .amount(amount)
                .approvalRejectionReason(approvalRejectionReason)
                .billable(billable)
                .cardId(cardId)
                .caseNum(caseNum)
                .caseURL(caseURL)
                .categoryCode(categoryCode)
                .chargeType(chargeType)
                .cid(cid)
                .createUserID(createUserID)
                .createtsDate(createtsDate)
                .createtsDay(createtsDay)
                .createtsHours(createtsHours)
                .createtsMinutes(createtsMinutes)
                .createtsMonth(createtsMonth)
                .createtsNanos(createtsNanos)
                .createtsSeconds(createtsSeconds)
                .createtsTime(createtsTime)
                .createtsTimezoneOffset(createtsTimezoneOffset)
                .createtsYear(createtsYear)
                .customHours(customHours)
                .date(date)
                .description(description)
                .elapsedTimeDate(elapsedTimeDate)
                .elapsedTimeDay(elapsedTimeDay)
                .elapsedTimeHours(elapsedTimeHours)
                .elapsedTimeMinutes(elapsedTimeMinutes)
                .elapsedTimeMonth(elapsedTimeMonth)
                .elapsedTimeSeconds(elapsedTimeSeconds)
                .elapsedTimeTime(elapsedTimeTime)
                .elapsedTimeTimezoneOffset(elapsedTimeTimezoneOffset)
                .elapsedTimeYear(elapsedTimeYear)
                .endDateTimeDate(endDateTimeDate)
                .endDateTimeDay(endDateTimeDay)
                .endDateTimeHours(endDateTimeHours)
                .endDateTimeMinutes(endDateTimeMinutes)
                .endDateTimeMonth(endDateTimeMonth)
                .endDateTimeNanos(endDateTimeNanos)
                .endDateTimeSeconds(endDateTimeSeconds)
                .endDateTimeTime(endDateTimeTime)
                .endDateTimeTimezoneOffset(endDateTimeTimezoneOffset)
                .endDateTimeYear(endDateTimeYear)
                .endDateTimeStr(endDateTimeStr)
                .id(id)
                .invoiceId(invoiceId)
                .notes(notes)
                .numberOfDays(numberOfDays)
                .paymentDate(paymentDate)
                .projectId(projectId)
                .projectManager(projectManager)
                .projectModelAccount(projectModelAccount)
                .ptoComputed(ptoComputed)
                .source(source)
                .startDateTimeDate(startDateTimeDate)
                .startDateTimeDay(startDateTimeDay)
                .startDateTimeHours(startDateTimeHours)
                .startDateTimeMinutes(startDateTimeMinutes)
                .startDateTimeMonth(startDateTimeMonth)
                .startDateTimeNanos(startDateTimeNanos)
                .startDateTimeSeconds(startDateTimeSeconds)
                .startDateTimeTime(startDateTimeTime)
                .startDateTimeTimezoneOffset(startDateTimeTimezoneOffset)
                .startDateTimeYear(startDateTimeYear)
                .startDateTimeStr(startDateTimeStr)
                .status(status)
                .sumOfElapsedTime(sumOfElapsedTime)
                .timesheetId(timesheetId)
                .timezone(timezone)
                .usedTime(usedTime)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new timecard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTimecardTest() throws ApiException {
        Integer createtsDate = null;
        Integer createtsDay = null;
        Integer createtsHours = null;
        Integer createtsMinutes = null;
        Integer createtsMonth = null;
        Integer createtsNanos = null;
        Integer createtsSeconds = null;
        Long createtsTime = null;
        Integer createtsTimezoneOffset = null;
        Integer createtsYear = null;
        String customHours = null;
        LocalDate date = null;
        String description = null;
        Integer elapsedTimeDate = null;
        Integer elapsedTimeDay = null;
        Integer elapsedTimeHours = null;
        Integer elapsedTimeMinutes = null;
        Integer elapsedTimeMonth = null;
        Integer elapsedTimeSeconds = null;
        Long elapsedTimeTime = null;
        Integer elapsedTimeTimezoneOffset = null;
        Integer elapsedTimeYear = null;
        Integer endDateTimeDate = null;
        Integer endDateTimeDay = null;
        Integer endDateTimeHours = null;
        Integer endDateTimeMinutes = null;
        Integer endDateTimeMonth = null;
        Integer endDateTimeNanos = null;
        Integer endDateTimeSeconds = null;
        Long endDateTimeTime = null;
        Integer endDateTimeTimezoneOffset = null;
        Integer endDateTimeYear = null;
        String endDateTimeStr = null;
        Integer id = null;
        Integer invoiceId = null;
        String notes = null;
        Integer numberOfDays = null;
        LocalDate paymentDate = null;
        Integer projectId = null;
        String projectManager = null;
        Integer projectModelAccount = null;
        Integer timesheetId = null;
        String timezone = null;
        Long usedTime = null;
        Object response = api.createTimecard()
                .createtsDate(createtsDate)
                .createtsDay(createtsDay)
                .createtsHours(createtsHours)
                .createtsMinutes(createtsMinutes)
                .createtsMonth(createtsMonth)
                .createtsNanos(createtsNanos)
                .createtsSeconds(createtsSeconds)
                .createtsTime(createtsTime)
                .createtsTimezoneOffset(createtsTimezoneOffset)
                .createtsYear(createtsYear)
                .customHours(customHours)
                .date(date)
                .description(description)
                .elapsedTimeDate(elapsedTimeDate)
                .elapsedTimeDay(elapsedTimeDay)
                .elapsedTimeHours(elapsedTimeHours)
                .elapsedTimeMinutes(elapsedTimeMinutes)
                .elapsedTimeMonth(elapsedTimeMonth)
                .elapsedTimeSeconds(elapsedTimeSeconds)
                .elapsedTimeTime(elapsedTimeTime)
                .elapsedTimeTimezoneOffset(elapsedTimeTimezoneOffset)
                .elapsedTimeYear(elapsedTimeYear)
                .endDateTimeDate(endDateTimeDate)
                .endDateTimeDay(endDateTimeDay)
                .endDateTimeHours(endDateTimeHours)
                .endDateTimeMinutes(endDateTimeMinutes)
                .endDateTimeMonth(endDateTimeMonth)
                .endDateTimeNanos(endDateTimeNanos)
                .endDateTimeSeconds(endDateTimeSeconds)
                .endDateTimeTime(endDateTimeTime)
                .endDateTimeTimezoneOffset(endDateTimeTimezoneOffset)
                .endDateTimeYear(endDateTimeYear)
                .endDateTimeStr(endDateTimeStr)
                .id(id)
                .invoiceId(invoiceId)
                .notes(notes)
                .numberOfDays(numberOfDays)
                .paymentDate(paymentDate)
                .projectId(projectId)
                .projectManager(projectManager)
                .projectModelAccount(projectModelAccount)
                .timesheetId(timesheetId)
                .timezone(timezone)
                .usedTime(usedTime)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve timecard details by User ID.
     *
     * Retrieve timecard details based on User ID with Add Time Cards For Other permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByUserIdTest() throws ApiException {
        String email = null;
        String guid = null;
        String response = api.getByUserId()
                .email(email)
                .guid(guid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve timecard basic details by User ID.
     *
     * Retrieve timecard basic details based on User ID with Add Time Cards For Other permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByUserId_0Test() throws ApiException {
        String email = null;
        String guid = null;
        TimecardsGetByUserId200Response response = api.getByUserId_0()
                .email(email)
                .guid(guid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve timecard details based on timecard ID.
     *
     * Retrieve timecard details based on timecard ID with Add Time Cards For Other permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsByTimecardIdTest() throws ApiException {
        Integer timecardId = null;
        Boolean flatcustomfields = null;
        String response = api.getDetailsByTimecardId(timecardId)
                .flatcustomfields(flatcustomfields)
                .execute();
        // TODO: test validations
    }

    /**
     * TVC code for clockin with QR Code using cid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTVCForClockinWithQRCodeUsingCidTest() throws ApiException {
        Integer cid = null;
        Object response = api.getTVCForClockinWithQRCodeUsingCid(cid)
                .execute();
        // TODO: test validations
    }

    /**
     * Get timecards by user id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws ApiException {
        String authorization = null;
        String type = null;
        Object response = api.getUserById(authorization)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Register device for ClockIn with AssetModel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerDeviceForClockInWithAssetModelTest() throws ApiException {
        String accessories = null;
        Integer acknowledge = null;
        Integer assetID = null;
        String assetno = null;
        String assetstatus = null;
        String assettype = null;
        LocalDate purchaseDate = null;
        Integer selfAssign = null;
        String serialno = null;
        String service = null;
        String source = null;
        String specs = null;
        String supplier = null;
        String useStatusCode = null;
        String userDomain = null;
        String userMail = null;
        String userPassword = null;
        String uuid = null;
        Object response = api.registerDeviceForClockInWithAssetModel()
                .accessories(accessories)
                .acknowledge(acknowledge)
                .assetID(assetID)
                .assetno(assetno)
                .assetstatus(assetstatus)
                .assettype(assettype)
                .purchaseDate(purchaseDate)
                .selfAssign(selfAssign)
                .serialno(serialno)
                .service(service)
                .source(source)
                .specs(specs)
                .supplier(supplier)
                .useStatusCode(useStatusCode)
                .userDomain(userDomain)
                .userMail(userMail)
                .userPassword(userPassword)
                .uuid(uuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Device verification with DeviceUUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyDeviceWithDeviceUUIDTest() throws ApiException {
        String deviceUUID = null;
        Object response = api.verifyDeviceWithDeviceUUID(deviceUUID)
                .execute();
        // TODO: test validations
    }

    /**
     * User verification with userid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyUserWithUseridTest() throws ApiException {
        String adpAssociateOID = null;
        Double allocation = null;
        String appleUserIdentifier = null;
        String assignments = null;
        String authToken = null;
        String calWeekPref = null;
        Integer calendarId = null;
        Integer candidateId = null;
        Integer careerPathwayId = null;
        String cellPhone = null;
        Integer cid = null;
        Integer countryId = null;
        Integer createtsDate = null;
        Integer createtsDay = null;
        Integer createtsHours = null;
        Integer createtsMinutes = null;
        Integer createtsMonth = null;
        Integer createtsNanos = null;
        Integer createtsSeconds = null;
        Long createtsTime = null;
        Integer createtsTimezoneOffset = null;
        Integer createtsYear = null;
        Integer createuserid = null;
        String thumbnail = null;
        String timecardPeriodPref = null;
        String timezone = null;
        String tosVersion = null;
        String userCountry = null;
        String userDateFormat = null;
        LocalDate userDateOfBirth = null;
        String userDisplayName = null;
        LocalDate userEndDate = null;
        String userName = null;
        String userNameFormat = null;
        String userType = null;
        Boolean view = null;
        String workerType = null;
        String workingDays = null;
        Object response = api.verifyUserWithUserid()
                .adpAssociateOID(adpAssociateOID)
                .allocation(allocation)
                .appleUserIdentifier(appleUserIdentifier)
                .assignments(assignments)
                .authToken(authToken)
                .calWeekPref(calWeekPref)
                .calendarId(calendarId)
                .candidateId(candidateId)
                .careerPathwayId(careerPathwayId)
                .cellPhone(cellPhone)
                .cid(cid)
                .countryId(countryId)
                .createtsDate(createtsDate)
                .createtsDay(createtsDay)
                .createtsHours(createtsHours)
                .createtsMinutes(createtsMinutes)
                .createtsMonth(createtsMonth)
                .createtsNanos(createtsNanos)
                .createtsSeconds(createtsSeconds)
                .createtsTime(createtsTime)
                .createtsTimezoneOffset(createtsTimezoneOffset)
                .createtsYear(createtsYear)
                .createuserid(createuserid)
                .thumbnail(thumbnail)
                .timecardPeriodPref(timecardPeriodPref)
                .timezone(timezone)
                .tosVersion(tosVersion)
                .userCountry(userCountry)
                .userDateFormat(userDateFormat)
                .userDateOfBirth(userDateOfBirth)
                .userDisplayName(userDisplayName)
                .userEndDate(userEndDate)
                .userName(userName)
                .userNameFormat(userNameFormat)
                .userType(userType)
                .view(view)
                .workerType(workerType)
                .workingDays(workingDays)
                .execute();
        // TODO: test validations
    }

}
