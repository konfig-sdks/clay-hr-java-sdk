/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ExpenseReportsCreateNewExpenseItemResponse;
import com.konfigthis.client.model.ExpenseReportsCreateNewResponse;
import com.konfigthis.client.model.ExpenseReportsDeleteExpenseReportResponse;
import com.konfigthis.client.model.ExpenseReportsGetCurrenciesResponse;
import com.konfigthis.client.model.ExpenseReportsSubmitExpenseReportResponse;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpenseReportsApi
 */
@Disabled
public class ExpenseReportsApiTest {

    private static ExpenseReportsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ExpenseReportsApi(apiClient);
    }

    /**
     * Create expense report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        String name = null;
        Double amount = null;
        String description = null;
        ExpenseReportsCreateNewResponse response = api.createNew(name, amount)
                .description(description)
                .execute();
        // TODO: test validations
    }

    /**
     * Create expense item
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewExpenseItemTest() throws ApiException {
        Float amount = null;
        String billable = null;
        Integer cid = null;
        String currencyCode = null;
        LocalDate date = null;
        Integer expenseItemId = null;
        String expenseType = null;
        Integer expenseTypeId = null;
        Integer projectId = null;
        String reimbursible = null;
        String remarks = null;
        ExpenseReportsCreateNewExpenseItemResponse response = api.createNewExpenseItem(amount, billable, cid, currencyCode, date, expenseItemId, expenseType, expenseTypeId, projectId, reimbursible, remarks)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete expense report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExpenseReportTest() throws ApiException {
        Integer expenseReportId = null;
        ExpenseReportsDeleteExpenseReportResponse response = api.deleteExpenseReport(expenseReportId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve expense reports by User ID
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByUserIdTest() throws ApiException {
        String guid = null;
        String email = null;
        String response = api.getByUserId()
                .guid(guid)
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve currencies
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrenciesTest() throws ApiException {
        ExpenseReportsGetCurrenciesResponse response = api.getCurrencies()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve expense types
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExpenseTypesTest() throws ApiException {
        String response = api.getExpenseTypes()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the details of expense report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportDetailsTest() throws ApiException {
        Integer expenseReportId = null;
        String guid = null;
        String response = api.getReportDetails()
                .expenseReportId(expenseReportId)
                .guid(guid)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit expense report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitExpenseReportTest() throws ApiException {
        Integer expenseReportId = null;
        String status = null;
        ExpenseReportsSubmitExpenseReportResponse response = api.submitExpenseReport(expenseReportId, status)
                .execute();
        // TODO: test validations
    }

}
