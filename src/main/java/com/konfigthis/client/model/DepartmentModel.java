/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.UserViewModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DepartmentModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DepartmentModel {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_DEPARTMENT_CODE = "departmentCode";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_CODE)
  private String departmentCode;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "departmentId";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Integer departmentId;

  public static final String SERIALIZED_NAME_DEPARTMENT_LABEL = "departmentLabel";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_LABEL)
  private String departmentLabel;

  public static final String SERIALIZED_NAME_DEPT_HEAD = "deptHead";
  @SerializedName(SERIALIZED_NAME_DEPT_HEAD)
  private Integer deptHead;

  public static final String SERIALIZED_NAME_DEPT_HEAD_NAME = "deptHeadName";
  @SerializedName(SERIALIZED_NAME_DEPT_HEAD_NAME)
  private String deptHeadName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NO_OF_EMPLOYEES = "noOfEmployees";
  @SerializedName(SERIALIZED_NAME_NO_OF_EMPLOYEES)
  private Integer noOfEmployees;

  public static final String SERIALIZED_NAME_PARENT_DEPARTMENT_ID = "parentDepartmentId";
  @SerializedName(SERIALIZED_NAME_PARENT_DEPARTMENT_ID)
  private Integer parentDepartmentId;

  public static final String SERIALIZED_NAME_PARENT_DEPARTMENT_NAME = "parentDepartmentName";
  @SerializedName(SERIALIZED_NAME_PARENT_DEPARTMENT_NAME)
  private String parentDepartmentName;

  public static final String SERIALIZED_NAME_USER_MODEL = "userModel";
  @SerializedName(SERIALIZED_NAME_USER_MODEL)
  private UserViewModel userModel;

  public DepartmentModel() {
  }

  public DepartmentModel description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public DepartmentModel cid(Integer cid) {
    
    
    
    
    this.cid = cid;
    return this;
  }

   /**
   * Get cid
   * @return cid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCid() {
    return cid;
  }


  public void setCid(Integer cid) {
    
    
    
    this.cid = cid;
  }


  public DepartmentModel departmentCode(String departmentCode) {
    
    
    
    
    this.departmentCode = departmentCode;
    return this;
  }

   /**
   * Get departmentCode
   * @return departmentCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepartmentCode() {
    return departmentCode;
  }


  public void setDepartmentCode(String departmentCode) {
    
    
    
    this.departmentCode = departmentCode;
  }


  public DepartmentModel departmentId(Integer departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Get departmentId
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(Integer departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public DepartmentModel departmentLabel(String departmentLabel) {
    
    
    
    
    this.departmentLabel = departmentLabel;
    return this;
  }

   /**
   * Get departmentLabel
   * @return departmentLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepartmentLabel() {
    return departmentLabel;
  }


  public void setDepartmentLabel(String departmentLabel) {
    
    
    
    this.departmentLabel = departmentLabel;
  }


  public DepartmentModel deptHead(Integer deptHead) {
    
    
    
    
    this.deptHead = deptHead;
    return this;
  }

   /**
   * Get deptHead
   * @return deptHead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDeptHead() {
    return deptHead;
  }


  public void setDeptHead(Integer deptHead) {
    
    
    
    this.deptHead = deptHead;
  }


  public DepartmentModel deptHeadName(String deptHeadName) {
    
    
    
    
    this.deptHeadName = deptHeadName;
    return this;
  }

   /**
   * Get deptHeadName
   * @return deptHeadName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeptHeadName() {
    return deptHeadName;
  }


  public void setDeptHeadName(String deptHeadName) {
    
    
    
    this.deptHeadName = deptHeadName;
  }


  public DepartmentModel name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public DepartmentModel noOfEmployees(Integer noOfEmployees) {
    
    
    
    
    this.noOfEmployees = noOfEmployees;
    return this;
  }

   /**
   * Get noOfEmployees
   * @return noOfEmployees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getNoOfEmployees() {
    return noOfEmployees;
  }


  public void setNoOfEmployees(Integer noOfEmployees) {
    
    
    
    this.noOfEmployees = noOfEmployees;
  }


  public DepartmentModel parentDepartmentId(Integer parentDepartmentId) {
    
    
    
    
    this.parentDepartmentId = parentDepartmentId;
    return this;
  }

   /**
   * Get parentDepartmentId
   * @return parentDepartmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getParentDepartmentId() {
    return parentDepartmentId;
  }


  public void setParentDepartmentId(Integer parentDepartmentId) {
    
    
    
    this.parentDepartmentId = parentDepartmentId;
  }


  public DepartmentModel parentDepartmentName(String parentDepartmentName) {
    
    
    
    
    this.parentDepartmentName = parentDepartmentName;
    return this;
  }

   /**
   * Get parentDepartmentName
   * @return parentDepartmentName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getParentDepartmentName() {
    return parentDepartmentName;
  }


  public void setParentDepartmentName(String parentDepartmentName) {
    
    
    
    this.parentDepartmentName = parentDepartmentName;
  }


  public DepartmentModel userModel(UserViewModel userModel) {
    
    
    
    
    this.userModel = userModel;
    return this;
  }

   /**
   * Get userModel
   * @return userModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserViewModel getUserModel() {
    return userModel;
  }


  public void setUserModel(UserViewModel userModel) {
    
    
    
    this.userModel = userModel;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DepartmentModel instance itself
   */
  public DepartmentModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepartmentModel departmentModel = (DepartmentModel) o;
    return Objects.equals(this.description, departmentModel.description) &&
        Objects.equals(this.cid, departmentModel.cid) &&
        Objects.equals(this.departmentCode, departmentModel.departmentCode) &&
        Objects.equals(this.departmentId, departmentModel.departmentId) &&
        Objects.equals(this.departmentLabel, departmentModel.departmentLabel) &&
        Objects.equals(this.deptHead, departmentModel.deptHead) &&
        Objects.equals(this.deptHeadName, departmentModel.deptHeadName) &&
        Objects.equals(this.name, departmentModel.name) &&
        Objects.equals(this.noOfEmployees, departmentModel.noOfEmployees) &&
        Objects.equals(this.parentDepartmentId, departmentModel.parentDepartmentId) &&
        Objects.equals(this.parentDepartmentName, departmentModel.parentDepartmentName) &&
        Objects.equals(this.userModel, departmentModel.userModel)&&
        Objects.equals(this.additionalProperties, departmentModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, cid, departmentCode, departmentId, departmentLabel, deptHead, deptHeadName, name, noOfEmployees, parentDepartmentId, parentDepartmentName, userModel, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepartmentModel {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    departmentCode: ").append(toIndentedString(departmentCode)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    departmentLabel: ").append(toIndentedString(departmentLabel)).append("\n");
    sb.append("    deptHead: ").append(toIndentedString(deptHead)).append("\n");
    sb.append("    deptHeadName: ").append(toIndentedString(deptHeadName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    noOfEmployees: ").append(toIndentedString(noOfEmployees)).append("\n");
    sb.append("    parentDepartmentId: ").append(toIndentedString(parentDepartmentId)).append("\n");
    sb.append("    parentDepartmentName: ").append(toIndentedString(parentDepartmentName)).append("\n");
    sb.append("    userModel: ").append(toIndentedString(userModel)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("cid");
    openapiFields.add("departmentCode");
    openapiFields.add("departmentId");
    openapiFields.add("departmentLabel");
    openapiFields.add("deptHead");
    openapiFields.add("deptHeadName");
    openapiFields.add("name");
    openapiFields.add("noOfEmployees");
    openapiFields.add("parentDepartmentId");
    openapiFields.add("parentDepartmentName");
    openapiFields.add("userModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DepartmentModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DepartmentModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DepartmentModel is not found in the empty JSON string", DepartmentModel.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("departmentCode") != null && !jsonObj.get("departmentCode").isJsonNull()) && !jsonObj.get("departmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departmentCode").toString()));
      }
      if ((jsonObj.get("departmentLabel") != null && !jsonObj.get("departmentLabel").isJsonNull()) && !jsonObj.get("departmentLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departmentLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departmentLabel").toString()));
      }
      if ((jsonObj.get("deptHeadName") != null && !jsonObj.get("deptHeadName").isJsonNull()) && !jsonObj.get("deptHeadName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deptHeadName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deptHeadName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parentDepartmentName") != null && !jsonObj.get("parentDepartmentName").isJsonNull()) && !jsonObj.get("parentDepartmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentDepartmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentDepartmentName").toString()));
      }
      // validate the optional field `userModel`
      if (jsonObj.get("userModel") != null && !jsonObj.get("userModel").isJsonNull()) {
        UserViewModel.validateJsonObject(jsonObj.getAsJsonObject("userModel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DepartmentModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DepartmentModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DepartmentModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DepartmentModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DepartmentModel>() {
           @Override
           public void write(JsonWriter out, DepartmentModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DepartmentModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DepartmentModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DepartmentModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DepartmentModel
  * @throws IOException if the JSON string is invalid with respect to DepartmentModel
  */
  public static DepartmentModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DepartmentModel.class);
  }

 /**
  * Convert an instance of DepartmentModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

