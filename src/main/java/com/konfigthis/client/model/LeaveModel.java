/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PtoPolicyModel;
import com.konfigthis.client.model.UserModel;
import com.konfigthis.client.model.UserViewModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LeaveModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LeaveModel {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATE_USER_VIEW_MODEL = "createUserViewModel";
  @SerializedName(SERIALIZED_NAME_CREATE_USER_VIEW_MODEL)
  private UserViewModel createUserViewModel;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_END_DATE_MERIDIEM = "endDateMeridiem";
  @SerializedName(SERIALIZED_NAME_END_DATE_MERIDIEM)
  private String endDateMeridiem;

  public static final String SERIALIZED_NAME_MERIDIEM = "meridiem";
  @SerializedName(SERIALIZED_NAME_MERIDIEM)
  private String meridiem;

  public static final String SERIALIZED_NAME_NUMBER_OF_DAYS = "numberOfDays";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DAYS)
  private Integer numberOfDays;

  public static final String SERIALIZED_NAME_PTO_POLICY_MODEL = "ptoPolicyModel";
  @SerializedName(SERIALIZED_NAME_PTO_POLICY_MODEL)
  private PtoPolicyModel ptoPolicyModel;

  public static final String SERIALIZED_NAME_TOTAL_LEAVE_DAYS = "totalLeaveDays";
  @SerializedName(SERIALIZED_NAME_TOTAL_LEAVE_DAYS)
  private Double totalLeaveDays;

  public static final String SERIALIZED_NAME_TOTAL_LEAVE_HOURS = "totalLeaveHours";
  @SerializedName(SERIALIZED_NAME_TOTAL_LEAVE_HOURS)
  private Double totalLeaveHours;

  public static final String SERIALIZED_NAME_USER_MODEL = "userModel";
  @SerializedName(SERIALIZED_NAME_USER_MODEL)
  private UserModel userModel;

  public LeaveModel() {
  }

  public LeaveModel description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description for the leave.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description for the leave.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public LeaveModel createUserViewModel(UserViewModel createUserViewModel) {
    
    
    
    
    this.createUserViewModel = createUserViewModel;
    return this;
  }

   /**
   * Get createUserViewModel
   * @return createUserViewModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserViewModel getCreateUserViewModel() {
    return createUserViewModel;
  }


  public void setCreateUserViewModel(UserViewModel createUserViewModel) {
    
    
    
    this.createUserViewModel = createUserViewModel;
  }


  public LeaveModel date(LocalDate date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * Date of the leave.
   * @return date
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date of the leave.")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    
    
    
    this.date = date;
  }


  public LeaveModel endDateMeridiem(String endDateMeridiem) {
    
    
    
    
    this.endDateMeridiem = endDateMeridiem;
    return this;
  }

   /**
   * Get endDateMeridiem
   * @return endDateMeridiem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEndDateMeridiem() {
    return endDateMeridiem;
  }


  public void setEndDateMeridiem(String endDateMeridiem) {
    
    
    
    this.endDateMeridiem = endDateMeridiem;
  }


  public LeaveModel meridiem(String meridiem) {
    
    
    
    
    this.meridiem = meridiem;
    return this;
  }

   /**
   * Get meridiem
   * @return meridiem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMeridiem() {
    return meridiem;
  }


  public void setMeridiem(String meridiem) {
    
    
    
    this.meridiem = meridiem;
  }


  public LeaveModel numberOfDays(Integer numberOfDays) {
    
    
    
    
    this.numberOfDays = numberOfDays;
    return this;
  }

   /**
   * Number of days for which leave is requested.
   * @return numberOfDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of days for which leave is requested.")

  public Integer getNumberOfDays() {
    return numberOfDays;
  }


  public void setNumberOfDays(Integer numberOfDays) {
    
    
    
    this.numberOfDays = numberOfDays;
  }


  public LeaveModel ptoPolicyModel(PtoPolicyModel ptoPolicyModel) {
    
    
    
    
    this.ptoPolicyModel = ptoPolicyModel;
    return this;
  }

   /**
   * Get ptoPolicyModel
   * @return ptoPolicyModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PtoPolicyModel getPtoPolicyModel() {
    return ptoPolicyModel;
  }


  public void setPtoPolicyModel(PtoPolicyModel ptoPolicyModel) {
    
    
    
    this.ptoPolicyModel = ptoPolicyModel;
  }


  public LeaveModel totalLeaveDays(Double totalLeaveDays) {
    
    
    
    
    this.totalLeaveDays = totalLeaveDays;
    return this;
  }

   /**
   * Total days of leave.
   * @return totalLeaveDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total days of leave.")

  public Double getTotalLeaveDays() {
    return totalLeaveDays;
  }


  public void setTotalLeaveDays(Double totalLeaveDays) {
    
    
    
    this.totalLeaveDays = totalLeaveDays;
  }


  public LeaveModel totalLeaveHours(Double totalLeaveHours) {
    
    
    
    
    this.totalLeaveHours = totalLeaveHours;
    return this;
  }

   /**
   * Total hours of leave.
   * @return totalLeaveHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total hours of leave.")

  public Double getTotalLeaveHours() {
    return totalLeaveHours;
  }


  public void setTotalLeaveHours(Double totalLeaveHours) {
    
    
    
    this.totalLeaveHours = totalLeaveHours;
  }


  public LeaveModel userModel(UserModel userModel) {
    
    
    
    
    this.userModel = userModel;
    return this;
  }

   /**
   * Get userModel
   * @return userModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserModel getUserModel() {
    return userModel;
  }


  public void setUserModel(UserModel userModel) {
    
    
    
    this.userModel = userModel;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LeaveModel instance itself
   */
  public LeaveModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveModel leaveModel = (LeaveModel) o;
    return Objects.equals(this.description, leaveModel.description) &&
        Objects.equals(this.createUserViewModel, leaveModel.createUserViewModel) &&
        Objects.equals(this.date, leaveModel.date) &&
        Objects.equals(this.endDateMeridiem, leaveModel.endDateMeridiem) &&
        Objects.equals(this.meridiem, leaveModel.meridiem) &&
        Objects.equals(this.numberOfDays, leaveModel.numberOfDays) &&
        Objects.equals(this.ptoPolicyModel, leaveModel.ptoPolicyModel) &&
        Objects.equals(this.totalLeaveDays, leaveModel.totalLeaveDays) &&
        Objects.equals(this.totalLeaveHours, leaveModel.totalLeaveHours) &&
        Objects.equals(this.userModel, leaveModel.userModel)&&
        Objects.equals(this.additionalProperties, leaveModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, createUserViewModel, date, endDateMeridiem, meridiem, numberOfDays, ptoPolicyModel, totalLeaveDays, totalLeaveHours, userModel, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveModel {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createUserViewModel: ").append(toIndentedString(createUserViewModel)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    endDateMeridiem: ").append(toIndentedString(endDateMeridiem)).append("\n");
    sb.append("    meridiem: ").append(toIndentedString(meridiem)).append("\n");
    sb.append("    numberOfDays: ").append(toIndentedString(numberOfDays)).append("\n");
    sb.append("    ptoPolicyModel: ").append(toIndentedString(ptoPolicyModel)).append("\n");
    sb.append("    totalLeaveDays: ").append(toIndentedString(totalLeaveDays)).append("\n");
    sb.append("    totalLeaveHours: ").append(toIndentedString(totalLeaveHours)).append("\n");
    sb.append("    userModel: ").append(toIndentedString(userModel)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("createUserViewModel");
    openapiFields.add("date");
    openapiFields.add("endDateMeridiem");
    openapiFields.add("meridiem");
    openapiFields.add("numberOfDays");
    openapiFields.add("ptoPolicyModel");
    openapiFields.add("totalLeaveDays");
    openapiFields.add("totalLeaveHours");
    openapiFields.add("userModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("date");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LeaveModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LeaveModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaveModel is not found in the empty JSON string", LeaveModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LeaveModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `createUserViewModel`
      if (jsonObj.get("createUserViewModel") != null && !jsonObj.get("createUserViewModel").isJsonNull()) {
        UserViewModel.validateJsonObject(jsonObj.getAsJsonObject("createUserViewModel"));
      }
      if ((jsonObj.get("endDateMeridiem") != null && !jsonObj.get("endDateMeridiem").isJsonNull()) && !jsonObj.get("endDateMeridiem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDateMeridiem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDateMeridiem").toString()));
      }
      if ((jsonObj.get("meridiem") != null && !jsonObj.get("meridiem").isJsonNull()) && !jsonObj.get("meridiem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meridiem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meridiem").toString()));
      }
      // validate the optional field `ptoPolicyModel`
      if (jsonObj.get("ptoPolicyModel") != null && !jsonObj.get("ptoPolicyModel").isJsonNull()) {
        PtoPolicyModel.validateJsonObject(jsonObj.getAsJsonObject("ptoPolicyModel"));
      }
      // validate the optional field `userModel`
      if (jsonObj.get("userModel") != null && !jsonObj.get("userModel").isJsonNull()) {
        UserModel.validateJsonObject(jsonObj.getAsJsonObject("userModel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaveModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaveModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaveModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaveModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaveModel>() {
           @Override
           public void write(JsonWriter out, LeaveModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaveModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LeaveModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeaveModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeaveModel
  * @throws IOException if the JSON string is invalid with respect to LeaveModel
  */
  public static LeaveModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaveModel.class);
  }

 /**
  * Convert an instance of LeaveModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

