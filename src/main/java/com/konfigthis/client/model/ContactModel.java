/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AddressModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ContactModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContactModel {
  public static final String SERIALIZED_NAME_ADDRESS_MODEL_LIST = "addressModelList";
  @SerializedName(SERIALIZED_NAME_ADDRESS_MODEL_LIST)
  private List<AddressModel> addressModelList = null;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidateId";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private Integer candidateId;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_CONTACT_TYPE = "contactType";
  @SerializedName(SERIALIZED_NAME_CONTACT_TYPE)
  private String contactType;

  public static final String SERIALIZED_NAME_CONTACTID = "contactid";
  @SerializedName(SERIALIZED_NAME_CONTACTID)
  private Integer contactid;

  public static final String SERIALIZED_NAME_CREATEUSERID = "createuserid";
  @SerializedName(SERIALIZED_NAME_CREATEUSERID)
  private Integer createuserid;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_EMAIL1 = "email1";
  @SerializedName(SERIALIZED_NAME_EMAIL1)
  private String email1;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_OTHER_RELATION_TO_USER = "otherRelationToUser";
  @SerializedName(SERIALIZED_NAME_OTHER_RELATION_TO_USER)
  private String otherRelationToUser;

  public static final String SERIALIZED_NAME_PHONE1 = "phone1";
  @SerializedName(SERIALIZED_NAME_PHONE1)
  private String phone1;

  public static final String SERIALIZED_NAME_PHONE1TYPE = "phone1type";
  @SerializedName(SERIALIZED_NAME_PHONE1TYPE)
  private String phone1type;

  public static final String SERIALIZED_NAME_PHONE2 = "phone2";
  @SerializedName(SERIALIZED_NAME_PHONE2)
  private String phone2;

  public static final String SERIALIZED_NAME_PHONE2TYPE = "phone2type";
  @SerializedName(SERIALIZED_NAME_PHONE2TYPE)
  private String phone2type;

  public static final String SERIALIZED_NAME_PHONE3 = "phone3";
  @SerializedName(SERIALIZED_NAME_PHONE3)
  private String phone3;

  public static final String SERIALIZED_NAME_PHONE3TYPE = "phone3type";
  @SerializedName(SERIALIZED_NAME_PHONE3TYPE)
  private String phone3type;

  public static final String SERIALIZED_NAME_RELATION_TO_USER = "relationToUser";
  @SerializedName(SERIALIZED_NAME_RELATION_TO_USER)
  private String relationToUser;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAX_NUMBER = "taxNumber";
  @SerializedName(SERIALIZED_NAME_TAX_NUMBER)
  private String taxNumber;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public ContactModel() {
  }

  public ContactModel addressModelList(List<AddressModel> addressModelList) {
    
    
    
    
    this.addressModelList = addressModelList;
    return this;
  }

  public ContactModel addAddressModelListItem(AddressModel addressModelListItem) {
    if (this.addressModelList == null) {
      this.addressModelList = new ArrayList<>();
    }
    this.addressModelList.add(addressModelListItem);
    return this;
  }

   /**
   * Get addressModelList
   * @return addressModelList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AddressModel> getAddressModelList() {
    return addressModelList;
  }


  public void setAddressModelList(List<AddressModel> addressModelList) {
    
    
    
    this.addressModelList = addressModelList;
  }


  public ContactModel candidateId(Integer candidateId) {
    
    
    
    
    this.candidateId = candidateId;
    return this;
  }

   /**
   * Get candidateId
   * @return candidateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCandidateId() {
    return candidateId;
  }


  public void setCandidateId(Integer candidateId) {
    
    
    
    this.candidateId = candidateId;
  }


  public ContactModel cid(Integer cid) {
    
    
    
    
    this.cid = cid;
    return this;
  }

   /**
   * Get cid
   * @return cid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCid() {
    return cid;
  }


  public void setCid(Integer cid) {
    
    
    
    this.cid = cid;
  }


  public ContactModel contactType(String contactType) {
    
    
    
    
    this.contactType = contactType;
    return this;
  }

   /**
   * Get contactType
   * @return contactType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContactType() {
    return contactType;
  }


  public void setContactType(String contactType) {
    
    
    
    this.contactType = contactType;
  }


  public ContactModel contactid(Integer contactid) {
    
    
    
    
    this.contactid = contactid;
    return this;
  }

   /**
   * Get contactid
   * @return contactid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getContactid() {
    return contactid;
  }


  public void setContactid(Integer contactid) {
    
    
    
    this.contactid = contactid;
  }


  public ContactModel createuserid(Integer createuserid) {
    
    
    
    
    this.createuserid = createuserid;
    return this;
  }

   /**
   * Get createuserid
   * @return createuserid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreateuserid() {
    return createuserid;
  }


  public void setCreateuserid(Integer createuserid) {
    
    
    
    this.createuserid = createuserid;
  }


  public ContactModel dateOfBirth(LocalDate dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(LocalDate dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public ContactModel email1(String email1) {
    
    
    
    
    this.email1 = email1;
    return this;
  }

   /**
   * Get email1
   * @return email1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail1() {
    return email1;
  }


  public void setEmail1(String email1) {
    
    
    
    this.email1 = email1;
  }


  public ContactModel gender(String gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    
    
    
    this.gender = gender;
  }


  public ContactModel lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public ContactModel name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ContactModel notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public ContactModel otherRelationToUser(String otherRelationToUser) {
    
    
    
    
    this.otherRelationToUser = otherRelationToUser;
    return this;
  }

   /**
   * Get otherRelationToUser
   * @return otherRelationToUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOtherRelationToUser() {
    return otherRelationToUser;
  }


  public void setOtherRelationToUser(String otherRelationToUser) {
    
    
    
    this.otherRelationToUser = otherRelationToUser;
  }


  public ContactModel phone1(String phone1) {
    
    
    
    
    this.phone1 = phone1;
    return this;
  }

   /**
   * Get phone1
   * @return phone1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPhone1() {
    return phone1;
  }


  public void setPhone1(String phone1) {
    
    
    
    this.phone1 = phone1;
  }


  public ContactModel phone1type(String phone1type) {
    
    
    
    
    this.phone1type = phone1type;
    return this;
  }

   /**
   * Get phone1type
   * @return phone1type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPhone1type() {
    return phone1type;
  }


  public void setPhone1type(String phone1type) {
    
    
    
    this.phone1type = phone1type;
  }


  public ContactModel phone2(String phone2) {
    
    
    
    
    this.phone2 = phone2;
    return this;
  }

   /**
   * Get phone2
   * @return phone2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPhone2() {
    return phone2;
  }


  public void setPhone2(String phone2) {
    
    
    
    this.phone2 = phone2;
  }


  public ContactModel phone2type(String phone2type) {
    
    
    
    
    this.phone2type = phone2type;
    return this;
  }

   /**
   * Get phone2type
   * @return phone2type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPhone2type() {
    return phone2type;
  }


  public void setPhone2type(String phone2type) {
    
    
    
    this.phone2type = phone2type;
  }


  public ContactModel phone3(String phone3) {
    
    
    
    
    this.phone3 = phone3;
    return this;
  }

   /**
   * Get phone3
   * @return phone3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPhone3() {
    return phone3;
  }


  public void setPhone3(String phone3) {
    
    
    
    this.phone3 = phone3;
  }


  public ContactModel phone3type(String phone3type) {
    
    
    
    
    this.phone3type = phone3type;
    return this;
  }

   /**
   * Get phone3type
   * @return phone3type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPhone3type() {
    return phone3type;
  }


  public void setPhone3type(String phone3type) {
    
    
    
    this.phone3type = phone3type;
  }


  public ContactModel relationToUser(String relationToUser) {
    
    
    
    
    this.relationToUser = relationToUser;
    return this;
  }

   /**
   * Get relationToUser
   * @return relationToUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRelationToUser() {
    return relationToUser;
  }


  public void setRelationToUser(String relationToUser) {
    
    
    
    this.relationToUser = relationToUser;
  }


  public ContactModel status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public ContactModel taxNumber(String taxNumber) {
    
    
    
    
    this.taxNumber = taxNumber;
    return this;
  }

   /**
   * Get taxNumber
   * @return taxNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxNumber() {
    return taxNumber;
  }


  public void setTaxNumber(String taxNumber) {
    
    
    
    this.taxNumber = taxNumber;
  }


  public ContactModel userId(Integer userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    
    
    
    this.userId = userId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContactModel instance itself
   */
  public ContactModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactModel contactModel = (ContactModel) o;
    return Objects.equals(this.addressModelList, contactModel.addressModelList) &&
        Objects.equals(this.candidateId, contactModel.candidateId) &&
        Objects.equals(this.cid, contactModel.cid) &&
        Objects.equals(this.contactType, contactModel.contactType) &&
        Objects.equals(this.contactid, contactModel.contactid) &&
        Objects.equals(this.createuserid, contactModel.createuserid) &&
        Objects.equals(this.dateOfBirth, contactModel.dateOfBirth) &&
        Objects.equals(this.email1, contactModel.email1) &&
        Objects.equals(this.gender, contactModel.gender) &&
        Objects.equals(this.lastName, contactModel.lastName) &&
        Objects.equals(this.name, contactModel.name) &&
        Objects.equals(this.notes, contactModel.notes) &&
        Objects.equals(this.otherRelationToUser, contactModel.otherRelationToUser) &&
        Objects.equals(this.phone1, contactModel.phone1) &&
        Objects.equals(this.phone1type, contactModel.phone1type) &&
        Objects.equals(this.phone2, contactModel.phone2) &&
        Objects.equals(this.phone2type, contactModel.phone2type) &&
        Objects.equals(this.phone3, contactModel.phone3) &&
        Objects.equals(this.phone3type, contactModel.phone3type) &&
        Objects.equals(this.relationToUser, contactModel.relationToUser) &&
        Objects.equals(this.status, contactModel.status) &&
        Objects.equals(this.taxNumber, contactModel.taxNumber) &&
        Objects.equals(this.userId, contactModel.userId)&&
        Objects.equals(this.additionalProperties, contactModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressModelList, candidateId, cid, contactType, contactid, createuserid, dateOfBirth, email1, gender, lastName, name, notes, otherRelationToUser, phone1, phone1type, phone2, phone2type, phone3, phone3type, relationToUser, status, taxNumber, userId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactModel {\n");
    sb.append("    addressModelList: ").append(toIndentedString(addressModelList)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    contactType: ").append(toIndentedString(contactType)).append("\n");
    sb.append("    contactid: ").append(toIndentedString(contactid)).append("\n");
    sb.append("    createuserid: ").append(toIndentedString(createuserid)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    email1: ").append(toIndentedString(email1)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherRelationToUser: ").append(toIndentedString(otherRelationToUser)).append("\n");
    sb.append("    phone1: ").append(toIndentedString(phone1)).append("\n");
    sb.append("    phone1type: ").append(toIndentedString(phone1type)).append("\n");
    sb.append("    phone2: ").append(toIndentedString(phone2)).append("\n");
    sb.append("    phone2type: ").append(toIndentedString(phone2type)).append("\n");
    sb.append("    phone3: ").append(toIndentedString(phone3)).append("\n");
    sb.append("    phone3type: ").append(toIndentedString(phone3type)).append("\n");
    sb.append("    relationToUser: ").append(toIndentedString(relationToUser)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxNumber: ").append(toIndentedString(taxNumber)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressModelList");
    openapiFields.add("candidateId");
    openapiFields.add("cid");
    openapiFields.add("contactType");
    openapiFields.add("contactid");
    openapiFields.add("createuserid");
    openapiFields.add("dateOfBirth");
    openapiFields.add("email1");
    openapiFields.add("gender");
    openapiFields.add("lastName");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("otherRelationToUser");
    openapiFields.add("phone1");
    openapiFields.add("phone1type");
    openapiFields.add("phone2");
    openapiFields.add("phone2type");
    openapiFields.add("phone3");
    openapiFields.add("phone3type");
    openapiFields.add("relationToUser");
    openapiFields.add("status");
    openapiFields.add("taxNumber");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContactModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContactModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactModel is not found in the empty JSON string", ContactModel.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("addressModelList") != null && !jsonObj.get("addressModelList").isJsonNull()) {
        JsonArray jsonArrayaddressModelList = jsonObj.getAsJsonArray("addressModelList");
        if (jsonArrayaddressModelList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addressModelList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addressModelList` to be an array in the JSON string but got `%s`", jsonObj.get("addressModelList").toString()));
          }

          // validate the optional field `addressModelList` (array)
          for (int i = 0; i < jsonArrayaddressModelList.size(); i++) {
            AddressModel.validateJsonObject(jsonArrayaddressModelList.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("contactType") != null && !jsonObj.get("contactType").isJsonNull()) && !jsonObj.get("contactType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactType").toString()));
      }
      if ((jsonObj.get("email1") != null && !jsonObj.get("email1").isJsonNull()) && !jsonObj.get("email1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email1").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("otherRelationToUser") != null && !jsonObj.get("otherRelationToUser").isJsonNull()) && !jsonObj.get("otherRelationToUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherRelationToUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherRelationToUser").toString()));
      }
      if ((jsonObj.get("phone1") != null && !jsonObj.get("phone1").isJsonNull()) && !jsonObj.get("phone1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone1").toString()));
      }
      if ((jsonObj.get("phone1type") != null && !jsonObj.get("phone1type").isJsonNull()) && !jsonObj.get("phone1type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone1type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone1type").toString()));
      }
      if ((jsonObj.get("phone2") != null && !jsonObj.get("phone2").isJsonNull()) && !jsonObj.get("phone2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone2").toString()));
      }
      if ((jsonObj.get("phone2type") != null && !jsonObj.get("phone2type").isJsonNull()) && !jsonObj.get("phone2type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone2type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone2type").toString()));
      }
      if ((jsonObj.get("phone3") != null && !jsonObj.get("phone3").isJsonNull()) && !jsonObj.get("phone3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone3").toString()));
      }
      if ((jsonObj.get("phone3type") != null && !jsonObj.get("phone3type").isJsonNull()) && !jsonObj.get("phone3type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone3type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone3type").toString()));
      }
      if ((jsonObj.get("relationToUser") != null && !jsonObj.get("relationToUser").isJsonNull()) && !jsonObj.get("relationToUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationToUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationToUser").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("taxNumber") != null && !jsonObj.get("taxNumber").isJsonNull()) && !jsonObj.get("taxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactModel>() {
           @Override
           public void write(JsonWriter out, ContactModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContactModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactModel
  * @throws IOException if the JSON string is invalid with respect to ContactModel
  */
  public static ContactModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactModel.class);
  }

 /**
  * Convert an instance of ContactModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

