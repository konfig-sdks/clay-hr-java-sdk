/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomTableColumnValueModel;
import com.konfigthis.client.model.UserViewModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CustomTableValueModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomTableValueModel {
  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidateId";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private Integer candidateId;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_CREATE_USER_ID = "createUserId";
  @SerializedName(SERIALIZED_NAME_CREATE_USER_ID)
  private Integer createUserId;

  public static final String SERIALIZED_NAME_CREATETS = "createts";
  @SerializedName(SERIALIZED_NAME_CREATETS)
  private Timestamp createts;

  public static final String SERIALIZED_NAME_CT_COLUMN_VALUE_LIST = "ctColumnValueList";
  @SerializedName(SERIALIZED_NAME_CT_COLUMN_VALUE_LIST)
  private List<CustomTableColumnValueModel> ctColumnValueList = null;

  public static final String SERIALIZED_NAME_CT_VALUE_ID = "ctValueId";
  @SerializedName(SERIALIZED_NAME_CT_VALUE_ID)
  private Integer ctValueId;

  public static final String SERIALIZED_NAME_CUSTOM_TABLE_ID = "customTableId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TABLE_ID)
  private Integer customTableId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USER_MODEL = "userModel";
  @SerializedName(SERIALIZED_NAME_USER_MODEL)
  private UserViewModel userModel;

  public CustomTableValueModel() {
  }

  public CustomTableValueModel candidateId(Integer candidateId) {
    
    
    
    
    this.candidateId = candidateId;
    return this;
  }

   /**
   * Get candidateId
   * @return candidateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCandidateId() {
    return candidateId;
  }


  public void setCandidateId(Integer candidateId) {
    
    
    
    this.candidateId = candidateId;
  }


  public CustomTableValueModel cid(Integer cid) {
    
    
    
    
    this.cid = cid;
    return this;
  }

   /**
   * Get cid
   * @return cid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCid() {
    return cid;
  }


  public void setCid(Integer cid) {
    
    
    
    this.cid = cid;
  }


  public CustomTableValueModel createUserId(Integer createUserId) {
    
    
    
    
    this.createUserId = createUserId;
    return this;
  }

   /**
   * Get createUserId
   * @return createUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreateUserId() {
    return createUserId;
  }


  public void setCreateUserId(Integer createUserId) {
    
    
    
    this.createUserId = createUserId;
  }


  public CustomTableValueModel createts(Timestamp createts) {
    
    
    
    
    this.createts = createts;
    return this;
  }

   /**
   * Get createts
   * @return createts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Timestamp getCreatets() {
    return createts;
  }


  public void setCreatets(Timestamp createts) {
    
    
    
    this.createts = createts;
  }


  public CustomTableValueModel ctColumnValueList(List<CustomTableColumnValueModel> ctColumnValueList) {
    
    
    
    
    this.ctColumnValueList = ctColumnValueList;
    return this;
  }

  public CustomTableValueModel addCtColumnValueListItem(CustomTableColumnValueModel ctColumnValueListItem) {
    if (this.ctColumnValueList == null) {
      this.ctColumnValueList = new ArrayList<>();
    }
    this.ctColumnValueList.add(ctColumnValueListItem);
    return this;
  }

   /**
   * Get ctColumnValueList
   * @return ctColumnValueList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomTableColumnValueModel> getCtColumnValueList() {
    return ctColumnValueList;
  }


  public void setCtColumnValueList(List<CustomTableColumnValueModel> ctColumnValueList) {
    
    
    
    this.ctColumnValueList = ctColumnValueList;
  }


  public CustomTableValueModel ctValueId(Integer ctValueId) {
    
    
    
    
    this.ctValueId = ctValueId;
    return this;
  }

   /**
   * Get ctValueId
   * @return ctValueId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCtValueId() {
    return ctValueId;
  }


  public void setCtValueId(Integer ctValueId) {
    
    
    
    this.ctValueId = ctValueId;
  }


  public CustomTableValueModel customTableId(Integer customTableId) {
    
    
    
    
    this.customTableId = customTableId;
    return this;
  }

   /**
   * Get customTableId
   * @return customTableId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomTableId() {
    return customTableId;
  }


  public void setCustomTableId(Integer customTableId) {
    
    
    
    this.customTableId = customTableId;
  }


  public CustomTableValueModel userId(Integer userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    
    
    
    this.userId = userId;
  }


  public CustomTableValueModel userModel(UserViewModel userModel) {
    
    
    
    
    this.userModel = userModel;
    return this;
  }

   /**
   * Get userModel
   * @return userModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserViewModel getUserModel() {
    return userModel;
  }


  public void setUserModel(UserViewModel userModel) {
    
    
    
    this.userModel = userModel;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomTableValueModel instance itself
   */
  public CustomTableValueModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomTableValueModel customTableValueModel = (CustomTableValueModel) o;
    return Objects.equals(this.candidateId, customTableValueModel.candidateId) &&
        Objects.equals(this.cid, customTableValueModel.cid) &&
        Objects.equals(this.createUserId, customTableValueModel.createUserId) &&
        Objects.equals(this.createts, customTableValueModel.createts) &&
        Objects.equals(this.ctColumnValueList, customTableValueModel.ctColumnValueList) &&
        Objects.equals(this.ctValueId, customTableValueModel.ctValueId) &&
        Objects.equals(this.customTableId, customTableValueModel.customTableId) &&
        Objects.equals(this.userId, customTableValueModel.userId) &&
        Objects.equals(this.userModel, customTableValueModel.userModel)&&
        Objects.equals(this.additionalProperties, customTableValueModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateId, cid, createUserId, createts, ctColumnValueList, ctValueId, customTableId, userId, userModel, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomTableValueModel {\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    createUserId: ").append(toIndentedString(createUserId)).append("\n");
    sb.append("    createts: ").append(toIndentedString(createts)).append("\n");
    sb.append("    ctColumnValueList: ").append(toIndentedString(ctColumnValueList)).append("\n");
    sb.append("    ctValueId: ").append(toIndentedString(ctValueId)).append("\n");
    sb.append("    customTableId: ").append(toIndentedString(customTableId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userModel: ").append(toIndentedString(userModel)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidateId");
    openapiFields.add("cid");
    openapiFields.add("createUserId");
    openapiFields.add("createts");
    openapiFields.add("ctColumnValueList");
    openapiFields.add("ctValueId");
    openapiFields.add("customTableId");
    openapiFields.add("userId");
    openapiFields.add("userModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomTableValueModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomTableValueModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomTableValueModel is not found in the empty JSON string", CustomTableValueModel.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `createts`
      if (jsonObj.get("createts") != null && !jsonObj.get("createts").isJsonNull()) {
        Timestamp.validateJsonObject(jsonObj.getAsJsonObject("createts"));
      }
      if (jsonObj.get("ctColumnValueList") != null && !jsonObj.get("ctColumnValueList").isJsonNull()) {
        JsonArray jsonArrayctColumnValueList = jsonObj.getAsJsonArray("ctColumnValueList");
        if (jsonArrayctColumnValueList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ctColumnValueList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ctColumnValueList` to be an array in the JSON string but got `%s`", jsonObj.get("ctColumnValueList").toString()));
          }

          // validate the optional field `ctColumnValueList` (array)
          for (int i = 0; i < jsonArrayctColumnValueList.size(); i++) {
            CustomTableColumnValueModel.validateJsonObject(jsonArrayctColumnValueList.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `userModel`
      if (jsonObj.get("userModel") != null && !jsonObj.get("userModel").isJsonNull()) {
        UserViewModel.validateJsonObject(jsonObj.getAsJsonObject("userModel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomTableValueModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomTableValueModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomTableValueModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomTableValueModel.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomTableValueModel>() {
           @Override
           public void write(JsonWriter out, CustomTableValueModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomTableValueModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomTableValueModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomTableValueModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomTableValueModel
  * @throws IOException if the JSON string is invalid with respect to CustomTableValueModel
  */
  public static CustomTableValueModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomTableValueModel.class);
  }

 /**
  * Convert an instance of CustomTableValueModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

