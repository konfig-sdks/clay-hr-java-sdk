/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner {
  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Float value;

  /**
   * Time period for compensation. HRLY - Hourly, DLY - Daily, WKLY - Weekly, BWKLY - Bi-Weekly, MTHLY - Monthly, BMTH - Bi-Monthly, QTRLY - Quarterly, BYRLY - Bi-Yearly, YRLY - Yearly, ONEF - OneOff
   */
  @JsonAdapter(PeriodEnum.Adapter.class)
 public enum PeriodEnum {
    HRLY("HRLY"),
    
    DLY("DLY"),
    
    WKLY("WKLY"),
    
    BWKLY("BWKLY"),
    
    BMTH("BMTH"),
    
    MTHLY("MTHLY"),
    
    QTRLY("QTRLY"),
    
    BYRLY("BYRLY"),
    
    YRLY("YRLY"),
    
    ONEF("ONEF");

    private String value;

    PeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodEnum fromValue(String value) {
      for (PeriodEnum b : PeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private PeriodEnum period;

  /**
   * Gets or Sets financialType
   */
  @JsonAdapter(FinancialTypeEnum.Adapter.class)
 public enum FinancialTypeEnum {
    COMP("COMP");

    private String value;

    FinancialTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FinancialTypeEnum fromValue(String value) {
      for (FinancialTypeEnum b : FinancialTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FinancialTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FinancialTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FinancialTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FinancialTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FINANCIAL_TYPE = "financialType";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_TYPE)
  private FinancialTypeEnum financialType;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_EFFECTIVEDATE = "effectivedate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVEDATE)
  private String effectivedate;

  /**
   * Type of compensation. sal - Salary, pay - Compensation, INCTV - Incentive, SVCR - Severance
   */
  @JsonAdapter(CompensationTypeEnum.Adapter.class)
 public enum CompensationTypeEnum {
    SAL("sal"),
    
    PAY("pay"),
    
    BONUS("bonus"),
    
    INCTV("INCTV"),
    
    SVRC("SVRC"),
    
    OTHER("other");

    private String value;

    CompensationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompensationTypeEnum fromValue(String value) {
      for (CompensationTypeEnum b : CompensationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompensationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompensationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompensationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompensationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPENSATION_TYPE = "compensationType";
  @SerializedName(SERIALIZED_NAME_COMPENSATION_TYPE)
  private CompensationTypeEnum compensationType;

  /**
   * Status of compensation. ACTV - Active, ARCHV - Archive, PVNL - Provisional
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTV("ACTV"),
    
    ARCHV("ARCHV"),
    
    PVNL("PVNL");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CHANGE_TYPE_ID = "changeTypeId";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE_ID)
  private Integer changeTypeId;

  public static final String SERIALIZED_NAME_CHANGE_TYPE_CODE = "changeTypeCode";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE_CODE)
  private String changeTypeCode;

  public static final String SERIALIZED_NAME_EXT_APP_U_I_D = "extAppUID";
  @SerializedName(SERIALIZED_NAME_EXT_APP_U_I_D)
  private String extAppUID;

  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner() {
  }

  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner value(Float value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getValue() {
    return value;
  }


  public void setValue(Float value) {
    
    
    
    this.value = value;
  }


  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner period(PeriodEnum period) {
    
    
    
    
    this.period = period;
    return this;
  }

   /**
   * Time period for compensation. HRLY - Hourly, DLY - Daily, WKLY - Weekly, BWKLY - Bi-Weekly, MTHLY - Monthly, BMTH - Bi-Monthly, QTRLY - Quarterly, BYRLY - Bi-Yearly, YRLY - Yearly, ONEF - OneOff
   * @return period
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time period for compensation. HRLY - Hourly, DLY - Daily, WKLY - Weekly, BWKLY - Bi-Weekly, MTHLY - Monthly, BMTH - Bi-Monthly, QTRLY - Quarterly, BYRLY - Bi-Yearly, YRLY - Yearly, ONEF - OneOff")

  public PeriodEnum getPeriod() {
    return period;
  }


  public void setPeriod(PeriodEnum period) {
    
    
    
    this.period = period;
  }


  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner financialType(FinancialTypeEnum financialType) {
    
    
    
    
    this.financialType = financialType;
    return this;
  }

   /**
   * Get financialType
   * @return financialType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FinancialTypeEnum getFinancialType() {
    return financialType;
  }


  public void setFinancialType(FinancialTypeEnum financialType) {
    
    
    
    this.financialType = financialType;
  }


  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner currencyCode(String currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner effectivedate(String effectivedate) {
    
    
    
    
    this.effectivedate = effectivedate;
    return this;
  }

   /**
   * Get effectivedate
   * @return effectivedate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEffectivedate() {
    return effectivedate;
  }


  public void setEffectivedate(String effectivedate) {
    
    
    
    this.effectivedate = effectivedate;
  }


  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner compensationType(CompensationTypeEnum compensationType) {
    
    
    
    
    this.compensationType = compensationType;
    return this;
  }

   /**
   * Type of compensation. sal - Salary, pay - Compensation, INCTV - Incentive, SVCR - Severance
   * @return compensationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of compensation. sal - Salary, pay - Compensation, INCTV - Incentive, SVCR - Severance")

  public CompensationTypeEnum getCompensationType() {
    return compensationType;
  }


  public void setCompensationType(CompensationTypeEnum compensationType) {
    
    
    
    this.compensationType = compensationType;
  }


  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of compensation. ACTV - Active, ARCHV - Archive, PVNL - Provisional
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of compensation. ACTV - Active, ARCHV - Archive, PVNL - Provisional")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner changeTypeId(Integer changeTypeId) {
    
    
    
    
    this.changeTypeId = changeTypeId;
    return this;
  }

   /**
   * Get changeTypeId
   * @return changeTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getChangeTypeId() {
    return changeTypeId;
  }


  public void setChangeTypeId(Integer changeTypeId) {
    
    
    
    this.changeTypeId = changeTypeId;
  }


  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner changeTypeCode(String changeTypeCode) {
    
    
    
    
    this.changeTypeCode = changeTypeCode;
    return this;
  }

   /**
   * Get changeTypeCode
   * @return changeTypeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getChangeTypeCode() {
    return changeTypeCode;
  }


  public void setChangeTypeCode(String changeTypeCode) {
    
    
    
    this.changeTypeCode = changeTypeCode;
  }


  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner extAppUID(String extAppUID) {
    
    
    
    
    this.extAppUID = extAppUID;
    return this;
  }

   /**
   * Get extAppUID
   * @return extAppUID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExtAppUID() {
    return extAppUID;
  }


  public void setExtAppUID(String extAppUID) {
    
    
    
    this.extAppUID = extAppUID;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner instance itself
   */
  public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner = (PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner) o;
    return Objects.equals(this.value, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.value) &&
        Objects.equals(this.period, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.period) &&
        Objects.equals(this.financialType, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.financialType) &&
        Objects.equals(this.currencyCode, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.currencyCode) &&
        Objects.equals(this.effectivedate, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.effectivedate) &&
        Objects.equals(this.compensationType, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.compensationType) &&
        Objects.equals(this.status, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.status) &&
        Objects.equals(this.changeTypeId, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.changeTypeId) &&
        Objects.equals(this.changeTypeCode, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.changeTypeCode) &&
        Objects.equals(this.extAppUID, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.extAppUID)&&
        Objects.equals(this.additionalProperties, peopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, period, financialType, currencyCode, effectivedate, compensationType, status, changeTypeId, changeTypeCode, extAppUID, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    financialType: ").append(toIndentedString(financialType)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    effectivedate: ").append(toIndentedString(effectivedate)).append("\n");
    sb.append("    compensationType: ").append(toIndentedString(compensationType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    changeTypeId: ").append(toIndentedString(changeTypeId)).append("\n");
    sb.append("    changeTypeCode: ").append(toIndentedString(changeTypeCode)).append("\n");
    sb.append("    extAppUID: ").append(toIndentedString(extAppUID)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("value");
    openapiFields.add("period");
    openapiFields.add("financialType");
    openapiFields.add("currencyCode");
    openapiFields.add("effectivedate");
    openapiFields.add("compensationType");
    openapiFields.add("status");
    openapiFields.add("changeTypeId");
    openapiFields.add("changeTypeCode");
    openapiFields.add("extAppUID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner is not found in the empty JSON string", PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if ((jsonObj.get("financialType") != null && !jsonObj.get("financialType").isJsonNull()) && !jsonObj.get("financialType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `financialType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("financialType").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("effectivedate") != null && !jsonObj.get("effectivedate").isJsonNull()) && !jsonObj.get("effectivedate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectivedate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectivedate").toString()));
      }
      if ((jsonObj.get("compensationType") != null && !jsonObj.get("compensationType").isJsonNull()) && !jsonObj.get("compensationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compensationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compensationType").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("changeTypeCode") != null && !jsonObj.get("changeTypeCode").isJsonNull()) && !jsonObj.get("changeTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeTypeCode").toString()));
      }
      if ((jsonObj.get("extAppUID") != null && !jsonObj.get("extAppUID").isJsonNull()) && !jsonObj.get("extAppUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extAppUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extAppUID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner>() {
           @Override
           public void write(JsonWriter out, PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner
  * @throws IOException if the JSON string is invalid with respect to PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner
  */
  public static PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner.class);
  }

 /**
  * Convert an instance of PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

