/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner {
  public static final String SERIALIZED_NAME_EMPLOYER_NAME = "employerName";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_NAME)
  private String employerName;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY_ID = "countryId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private String countryId;

  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner() {
  }

  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner employerName(String employerName) {
    
    
    
    
    this.employerName = employerName;
    return this;
  }

   /**
   * Name of the employer.
   * @return employerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the employer.")

  public String getEmployerName() {
    return employerName;
  }


  public void setEmployerName(String employerName) {
    
    
    
    this.employerName = employerName;
  }


  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner position(String position) {
    
    
    
    
    this.position = position;
    return this;
  }

   /**
   * Position of the employer.
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Position of the employer.")

  public String getPosition() {
    return position;
  }


  public void setPosition(String position) {
    
    
    
    this.position = position;
  }


  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner department(String department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Department of the employer.
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Department of the employer.")

  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    
    
    
    this.department = department;
  }


  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * State of the employer.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State of the employer.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start Date of the employment.
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Start Date of the employment.")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End Date of the employment.
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "End Date of the employment.")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City of the employer.
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City of the employer.")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner countryId(String countryId) {
    
    
    
    
    this.countryId = countryId;
    return this;
  }

   /**
   * Country Idenifier (should be a number id).
   * @return countryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Country Idenifier (should be a number id).")

  public String getCountryId() {
    return countryId;
  }


  public void setCountryId(String countryId) {
    
    
    
    this.countryId = countryId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner instance itself
   */
  public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner = (PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner) o;
    return Objects.equals(this.employerName, peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.employerName) &&
        Objects.equals(this.position, peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.position) &&
        Objects.equals(this.department, peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.department) &&
        Objects.equals(this.state, peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.state) &&
        Objects.equals(this.startDate, peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.startDate) &&
        Objects.equals(this.endDate, peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.endDate) &&
        Objects.equals(this.city, peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.city) &&
        Objects.equals(this.countryId, peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.countryId)&&
        Objects.equals(this.additionalProperties, peopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employerName, position, department, state, startDate, endDate, city, countryId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner {\n");
    sb.append("    employerName: ").append(toIndentedString(employerName)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employerName");
    openapiFields.add("position");
    openapiFields.add("department");
    openapiFields.add("state");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("city");
    openapiFields.add("countryId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner is not found in the empty JSON string", PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("employerName") != null && !jsonObj.get("employerName").isJsonNull()) && !jsonObj.get("employerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employerName").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("countryId") != null && !jsonObj.get("countryId").isJsonNull()) && !jsonObj.get("countryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner>() {
           @Override
           public void write(JsonWriter out, PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner
  * @throws IOException if the JSON string is invalid with respect to PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner
  */
  public static PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner.class);
  }

 /**
  * Convert an instance of PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

