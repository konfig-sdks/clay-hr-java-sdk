/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomFieldStyleModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.sql.Timestamp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CustomTableColumnModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomTableColumnModel {
  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_COLUMN_CODE = "columnCode";
  @SerializedName(SERIALIZED_NAME_COLUMN_CODE)
  private String columnCode;

  public static final String SERIALIZED_NAME_COLUMN_HEADER = "columnHeader";
  @SerializedName(SERIALIZED_NAME_COLUMN_HEADER)
  private String columnHeader;

  public static final String SERIALIZED_NAME_COLUMN_TYPE = "columnType";
  @SerializedName(SERIALIZED_NAME_COLUMN_TYPE)
  private String columnType;

  public static final String SERIALIZED_NAME_CREATETS = "createts";
  @SerializedName(SERIALIZED_NAME_CREATETS)
  private Timestamp createts;

  public static final String SERIALIZED_NAME_CT_COLUMN_ID = "ctColumnId";
  @SerializedName(SERIALIZED_NAME_CT_COLUMN_ID)
  private Integer ctColumnId;

  public static final String SERIALIZED_NAME_CUSTOM_FIELD_STYLE_MODEL = "customFieldStyleModel";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD_STYLE_MODEL)
  private CustomFieldStyleModel customFieldStyleModel;

  public static final String SERIALIZED_NAME_CUSTOM_TABLE_ID = "customTableId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TABLE_ID)
  private Integer customTableId;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "fieldType";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private String fieldType;

  public static final String SERIALIZED_NAME_HELP_TEXT = "helpText";
  @SerializedName(SERIALIZED_NAME_HELP_TEXT)
  private String helpText;

  public static final String SERIALIZED_NAME_MANDATORY = "mandatory";
  @SerializedName(SERIALIZED_NAME_MANDATORY)
  private Integer mandatory;

  public static final String SERIALIZED_NAME_MASKED = "masked";
  @SerializedName(SERIALIZED_NAME_MASKED)
  private Integer masked;

  public static final String SERIALIZED_NAME_OPTION_VALUES = "optionValues";
  @SerializedName(SERIALIZED_NAME_OPTION_VALUES)
  private String optionValues;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private String style;

  public CustomTableColumnModel() {
  }

  public CustomTableColumnModel cid(Integer cid) {
    
    
    
    
    this.cid = cid;
    return this;
  }

   /**
   * Get cid
   * @return cid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCid() {
    return cid;
  }


  public void setCid(Integer cid) {
    
    
    
    this.cid = cid;
  }


  public CustomTableColumnModel columnCode(String columnCode) {
    
    
    
    
    this.columnCode = columnCode;
    return this;
  }

   /**
   * Get columnCode
   * @return columnCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColumnCode() {
    return columnCode;
  }


  public void setColumnCode(String columnCode) {
    
    
    
    this.columnCode = columnCode;
  }


  public CustomTableColumnModel columnHeader(String columnHeader) {
    
    
    
    
    this.columnHeader = columnHeader;
    return this;
  }

   /**
   * Get columnHeader
   * @return columnHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColumnHeader() {
    return columnHeader;
  }


  public void setColumnHeader(String columnHeader) {
    
    
    
    this.columnHeader = columnHeader;
  }


  public CustomTableColumnModel columnType(String columnType) {
    
    
    
    
    this.columnType = columnType;
    return this;
  }

   /**
   * Get columnType
   * @return columnType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColumnType() {
    return columnType;
  }


  public void setColumnType(String columnType) {
    
    
    
    this.columnType = columnType;
  }


  public CustomTableColumnModel createts(Timestamp createts) {
    
    
    
    
    this.createts = createts;
    return this;
  }

   /**
   * Get createts
   * @return createts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Timestamp getCreatets() {
    return createts;
  }


  public void setCreatets(Timestamp createts) {
    
    
    
    this.createts = createts;
  }


  public CustomTableColumnModel ctColumnId(Integer ctColumnId) {
    
    
    
    
    this.ctColumnId = ctColumnId;
    return this;
  }

   /**
   * Get ctColumnId
   * @return ctColumnId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCtColumnId() {
    return ctColumnId;
  }


  public void setCtColumnId(Integer ctColumnId) {
    
    
    
    this.ctColumnId = ctColumnId;
  }


  public CustomTableColumnModel customFieldStyleModel(CustomFieldStyleModel customFieldStyleModel) {
    
    
    
    
    this.customFieldStyleModel = customFieldStyleModel;
    return this;
  }

   /**
   * Get customFieldStyleModel
   * @return customFieldStyleModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomFieldStyleModel getCustomFieldStyleModel() {
    return customFieldStyleModel;
  }


  public void setCustomFieldStyleModel(CustomFieldStyleModel customFieldStyleModel) {
    
    
    
    this.customFieldStyleModel = customFieldStyleModel;
  }


  public CustomTableColumnModel customTableId(Integer customTableId) {
    
    
    
    
    this.customTableId = customTableId;
    return this;
  }

   /**
   * Get customTableId
   * @return customTableId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomTableId() {
    return customTableId;
  }


  public void setCustomTableId(Integer customTableId) {
    
    
    
    this.customTableId = customTableId;
  }


  public CustomTableColumnModel fieldType(String fieldType) {
    
    
    
    
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Get fieldType
   * @return fieldType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldType() {
    return fieldType;
  }


  public void setFieldType(String fieldType) {
    
    
    
    this.fieldType = fieldType;
  }


  public CustomTableColumnModel helpText(String helpText) {
    
    
    
    
    this.helpText = helpText;
    return this;
  }

   /**
   * Get helpText
   * @return helpText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHelpText() {
    return helpText;
  }


  public void setHelpText(String helpText) {
    
    
    
    this.helpText = helpText;
  }


  public CustomTableColumnModel mandatory(Integer mandatory) {
    
    
    
    
    this.mandatory = mandatory;
    return this;
  }

   /**
   * Get mandatory
   * @return mandatory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMandatory() {
    return mandatory;
  }


  public void setMandatory(Integer mandatory) {
    
    
    
    this.mandatory = mandatory;
  }


  public CustomTableColumnModel masked(Integer masked) {
    
    
    
    
    this.masked = masked;
    return this;
  }

   /**
   * Get masked
   * @return masked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMasked() {
    return masked;
  }


  public void setMasked(Integer masked) {
    
    
    
    this.masked = masked;
  }


  public CustomTableColumnModel optionValues(String optionValues) {
    
    
    
    
    this.optionValues = optionValues;
    return this;
  }

   /**
   * Get optionValues
   * @return optionValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOptionValues() {
    return optionValues;
  }


  public void setOptionValues(String optionValues) {
    
    
    
    this.optionValues = optionValues;
  }


  public CustomTableColumnModel sequence(Integer sequence) {
    
    
    
    
    this.sequence = sequence;
    return this;
  }

   /**
   * Get sequence
   * @return sequence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSequence() {
    return sequence;
  }


  public void setSequence(Integer sequence) {
    
    
    
    this.sequence = sequence;
  }


  public CustomTableColumnModel style(String style) {
    
    
    
    
    this.style = style;
    return this;
  }

   /**
   * Get style
   * @return style
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStyle() {
    return style;
  }


  public void setStyle(String style) {
    
    
    
    this.style = style;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomTableColumnModel instance itself
   */
  public CustomTableColumnModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomTableColumnModel customTableColumnModel = (CustomTableColumnModel) o;
    return Objects.equals(this.cid, customTableColumnModel.cid) &&
        Objects.equals(this.columnCode, customTableColumnModel.columnCode) &&
        Objects.equals(this.columnHeader, customTableColumnModel.columnHeader) &&
        Objects.equals(this.columnType, customTableColumnModel.columnType) &&
        Objects.equals(this.createts, customTableColumnModel.createts) &&
        Objects.equals(this.ctColumnId, customTableColumnModel.ctColumnId) &&
        Objects.equals(this.customFieldStyleModel, customTableColumnModel.customFieldStyleModel) &&
        Objects.equals(this.customTableId, customTableColumnModel.customTableId) &&
        Objects.equals(this.fieldType, customTableColumnModel.fieldType) &&
        Objects.equals(this.helpText, customTableColumnModel.helpText) &&
        Objects.equals(this.mandatory, customTableColumnModel.mandatory) &&
        Objects.equals(this.masked, customTableColumnModel.masked) &&
        Objects.equals(this.optionValues, customTableColumnModel.optionValues) &&
        Objects.equals(this.sequence, customTableColumnModel.sequence) &&
        Objects.equals(this.style, customTableColumnModel.style)&&
        Objects.equals(this.additionalProperties, customTableColumnModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cid, columnCode, columnHeader, columnType, createts, ctColumnId, customFieldStyleModel, customTableId, fieldType, helpText, mandatory, masked, optionValues, sequence, style, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomTableColumnModel {\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    columnCode: ").append(toIndentedString(columnCode)).append("\n");
    sb.append("    columnHeader: ").append(toIndentedString(columnHeader)).append("\n");
    sb.append("    columnType: ").append(toIndentedString(columnType)).append("\n");
    sb.append("    createts: ").append(toIndentedString(createts)).append("\n");
    sb.append("    ctColumnId: ").append(toIndentedString(ctColumnId)).append("\n");
    sb.append("    customFieldStyleModel: ").append(toIndentedString(customFieldStyleModel)).append("\n");
    sb.append("    customTableId: ").append(toIndentedString(customTableId)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("    mandatory: ").append(toIndentedString(mandatory)).append("\n");
    sb.append("    masked: ").append(toIndentedString(masked)).append("\n");
    sb.append("    optionValues: ").append(toIndentedString(optionValues)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cid");
    openapiFields.add("columnCode");
    openapiFields.add("columnHeader");
    openapiFields.add("columnType");
    openapiFields.add("createts");
    openapiFields.add("ctColumnId");
    openapiFields.add("customFieldStyleModel");
    openapiFields.add("customTableId");
    openapiFields.add("fieldType");
    openapiFields.add("helpText");
    openapiFields.add("mandatory");
    openapiFields.add("masked");
    openapiFields.add("optionValues");
    openapiFields.add("sequence");
    openapiFields.add("style");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomTableColumnModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomTableColumnModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomTableColumnModel is not found in the empty JSON string", CustomTableColumnModel.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("columnCode") != null && !jsonObj.get("columnCode").isJsonNull()) && !jsonObj.get("columnCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnCode").toString()));
      }
      if ((jsonObj.get("columnHeader") != null && !jsonObj.get("columnHeader").isJsonNull()) && !jsonObj.get("columnHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnHeader").toString()));
      }
      if ((jsonObj.get("columnType") != null && !jsonObj.get("columnType").isJsonNull()) && !jsonObj.get("columnType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnType").toString()));
      }
      // validate the optional field `createts`
      if (jsonObj.get("createts") != null && !jsonObj.get("createts").isJsonNull()) {
        Timestamp.validateJsonObject(jsonObj.getAsJsonObject("createts"));
      }
      // validate the optional field `customFieldStyleModel`
      if (jsonObj.get("customFieldStyleModel") != null && !jsonObj.get("customFieldStyleModel").isJsonNull()) {
        CustomFieldStyleModel.validateJsonObject(jsonObj.getAsJsonObject("customFieldStyleModel"));
      }
      if ((jsonObj.get("fieldType") != null && !jsonObj.get("fieldType").isJsonNull()) && !jsonObj.get("fieldType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldType").toString()));
      }
      if ((jsonObj.get("helpText") != null && !jsonObj.get("helpText").isJsonNull()) && !jsonObj.get("helpText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpText").toString()));
      }
      if ((jsonObj.get("optionValues") != null && !jsonObj.get("optionValues").isJsonNull()) && !jsonObj.get("optionValues").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionValues` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionValues").toString()));
      }
      if ((jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) && !jsonObj.get("style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("style").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomTableColumnModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomTableColumnModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomTableColumnModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomTableColumnModel.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomTableColumnModel>() {
           @Override
           public void write(JsonWriter out, CustomTableColumnModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomTableColumnModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomTableColumnModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomTableColumnModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomTableColumnModel
  * @throws IOException if the JSON string is invalid with respect to CustomTableColumnModel
  */
  public static CustomTableColumnModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomTableColumnModel.class);
  }

 /**
  * Convert an instance of CustomTableColumnModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

