/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CandidatesGetBasicDetailsResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CandidatesGetBasicDetailsResponseDataInner {
  public static final String SERIALIZED_NAME_RECRUIT_ID = "recruitId";
  @SerializedName(SERIALIZED_NAME_RECRUIT_ID)
  private String recruitId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private String dateOfBirth;

  public static final String SERIALIZED_NAME_STATUSID = "statusid";
  @SerializedName(SERIALIZED_NAME_STATUSID)
  private String statusid;

  public static final String SERIALIZED_NAME_REFERRER_ID = "referrerId";
  @SerializedName(SERIALIZED_NAME_REFERRER_ID)
  private String referrerId;

  public static final String SERIALIZED_NAME_CREATETS = "createts";
  @SerializedName(SERIALIZED_NAME_CREATETS)
  private String createts;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private String userid;

  public static final String SERIALIZED_NAME_RECRUITER_USER_ID = "recruiterUserId";
  @SerializedName(SERIALIZED_NAME_RECRUITER_USER_ID)
  private String recruiterUserId;

  public static final String SERIALIZED_NAME_SUMMARY_BY_CANDIDATE = "summaryByCandidate";
  @SerializedName(SERIALIZED_NAME_SUMMARY_BY_CANDIDATE)
  private String summaryByCandidate;

  public static final String SERIALIZED_NAME_CANDIDATE_LOCK = "candidateLock";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_LOCK)
  private String candidateLock;

  public static final String SERIALIZED_NAME_EDUCATION_STR = "educationStr";
  @SerializedName(SERIALIZED_NAME_EDUCATION_STR)
  private String educationStr;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_APPLIED_POSITIONS = "appliedPositions";
  @SerializedName(SERIALIZED_NAME_APPLIED_POSITIONS)
  private String appliedPositions;

  public static final String SERIALIZED_NAME_UPDATED_ON = "updatedOn";
  @SerializedName(SERIALIZED_NAME_UPDATED_ON)
  private String updatedOn;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private String cid;

  public static final String SERIALIZED_NAME_TAG_IDS = "tagIds";
  @SerializedName(SERIALIZED_NAME_TAG_IDS)
  private String tagIds;

  public static final String SERIALIZED_NAME_STATUS_COLOR = "statusColor";
  @SerializedName(SERIALIZED_NAME_STATUS_COLOR)
  private String statusColor;

  public static final String SERIALIZED_NAME_APPLIED_POSITION_IDS = "appliedPositionIds";
  @SerializedName(SERIALIZED_NAME_APPLIED_POSITION_IDS)
  private String appliedPositionIds;

  public static final String SERIALIZED_NAME_APPLIED_POSITION_UIDS = "appliedPositionUids";
  @SerializedName(SERIALIZED_NAME_APPLIED_POSITION_UIDS)
  private String appliedPositionUids;

  public static final String SERIALIZED_NAME_RECRUITER_THUMBNAIL = "recruiterThumbnail";
  @SerializedName(SERIALIZED_NAME_RECRUITER_THUMBNAIL)
  private String recruiterThumbnail;

  public static final String SERIALIZED_NAME_RECRUITER_NAME = "recruiterName";
  @SerializedName(SERIALIZED_NAME_RECRUITER_NAME)
  private String recruiterName;

  public static final String SERIALIZED_NAME_RECRUITER_GENDER = "recruiterGender";
  @SerializedName(SERIALIZED_NAME_RECRUITER_GENDER)
  private String recruiterGender;

  public static final String SERIALIZED_NAME_REFERRER_NAME = "referrerName";
  @SerializedName(SERIALIZED_NAME_REFERRER_NAME)
  private String referrerName;

  public static final String SERIALIZED_NAME_IS_INTERNAL_CAND = "isInternalCand";
  @SerializedName(SERIALIZED_NAME_IS_INTERNAL_CAND)
  private String isInternalCand;

  public static final String SERIALIZED_NAME_APPLICATION_STATUS = "applicationStatus";
  @SerializedName(SERIALIZED_NAME_APPLICATION_STATUS)
  private String applicationStatus;

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private String verified;

  public static final String SERIALIZED_NAME_POSITION_NAME_LIST = "positionNameList";
  @SerializedName(SERIALIZED_NAME_POSITION_NAME_LIST)
  private String positionNameList;

  public static final String SERIALIZED_NAME_INTERNAL_CANDIDATE = "internalCandidate";
  @SerializedName(SERIALIZED_NAME_INTERNAL_CANDIDATE)
  private String internalCandidate;

  public CandidatesGetBasicDetailsResponseDataInner() {
  }

  public CandidatesGetBasicDetailsResponseDataInner recruitId(String recruitId) {
    
    
    
    
    this.recruitId = recruitId;
    return this;
  }

   /**
   * Get recruitId
   * @return recruitId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getRecruitId() {
    return recruitId;
  }


  public void setRecruitId(String recruitId) {
    
    
    
    this.recruitId = recruitId;
  }


  public CandidatesGetBasicDetailsResponseDataInner name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CandidatesGetBasicDetailsResponseDataInner email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public CandidatesGetBasicDetailsResponseDataInner phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public CandidatesGetBasicDetailsResponseDataInner dateOfBirth(String dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(String dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public CandidatesGetBasicDetailsResponseDataInner statusid(String statusid) {
    
    
    
    
    this.statusid = statusid;
    return this;
  }

   /**
   * Get statusid
   * @return statusid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getStatusid() {
    return statusid;
  }


  public void setStatusid(String statusid) {
    
    
    
    this.statusid = statusid;
  }


  public CandidatesGetBasicDetailsResponseDataInner referrerId(String referrerId) {
    
    
    
    
    this.referrerId = referrerId;
    return this;
  }

   /**
   * Get referrerId
   * @return referrerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getReferrerId() {
    return referrerId;
  }


  public void setReferrerId(String referrerId) {
    
    
    
    this.referrerId = referrerId;
  }


  public CandidatesGetBasicDetailsResponseDataInner createts(String createts) {
    
    
    
    
    this.createts = createts;
    return this;
  }

   /**
   * Get createts
   * @return createts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getCreatets() {
    return createts;
  }


  public void setCreatets(String createts) {
    
    
    
    this.createts = createts;
  }


  public CandidatesGetBasicDetailsResponseDataInner notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public CandidatesGetBasicDetailsResponseDataInner source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "API", value = "")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }


  public CandidatesGetBasicDetailsResponseDataInner userid(String userid) {
    
    
    
    
    this.userid = userid;
    return this;
  }

   /**
   * Get userid
   * @return userid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getUserid() {
    return userid;
  }


  public void setUserid(String userid) {
    
    
    
    this.userid = userid;
  }


  public CandidatesGetBasicDetailsResponseDataInner recruiterUserId(String recruiterUserId) {
    
    
    
    
    this.recruiterUserId = recruiterUserId;
    return this;
  }

   /**
   * Get recruiterUserId
   * @return recruiterUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getRecruiterUserId() {
    return recruiterUserId;
  }


  public void setRecruiterUserId(String recruiterUserId) {
    
    
    
    this.recruiterUserId = recruiterUserId;
  }


  public CandidatesGetBasicDetailsResponseDataInner summaryByCandidate(String summaryByCandidate) {
    
    
    
    
    this.summaryByCandidate = summaryByCandidate;
    return this;
  }

   /**
   * Get summaryByCandidate
   * @return summaryByCandidate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getSummaryByCandidate() {
    return summaryByCandidate;
  }


  public void setSummaryByCandidate(String summaryByCandidate) {
    
    
    
    this.summaryByCandidate = summaryByCandidate;
  }


  public CandidatesGetBasicDetailsResponseDataInner candidateLock(String candidateLock) {
    
    
    
    
    this.candidateLock = candidateLock;
    return this;
  }

   /**
   * Get candidateLock
   * @return candidateLock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getCandidateLock() {
    return candidateLock;
  }


  public void setCandidateLock(String candidateLock) {
    
    
    
    this.candidateLock = candidateLock;
  }


  public CandidatesGetBasicDetailsResponseDataInner educationStr(String educationStr) {
    
    
    
    
    this.educationStr = educationStr;
    return this;
  }

   /**
   * Get educationStr
   * @return educationStr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getEducationStr() {
    return educationStr;
  }


  public void setEducationStr(String educationStr) {
    
    
    
    this.educationStr = educationStr;
  }


  public CandidatesGetBasicDetailsResponseDataInner status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public CandidatesGetBasicDetailsResponseDataInner appliedPositions(String appliedPositions) {
    
    
    
    
    this.appliedPositions = appliedPositions;
    return this;
  }

   /**
   * Get appliedPositions
   * @return appliedPositions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getAppliedPositions() {
    return appliedPositions;
  }


  public void setAppliedPositions(String appliedPositions) {
    
    
    
    this.appliedPositions = appliedPositions;
  }


  public CandidatesGetBasicDetailsResponseDataInner updatedOn(String updatedOn) {
    
    
    
    
    this.updatedOn = updatedOn;
    return this;
  }

   /**
   * Get updatedOn
   * @return updatedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getUpdatedOn() {
    return updatedOn;
  }


  public void setUpdatedOn(String updatedOn) {
    
    
    
    this.updatedOn = updatedOn;
  }


  public CandidatesGetBasicDetailsResponseDataInner cid(String cid) {
    
    
    
    
    this.cid = cid;
    return this;
  }

   /**
   * Get cid
   * @return cid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getCid() {
    return cid;
  }


  public void setCid(String cid) {
    
    
    
    this.cid = cid;
  }


  public CandidatesGetBasicDetailsResponseDataInner tagIds(String tagIds) {
    
    
    
    
    this.tagIds = tagIds;
    return this;
  }

   /**
   * Get tagIds
   * @return tagIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getTagIds() {
    return tagIds;
  }


  public void setTagIds(String tagIds) {
    
    
    
    this.tagIds = tagIds;
  }


  public CandidatesGetBasicDetailsResponseDataInner statusColor(String statusColor) {
    
    
    
    
    this.statusColor = statusColor;
    return this;
  }

   /**
   * Get statusColor
   * @return statusColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getStatusColor() {
    return statusColor;
  }


  public void setStatusColor(String statusColor) {
    
    
    
    this.statusColor = statusColor;
  }


  public CandidatesGetBasicDetailsResponseDataInner appliedPositionIds(String appliedPositionIds) {
    
    
    
    
    this.appliedPositionIds = appliedPositionIds;
    return this;
  }

   /**
   * Get appliedPositionIds
   * @return appliedPositionIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getAppliedPositionIds() {
    return appliedPositionIds;
  }


  public void setAppliedPositionIds(String appliedPositionIds) {
    
    
    
    this.appliedPositionIds = appliedPositionIds;
  }


  public CandidatesGetBasicDetailsResponseDataInner appliedPositionUids(String appliedPositionUids) {
    
    
    
    
    this.appliedPositionUids = appliedPositionUids;
    return this;
  }

   /**
   * Get appliedPositionUids
   * @return appliedPositionUids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getAppliedPositionUids() {
    return appliedPositionUids;
  }


  public void setAppliedPositionUids(String appliedPositionUids) {
    
    
    
    this.appliedPositionUids = appliedPositionUids;
  }


  public CandidatesGetBasicDetailsResponseDataInner recruiterThumbnail(String recruiterThumbnail) {
    
    
    
    
    this.recruiterThumbnail = recruiterThumbnail;
    return this;
  }

   /**
   * Get recruiterThumbnail
   * @return recruiterThumbnail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getRecruiterThumbnail() {
    return recruiterThumbnail;
  }


  public void setRecruiterThumbnail(String recruiterThumbnail) {
    
    
    
    this.recruiterThumbnail = recruiterThumbnail;
  }


  public CandidatesGetBasicDetailsResponseDataInner recruiterName(String recruiterName) {
    
    
    
    
    this.recruiterName = recruiterName;
    return this;
  }

   /**
   * Get recruiterName
   * @return recruiterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getRecruiterName() {
    return recruiterName;
  }


  public void setRecruiterName(String recruiterName) {
    
    
    
    this.recruiterName = recruiterName;
  }


  public CandidatesGetBasicDetailsResponseDataInner recruiterGender(String recruiterGender) {
    
    
    
    
    this.recruiterGender = recruiterGender;
    return this;
  }

   /**
   * Get recruiterGender
   * @return recruiterGender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getRecruiterGender() {
    return recruiterGender;
  }


  public void setRecruiterGender(String recruiterGender) {
    
    
    
    this.recruiterGender = recruiterGender;
  }


  public CandidatesGetBasicDetailsResponseDataInner referrerName(String referrerName) {
    
    
    
    
    this.referrerName = referrerName;
    return this;
  }

   /**
   * Get referrerName
   * @return referrerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getReferrerName() {
    return referrerName;
  }


  public void setReferrerName(String referrerName) {
    
    
    
    this.referrerName = referrerName;
  }


  public CandidatesGetBasicDetailsResponseDataInner isInternalCand(String isInternalCand) {
    
    
    
    
    this.isInternalCand = isInternalCand;
    return this;
  }

   /**
   * Get isInternalCand
   * @return isInternalCand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getIsInternalCand() {
    return isInternalCand;
  }


  public void setIsInternalCand(String isInternalCand) {
    
    
    
    this.isInternalCand = isInternalCand;
  }


  public CandidatesGetBasicDetailsResponseDataInner applicationStatus(String applicationStatus) {
    
    
    
    
    this.applicationStatus = applicationStatus;
    return this;
  }

   /**
   * Get applicationStatus
   * @return applicationStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getApplicationStatus() {
    return applicationStatus;
  }


  public void setApplicationStatus(String applicationStatus) {
    
    
    
    this.applicationStatus = applicationStatus;
  }


  public CandidatesGetBasicDetailsResponseDataInner verified(String verified) {
    
    
    
    
    this.verified = verified;
    return this;
  }

   /**
   * Get verified
   * @return verified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getVerified() {
    return verified;
  }


  public void setVerified(String verified) {
    
    
    
    this.verified = verified;
  }


  public CandidatesGetBasicDetailsResponseDataInner positionNameList(String positionNameList) {
    
    
    
    
    this.positionNameList = positionNameList;
    return this;
  }

   /**
   * Get positionNameList
   * @return positionNameList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getPositionNameList() {
    return positionNameList;
  }


  public void setPositionNameList(String positionNameList) {
    
    
    
    this.positionNameList = positionNameList;
  }


  public CandidatesGetBasicDetailsResponseDataInner internalCandidate(String internalCandidate) {
    
    
    
    
    this.internalCandidate = internalCandidate;
    return this;
  }

   /**
   * Get internalCandidate
   * @return internalCandidate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getInternalCandidate() {
    return internalCandidate;
  }


  public void setInternalCandidate(String internalCandidate) {
    
    
    
    this.internalCandidate = internalCandidate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CandidatesGetBasicDetailsResponseDataInner instance itself
   */
  public CandidatesGetBasicDetailsResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CandidatesGetBasicDetailsResponseDataInner candidatesGetBasicDetailsResponseDataInner = (CandidatesGetBasicDetailsResponseDataInner) o;
    return Objects.equals(this.recruitId, candidatesGetBasicDetailsResponseDataInner.recruitId) &&
        Objects.equals(this.name, candidatesGetBasicDetailsResponseDataInner.name) &&
        Objects.equals(this.email, candidatesGetBasicDetailsResponseDataInner.email) &&
        Objects.equals(this.phone, candidatesGetBasicDetailsResponseDataInner.phone) &&
        Objects.equals(this.dateOfBirth, candidatesGetBasicDetailsResponseDataInner.dateOfBirth) &&
        Objects.equals(this.statusid, candidatesGetBasicDetailsResponseDataInner.statusid) &&
        Objects.equals(this.referrerId, candidatesGetBasicDetailsResponseDataInner.referrerId) &&
        Objects.equals(this.createts, candidatesGetBasicDetailsResponseDataInner.createts) &&
        Objects.equals(this.notes, candidatesGetBasicDetailsResponseDataInner.notes) &&
        Objects.equals(this.source, candidatesGetBasicDetailsResponseDataInner.source) &&
        Objects.equals(this.userid, candidatesGetBasicDetailsResponseDataInner.userid) &&
        Objects.equals(this.recruiterUserId, candidatesGetBasicDetailsResponseDataInner.recruiterUserId) &&
        Objects.equals(this.summaryByCandidate, candidatesGetBasicDetailsResponseDataInner.summaryByCandidate) &&
        Objects.equals(this.candidateLock, candidatesGetBasicDetailsResponseDataInner.candidateLock) &&
        Objects.equals(this.educationStr, candidatesGetBasicDetailsResponseDataInner.educationStr) &&
        Objects.equals(this.status, candidatesGetBasicDetailsResponseDataInner.status) &&
        Objects.equals(this.appliedPositions, candidatesGetBasicDetailsResponseDataInner.appliedPositions) &&
        Objects.equals(this.updatedOn, candidatesGetBasicDetailsResponseDataInner.updatedOn) &&
        Objects.equals(this.cid, candidatesGetBasicDetailsResponseDataInner.cid) &&
        Objects.equals(this.tagIds, candidatesGetBasicDetailsResponseDataInner.tagIds) &&
        Objects.equals(this.statusColor, candidatesGetBasicDetailsResponseDataInner.statusColor) &&
        Objects.equals(this.appliedPositionIds, candidatesGetBasicDetailsResponseDataInner.appliedPositionIds) &&
        Objects.equals(this.appliedPositionUids, candidatesGetBasicDetailsResponseDataInner.appliedPositionUids) &&
        Objects.equals(this.recruiterThumbnail, candidatesGetBasicDetailsResponseDataInner.recruiterThumbnail) &&
        Objects.equals(this.recruiterName, candidatesGetBasicDetailsResponseDataInner.recruiterName) &&
        Objects.equals(this.recruiterGender, candidatesGetBasicDetailsResponseDataInner.recruiterGender) &&
        Objects.equals(this.referrerName, candidatesGetBasicDetailsResponseDataInner.referrerName) &&
        Objects.equals(this.isInternalCand, candidatesGetBasicDetailsResponseDataInner.isInternalCand) &&
        Objects.equals(this.applicationStatus, candidatesGetBasicDetailsResponseDataInner.applicationStatus) &&
        Objects.equals(this.verified, candidatesGetBasicDetailsResponseDataInner.verified) &&
        Objects.equals(this.positionNameList, candidatesGetBasicDetailsResponseDataInner.positionNameList) &&
        Objects.equals(this.internalCandidate, candidatesGetBasicDetailsResponseDataInner.internalCandidate)&&
        Objects.equals(this.additionalProperties, candidatesGetBasicDetailsResponseDataInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recruitId, name, email, phone, dateOfBirth, statusid, referrerId, createts, notes, source, userid, recruiterUserId, summaryByCandidate, candidateLock, educationStr, status, appliedPositions, updatedOn, cid, tagIds, statusColor, appliedPositionIds, appliedPositionUids, recruiterThumbnail, recruiterName, recruiterGender, referrerName, isInternalCand, applicationStatus, verified, positionNameList, internalCandidate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CandidatesGetBasicDetailsResponseDataInner {\n");
    sb.append("    recruitId: ").append(toIndentedString(recruitId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    statusid: ").append(toIndentedString(statusid)).append("\n");
    sb.append("    referrerId: ").append(toIndentedString(referrerId)).append("\n");
    sb.append("    createts: ").append(toIndentedString(createts)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    recruiterUserId: ").append(toIndentedString(recruiterUserId)).append("\n");
    sb.append("    summaryByCandidate: ").append(toIndentedString(summaryByCandidate)).append("\n");
    sb.append("    candidateLock: ").append(toIndentedString(candidateLock)).append("\n");
    sb.append("    educationStr: ").append(toIndentedString(educationStr)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    appliedPositions: ").append(toIndentedString(appliedPositions)).append("\n");
    sb.append("    updatedOn: ").append(toIndentedString(updatedOn)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    tagIds: ").append(toIndentedString(tagIds)).append("\n");
    sb.append("    statusColor: ").append(toIndentedString(statusColor)).append("\n");
    sb.append("    appliedPositionIds: ").append(toIndentedString(appliedPositionIds)).append("\n");
    sb.append("    appliedPositionUids: ").append(toIndentedString(appliedPositionUids)).append("\n");
    sb.append("    recruiterThumbnail: ").append(toIndentedString(recruiterThumbnail)).append("\n");
    sb.append("    recruiterName: ").append(toIndentedString(recruiterName)).append("\n");
    sb.append("    recruiterGender: ").append(toIndentedString(recruiterGender)).append("\n");
    sb.append("    referrerName: ").append(toIndentedString(referrerName)).append("\n");
    sb.append("    isInternalCand: ").append(toIndentedString(isInternalCand)).append("\n");
    sb.append("    applicationStatus: ").append(toIndentedString(applicationStatus)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    positionNameList: ").append(toIndentedString(positionNameList)).append("\n");
    sb.append("    internalCandidate: ").append(toIndentedString(internalCandidate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recruitId");
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("dateOfBirth");
    openapiFields.add("statusid");
    openapiFields.add("referrerId");
    openapiFields.add("createts");
    openapiFields.add("notes");
    openapiFields.add("source");
    openapiFields.add("userid");
    openapiFields.add("recruiterUserId");
    openapiFields.add("summaryByCandidate");
    openapiFields.add("candidateLock");
    openapiFields.add("educationStr");
    openapiFields.add("status");
    openapiFields.add("appliedPositions");
    openapiFields.add("updatedOn");
    openapiFields.add("cid");
    openapiFields.add("tagIds");
    openapiFields.add("statusColor");
    openapiFields.add("appliedPositionIds");
    openapiFields.add("appliedPositionUids");
    openapiFields.add("recruiterThumbnail");
    openapiFields.add("recruiterName");
    openapiFields.add("recruiterGender");
    openapiFields.add("referrerName");
    openapiFields.add("isInternalCand");
    openapiFields.add("applicationStatus");
    openapiFields.add("verified");
    openapiFields.add("positionNameList");
    openapiFields.add("internalCandidate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CandidatesGetBasicDetailsResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CandidatesGetBasicDetailsResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CandidatesGetBasicDetailsResponseDataInner is not found in the empty JSON string", CandidatesGetBasicDetailsResponseDataInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("recruitId") != null && !jsonObj.get("recruitId").isJsonNull()) && !jsonObj.get("recruitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruitId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("dateOfBirth") != null && !jsonObj.get("dateOfBirth").isJsonNull()) && !jsonObj.get("dateOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfBirth").toString()));
      }
      if ((jsonObj.get("statusid") != null && !jsonObj.get("statusid").isJsonNull()) && !jsonObj.get("statusid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusid").toString()));
      }
      if ((jsonObj.get("referrerId") != null && !jsonObj.get("referrerId").isJsonNull()) && !jsonObj.get("referrerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrerId").toString()));
      }
      if ((jsonObj.get("createts") != null && !jsonObj.get("createts").isJsonNull()) && !jsonObj.get("createts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createts").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("userid") != null && !jsonObj.get("userid").isJsonNull()) && !jsonObj.get("userid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userid").toString()));
      }
      if ((jsonObj.get("recruiterUserId") != null && !jsonObj.get("recruiterUserId").isJsonNull()) && !jsonObj.get("recruiterUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruiterUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruiterUserId").toString()));
      }
      if ((jsonObj.get("summaryByCandidate") != null && !jsonObj.get("summaryByCandidate").isJsonNull()) && !jsonObj.get("summaryByCandidate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summaryByCandidate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summaryByCandidate").toString()));
      }
      if ((jsonObj.get("candidateLock") != null && !jsonObj.get("candidateLock").isJsonNull()) && !jsonObj.get("candidateLock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidateLock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidateLock").toString()));
      }
      if ((jsonObj.get("educationStr") != null && !jsonObj.get("educationStr").isJsonNull()) && !jsonObj.get("educationStr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `educationStr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("educationStr").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("appliedPositions") != null && !jsonObj.get("appliedPositions").isJsonNull()) && !jsonObj.get("appliedPositions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedPositions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appliedPositions").toString()));
      }
      if ((jsonObj.get("updatedOn") != null && !jsonObj.get("updatedOn").isJsonNull()) && !jsonObj.get("updatedOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedOn").toString()));
      }
      if ((jsonObj.get("cid") != null && !jsonObj.get("cid").isJsonNull()) && !jsonObj.get("cid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cid").toString()));
      }
      if ((jsonObj.get("tagIds") != null && !jsonObj.get("tagIds").isJsonNull()) && !jsonObj.get("tagIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagIds").toString()));
      }
      if ((jsonObj.get("statusColor") != null && !jsonObj.get("statusColor").isJsonNull()) && !jsonObj.get("statusColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusColor").toString()));
      }
      if ((jsonObj.get("appliedPositionIds") != null && !jsonObj.get("appliedPositionIds").isJsonNull()) && !jsonObj.get("appliedPositionIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedPositionIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appliedPositionIds").toString()));
      }
      if ((jsonObj.get("appliedPositionUids") != null && !jsonObj.get("appliedPositionUids").isJsonNull()) && !jsonObj.get("appliedPositionUids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedPositionUids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appliedPositionUids").toString()));
      }
      if ((jsonObj.get("recruiterThumbnail") != null && !jsonObj.get("recruiterThumbnail").isJsonNull()) && !jsonObj.get("recruiterThumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruiterThumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruiterThumbnail").toString()));
      }
      if ((jsonObj.get("recruiterName") != null && !jsonObj.get("recruiterName").isJsonNull()) && !jsonObj.get("recruiterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruiterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruiterName").toString()));
      }
      if ((jsonObj.get("recruiterGender") != null && !jsonObj.get("recruiterGender").isJsonNull()) && !jsonObj.get("recruiterGender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruiterGender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruiterGender").toString()));
      }
      if ((jsonObj.get("referrerName") != null && !jsonObj.get("referrerName").isJsonNull()) && !jsonObj.get("referrerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrerName").toString()));
      }
      if ((jsonObj.get("isInternalCand") != null && !jsonObj.get("isInternalCand").isJsonNull()) && !jsonObj.get("isInternalCand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isInternalCand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isInternalCand").toString()));
      }
      if ((jsonObj.get("applicationStatus") != null && !jsonObj.get("applicationStatus").isJsonNull()) && !jsonObj.get("applicationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationStatus").toString()));
      }
      if ((jsonObj.get("verified") != null && !jsonObj.get("verified").isJsonNull()) && !jsonObj.get("verified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verified").toString()));
      }
      if ((jsonObj.get("positionNameList") != null && !jsonObj.get("positionNameList").isJsonNull()) && !jsonObj.get("positionNameList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `positionNameList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("positionNameList").toString()));
      }
      if ((jsonObj.get("internalCandidate") != null && !jsonObj.get("internalCandidate").isJsonNull()) && !jsonObj.get("internalCandidate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalCandidate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalCandidate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CandidatesGetBasicDetailsResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CandidatesGetBasicDetailsResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CandidatesGetBasicDetailsResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CandidatesGetBasicDetailsResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CandidatesGetBasicDetailsResponseDataInner>() {
           @Override
           public void write(JsonWriter out, CandidatesGetBasicDetailsResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CandidatesGetBasicDetailsResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CandidatesGetBasicDetailsResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CandidatesGetBasicDetailsResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CandidatesGetBasicDetailsResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to CandidatesGetBasicDetailsResponseDataInner
  */
  public static CandidatesGetBasicDetailsResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CandidatesGetBasicDetailsResponseDataInner.class);
  }

 /**
  * Convert an instance of CandidatesGetBasicDetailsResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

