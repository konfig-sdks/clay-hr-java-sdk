/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.sql.Timestamp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UserGroupModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UserGroupModel {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_CREATEUSERID = "createuserid";
  @SerializedName(SERIALIZED_NAME_CREATEUSERID)
  private Integer createuserid;

  public static final String SERIALIZED_NAME_FUNCTIONID = "functionid";
  @SerializedName(SERIALIZED_NAME_FUNCTIONID)
  private Integer functionid;

  public static final String SERIALIZED_NAME_MEMBERSHIP_GUIDANCE = "membershipGuidance";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_GUIDANCE)
  private String membershipGuidance;

  public static final String SERIALIZED_NAME_UPDATETS = "updatets";
  @SerializedName(SERIALIZED_NAME_UPDATETS)
  private Timestamp updatets;

  public static final String SERIALIZED_NAME_USERGROUPID = "usergroupid";
  @SerializedName(SERIALIZED_NAME_USERGROUPID)
  private Integer usergroupid;

  public static final String SERIALIZED_NAME_USERGROUPNAME = "usergroupname";
  @SerializedName(SERIALIZED_NAME_USERGROUPNAME)
  private String usergroupname;

  public UserGroupModel() {
  }

  public UserGroupModel description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public UserGroupModel cid(Integer cid) {
    
    
    
    
    this.cid = cid;
    return this;
  }

   /**
   * Get cid
   * @return cid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCid() {
    return cid;
  }


  public void setCid(Integer cid) {
    
    
    
    this.cid = cid;
  }


  public UserGroupModel createuserid(Integer createuserid) {
    
    
    
    
    this.createuserid = createuserid;
    return this;
  }

   /**
   * Get createuserid
   * @return createuserid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreateuserid() {
    return createuserid;
  }


  public void setCreateuserid(Integer createuserid) {
    
    
    
    this.createuserid = createuserid;
  }


  public UserGroupModel functionid(Integer functionid) {
    
    
    
    
    this.functionid = functionid;
    return this;
  }

   /**
   * Get functionid
   * @return functionid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFunctionid() {
    return functionid;
  }


  public void setFunctionid(Integer functionid) {
    
    
    
    this.functionid = functionid;
  }


  public UserGroupModel membershipGuidance(String membershipGuidance) {
    
    
    
    
    this.membershipGuidance = membershipGuidance;
    return this;
  }

   /**
   * Get membershipGuidance
   * @return membershipGuidance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMembershipGuidance() {
    return membershipGuidance;
  }


  public void setMembershipGuidance(String membershipGuidance) {
    
    
    
    this.membershipGuidance = membershipGuidance;
  }


  public UserGroupModel updatets(Timestamp updatets) {
    
    
    
    
    this.updatets = updatets;
    return this;
  }

   /**
   * Get updatets
   * @return updatets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Timestamp getUpdatets() {
    return updatets;
  }


  public void setUpdatets(Timestamp updatets) {
    
    
    
    this.updatets = updatets;
  }


  public UserGroupModel usergroupid(Integer usergroupid) {
    
    
    
    
    this.usergroupid = usergroupid;
    return this;
  }

   /**
   * Get usergroupid
   * @return usergroupid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUsergroupid() {
    return usergroupid;
  }


  public void setUsergroupid(Integer usergroupid) {
    
    
    
    this.usergroupid = usergroupid;
  }


  public UserGroupModel usergroupname(String usergroupname) {
    
    
    
    
    this.usergroupname = usergroupname;
    return this;
  }

   /**
   * Get usergroupname
   * @return usergroupname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUsergroupname() {
    return usergroupname;
  }


  public void setUsergroupname(String usergroupname) {
    
    
    
    this.usergroupname = usergroupname;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserGroupModel instance itself
   */
  public UserGroupModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserGroupModel userGroupModel = (UserGroupModel) o;
    return Objects.equals(this.description, userGroupModel.description) &&
        Objects.equals(this.cid, userGroupModel.cid) &&
        Objects.equals(this.createuserid, userGroupModel.createuserid) &&
        Objects.equals(this.functionid, userGroupModel.functionid) &&
        Objects.equals(this.membershipGuidance, userGroupModel.membershipGuidance) &&
        Objects.equals(this.updatets, userGroupModel.updatets) &&
        Objects.equals(this.usergroupid, userGroupModel.usergroupid) &&
        Objects.equals(this.usergroupname, userGroupModel.usergroupname)&&
        Objects.equals(this.additionalProperties, userGroupModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, cid, createuserid, functionid, membershipGuidance, updatets, usergroupid, usergroupname, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserGroupModel {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    createuserid: ").append(toIndentedString(createuserid)).append("\n");
    sb.append("    functionid: ").append(toIndentedString(functionid)).append("\n");
    sb.append("    membershipGuidance: ").append(toIndentedString(membershipGuidance)).append("\n");
    sb.append("    updatets: ").append(toIndentedString(updatets)).append("\n");
    sb.append("    usergroupid: ").append(toIndentedString(usergroupid)).append("\n");
    sb.append("    usergroupname: ").append(toIndentedString(usergroupname)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("cid");
    openapiFields.add("createuserid");
    openapiFields.add("functionid");
    openapiFields.add("membershipGuidance");
    openapiFields.add("updatets");
    openapiFields.add("usergroupid");
    openapiFields.add("usergroupname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserGroupModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserGroupModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserGroupModel is not found in the empty JSON string", UserGroupModel.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("membershipGuidance") != null && !jsonObj.get("membershipGuidance").isJsonNull()) && !jsonObj.get("membershipGuidance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipGuidance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("membershipGuidance").toString()));
      }
      // validate the optional field `updatets`
      if (jsonObj.get("updatets") != null && !jsonObj.get("updatets").isJsonNull()) {
        Timestamp.validateJsonObject(jsonObj.getAsJsonObject("updatets"));
      }
      if ((jsonObj.get("usergroupname") != null && !jsonObj.get("usergroupname").isJsonNull()) && !jsonObj.get("usergroupname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usergroupname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usergroupname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserGroupModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserGroupModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserGroupModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserGroupModel.class));

       return (TypeAdapter<T>) new TypeAdapter<UserGroupModel>() {
           @Override
           public void write(JsonWriter out, UserGroupModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserGroupModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserGroupModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserGroupModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserGroupModel
  * @throws IOException if the JSON string is invalid with respect to UserGroupModel
  */
  public static UserGroupModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserGroupModel.class);
  }

 /**
  * Convert an instance of UserGroupModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

