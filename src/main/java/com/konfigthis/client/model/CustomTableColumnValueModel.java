/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomTableColumnModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.sql.Timestamp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CustomTableColumnValueModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomTableColumnValueModel {
  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidateId";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private Integer candidateId;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_COL_TYPE = "colType";
  @SerializedName(SERIALIZED_NAME_COL_TYPE)
  private String colType;

  public static final String SERIALIZED_NAME_COL_VALUE = "colValue";
  @SerializedName(SERIALIZED_NAME_COL_VALUE)
  private String colValue;

  public static final String SERIALIZED_NAME_CREATE_USER_ID = "createUserId";
  @SerializedName(SERIALIZED_NAME_CREATE_USER_ID)
  private Integer createUserId;

  public static final String SERIALIZED_NAME_CREATETS = "createts";
  @SerializedName(SERIALIZED_NAME_CREATETS)
  private Timestamp createts;

  public static final String SERIALIZED_NAME_CT_COLUMN_MODEL = "ctColumnModel";
  @SerializedName(SERIALIZED_NAME_CT_COLUMN_MODEL)
  private CustomTableColumnModel ctColumnModel;

  public static final String SERIALIZED_NAME_CT_VALUE_ID = "ctValueId";
  @SerializedName(SERIALIZED_NAME_CT_VALUE_ID)
  private Integer ctValueId;

  public static final String SERIALIZED_NAME_CTC_VALUE_ID = "ctcValueId";
  @SerializedName(SERIALIZED_NAME_CTC_VALUE_ID)
  private Integer ctcValueId;

  public static final String SERIALIZED_NAME_CTCOLUMNID = "ctcolumnid";
  @SerializedName(SERIALIZED_NAME_CTCOLUMNID)
  private Integer ctcolumnid;

  public static final String SERIALIZED_NAME_CUSTOM_TABLE_ID = "customTableId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TABLE_ID)
  private Integer customTableId;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public CustomTableColumnValueModel() {
  }

  public CustomTableColumnValueModel candidateId(Integer candidateId) {
    
    
    
    
    this.candidateId = candidateId;
    return this;
  }

   /**
   * Get candidateId
   * @return candidateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCandidateId() {
    return candidateId;
  }


  public void setCandidateId(Integer candidateId) {
    
    
    
    this.candidateId = candidateId;
  }


  public CustomTableColumnValueModel cid(Integer cid) {
    
    
    
    
    this.cid = cid;
    return this;
  }

   /**
   * Get cid
   * @return cid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCid() {
    return cid;
  }


  public void setCid(Integer cid) {
    
    
    
    this.cid = cid;
  }


  public CustomTableColumnValueModel colType(String colType) {
    
    
    
    
    this.colType = colType;
    return this;
  }

   /**
   * Get colType
   * @return colType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColType() {
    return colType;
  }


  public void setColType(String colType) {
    
    
    
    this.colType = colType;
  }


  public CustomTableColumnValueModel colValue(String colValue) {
    
    
    
    
    this.colValue = colValue;
    return this;
  }

   /**
   * Get colValue
   * @return colValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColValue() {
    return colValue;
  }


  public void setColValue(String colValue) {
    
    
    
    this.colValue = colValue;
  }


  public CustomTableColumnValueModel createUserId(Integer createUserId) {
    
    
    
    
    this.createUserId = createUserId;
    return this;
  }

   /**
   * Get createUserId
   * @return createUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreateUserId() {
    return createUserId;
  }


  public void setCreateUserId(Integer createUserId) {
    
    
    
    this.createUserId = createUserId;
  }


  public CustomTableColumnValueModel createts(Timestamp createts) {
    
    
    
    
    this.createts = createts;
    return this;
  }

   /**
   * Get createts
   * @return createts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Timestamp getCreatets() {
    return createts;
  }


  public void setCreatets(Timestamp createts) {
    
    
    
    this.createts = createts;
  }


  public CustomTableColumnValueModel ctColumnModel(CustomTableColumnModel ctColumnModel) {
    
    
    
    
    this.ctColumnModel = ctColumnModel;
    return this;
  }

   /**
   * Get ctColumnModel
   * @return ctColumnModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomTableColumnModel getCtColumnModel() {
    return ctColumnModel;
  }


  public void setCtColumnModel(CustomTableColumnModel ctColumnModel) {
    
    
    
    this.ctColumnModel = ctColumnModel;
  }


  public CustomTableColumnValueModel ctValueId(Integer ctValueId) {
    
    
    
    
    this.ctValueId = ctValueId;
    return this;
  }

   /**
   * Get ctValueId
   * @return ctValueId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCtValueId() {
    return ctValueId;
  }


  public void setCtValueId(Integer ctValueId) {
    
    
    
    this.ctValueId = ctValueId;
  }


  public CustomTableColumnValueModel ctcValueId(Integer ctcValueId) {
    
    
    
    
    this.ctcValueId = ctcValueId;
    return this;
  }

   /**
   * Get ctcValueId
   * @return ctcValueId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCtcValueId() {
    return ctcValueId;
  }


  public void setCtcValueId(Integer ctcValueId) {
    
    
    
    this.ctcValueId = ctcValueId;
  }


  public CustomTableColumnValueModel ctcolumnid(Integer ctcolumnid) {
    
    
    
    
    this.ctcolumnid = ctcolumnid;
    return this;
  }

   /**
   * Get ctcolumnid
   * @return ctcolumnid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCtcolumnid() {
    return ctcolumnid;
  }


  public void setCtcolumnid(Integer ctcolumnid) {
    
    
    
    this.ctcolumnid = ctcolumnid;
  }


  public CustomTableColumnValueModel customTableId(Integer customTableId) {
    
    
    
    
    this.customTableId = customTableId;
    return this;
  }

   /**
   * Get customTableId
   * @return customTableId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomTableId() {
    return customTableId;
  }


  public void setCustomTableId(Integer customTableId) {
    
    
    
    this.customTableId = customTableId;
  }


  public CustomTableColumnValueModel userid(Integer userid) {
    
    
    
    
    this.userid = userid;
    return this;
  }

   /**
   * Get userid
   * @return userid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUserid() {
    return userid;
  }


  public void setUserid(Integer userid) {
    
    
    
    this.userid = userid;
  }


  public CustomTableColumnValueModel value(String value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    
    
    
    this.value = value;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomTableColumnValueModel instance itself
   */
  public CustomTableColumnValueModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomTableColumnValueModel customTableColumnValueModel = (CustomTableColumnValueModel) o;
    return Objects.equals(this.candidateId, customTableColumnValueModel.candidateId) &&
        Objects.equals(this.cid, customTableColumnValueModel.cid) &&
        Objects.equals(this.colType, customTableColumnValueModel.colType) &&
        Objects.equals(this.colValue, customTableColumnValueModel.colValue) &&
        Objects.equals(this.createUserId, customTableColumnValueModel.createUserId) &&
        Objects.equals(this.createts, customTableColumnValueModel.createts) &&
        Objects.equals(this.ctColumnModel, customTableColumnValueModel.ctColumnModel) &&
        Objects.equals(this.ctValueId, customTableColumnValueModel.ctValueId) &&
        Objects.equals(this.ctcValueId, customTableColumnValueModel.ctcValueId) &&
        Objects.equals(this.ctcolumnid, customTableColumnValueModel.ctcolumnid) &&
        Objects.equals(this.customTableId, customTableColumnValueModel.customTableId) &&
        Objects.equals(this.userid, customTableColumnValueModel.userid) &&
        Objects.equals(this.value, customTableColumnValueModel.value)&&
        Objects.equals(this.additionalProperties, customTableColumnValueModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateId, cid, colType, colValue, createUserId, createts, ctColumnModel, ctValueId, ctcValueId, ctcolumnid, customTableId, userid, value, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomTableColumnValueModel {\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    colType: ").append(toIndentedString(colType)).append("\n");
    sb.append("    colValue: ").append(toIndentedString(colValue)).append("\n");
    sb.append("    createUserId: ").append(toIndentedString(createUserId)).append("\n");
    sb.append("    createts: ").append(toIndentedString(createts)).append("\n");
    sb.append("    ctColumnModel: ").append(toIndentedString(ctColumnModel)).append("\n");
    sb.append("    ctValueId: ").append(toIndentedString(ctValueId)).append("\n");
    sb.append("    ctcValueId: ").append(toIndentedString(ctcValueId)).append("\n");
    sb.append("    ctcolumnid: ").append(toIndentedString(ctcolumnid)).append("\n");
    sb.append("    customTableId: ").append(toIndentedString(customTableId)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidateId");
    openapiFields.add("cid");
    openapiFields.add("colType");
    openapiFields.add("colValue");
    openapiFields.add("createUserId");
    openapiFields.add("createts");
    openapiFields.add("ctColumnModel");
    openapiFields.add("ctValueId");
    openapiFields.add("ctcValueId");
    openapiFields.add("ctcolumnid");
    openapiFields.add("customTableId");
    openapiFields.add("userid");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomTableColumnValueModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomTableColumnValueModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomTableColumnValueModel is not found in the empty JSON string", CustomTableColumnValueModel.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("colType") != null && !jsonObj.get("colType").isJsonNull()) && !jsonObj.get("colType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colType").toString()));
      }
      if ((jsonObj.get("colValue") != null && !jsonObj.get("colValue").isJsonNull()) && !jsonObj.get("colValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colValue").toString()));
      }
      // validate the optional field `createts`
      if (jsonObj.get("createts") != null && !jsonObj.get("createts").isJsonNull()) {
        Timestamp.validateJsonObject(jsonObj.getAsJsonObject("createts"));
      }
      // validate the optional field `ctColumnModel`
      if (jsonObj.get("ctColumnModel") != null && !jsonObj.get("ctColumnModel").isJsonNull()) {
        CustomTableColumnModel.validateJsonObject(jsonObj.getAsJsonObject("ctColumnModel"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomTableColumnValueModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomTableColumnValueModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomTableColumnValueModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomTableColumnValueModel.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomTableColumnValueModel>() {
           @Override
           public void write(JsonWriter out, CustomTableColumnValueModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomTableColumnValueModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomTableColumnValueModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomTableColumnValueModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomTableColumnValueModel
  * @throws IOException if the JSON string is invalid with respect to CustomTableColumnValueModel
  */
  public static CustomTableColumnValueModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomTableColumnValueModel.class);
  }

 /**
  * Convert an instance of CustomTableColumnValueModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

