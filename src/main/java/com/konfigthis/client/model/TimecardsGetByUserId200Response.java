/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimecardsGetByUserId200Response
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimecardsGetByUserId200Response {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATE_USER_I_D = "createUserID";
  @SerializedName(SERIALIZED_NAME_CREATE_USER_I_D)
  private String createUserID;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private String startDateTime;

  public static final String SERIALIZED_NAME_CARD_ID = "cardId";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_CREATETS = "createts";
  @SerializedName(SERIALIZED_NAME_CREATETS)
  private String createts;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_END_DATE_TIME = "endDateTime";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME)
  private String endDateTime;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_ELAPSED_TIME = "elapsedTime";
  @SerializedName(SERIALIZED_NAME_ELAPSED_TIME)
  private String elapsedTime;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private String cid;

  public TimecardsGetByUserId200Response() {
  }

  public TimecardsGetByUserId200Response description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "string", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TimecardsGetByUserId200Response createUserID(String createUserID) {
    
    
    
    
    this.createUserID = createUserID;
    return this;
  }

   /**
   * Get createUserID
   * @return createUserID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getCreateUserID() {
    return createUserID;
  }


  public void setCreateUserID(String createUserID) {
    
    
    
    this.createUserID = createUserID;
  }


  public TimecardsGetByUserId200Response startDateTime(String startDateTime) {
    
    
    
    
    this.startDateTime = startDateTime;
    return this;
  }

   /**
   * Get startDateTime
   * @return startDateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "time", value = "")

  public String getStartDateTime() {
    return startDateTime;
  }


  public void setStartDateTime(String startDateTime) {
    
    
    
    this.startDateTime = startDateTime;
  }


  public TimecardsGetByUserId200Response cardId(String cardId) {
    
    
    
    
    this.cardId = cardId;
    return this;
  }

   /**
   * Get cardId
   * @return cardId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getCardId() {
    return cardId;
  }


  public void setCardId(String cardId) {
    
    
    
    this.cardId = cardId;
  }


  public TimecardsGetByUserId200Response createts(String createts) {
    
    
    
    
    this.createts = createts;
    return this;
  }

   /**
   * Get createts
   * @return createts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getCreatets() {
    return createts;
  }


  public void setCreatets(String createts) {
    
    
    
    this.createts = createts;
  }


  public TimecardsGetByUserId200Response id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public TimecardsGetByUserId200Response endDateTime(String endDateTime) {
    
    
    
    
    this.endDateTime = endDateTime;
    return this;
  }

   /**
   * Get endDateTime
   * @return endDateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "time", value = "")

  public String getEndDateTime() {
    return endDateTime;
  }


  public void setEndDateTime(String endDateTime) {
    
    
    
    this.endDateTime = endDateTime;
  }


  public TimecardsGetByUserId200Response projectId(String projectId) {
    
    
    
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getProjectId() {
    return projectId;
  }


  public void setProjectId(String projectId) {
    
    
    
    this.projectId = projectId;
  }


  public TimecardsGetByUserId200Response elapsedTime(String elapsedTime) {
    
    
    
    
    this.elapsedTime = elapsedTime;
    return this;
  }

   /**
   * Get elapsedTime
   * @return elapsedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "time", value = "")

  public String getElapsedTime() {
    return elapsedTime;
  }


  public void setElapsedTime(String elapsedTime) {
    
    
    
    this.elapsedTime = elapsedTime;
  }


  public TimecardsGetByUserId200Response cid(String cid) {
    
    
    
    
    this.cid = cid;
    return this;
  }

   /**
   * Get cid
   * @return cid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "int", value = "")

  public String getCid() {
    return cid;
  }


  public void setCid(String cid) {
    
    
    
    this.cid = cid;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimecardsGetByUserId200Response instance itself
   */
  public TimecardsGetByUserId200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimecardsGetByUserId200Response timecardsGetByUserId200Response = (TimecardsGetByUserId200Response) o;
    return Objects.equals(this.description, timecardsGetByUserId200Response.description) &&
        Objects.equals(this.createUserID, timecardsGetByUserId200Response.createUserID) &&
        Objects.equals(this.startDateTime, timecardsGetByUserId200Response.startDateTime) &&
        Objects.equals(this.cardId, timecardsGetByUserId200Response.cardId) &&
        Objects.equals(this.createts, timecardsGetByUserId200Response.createts) &&
        Objects.equals(this.id, timecardsGetByUserId200Response.id) &&
        Objects.equals(this.endDateTime, timecardsGetByUserId200Response.endDateTime) &&
        Objects.equals(this.projectId, timecardsGetByUserId200Response.projectId) &&
        Objects.equals(this.elapsedTime, timecardsGetByUserId200Response.elapsedTime) &&
        Objects.equals(this.cid, timecardsGetByUserId200Response.cid)&&
        Objects.equals(this.additionalProperties, timecardsGetByUserId200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, createUserID, startDateTime, cardId, createts, id, endDateTime, projectId, elapsedTime, cid, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimecardsGetByUserId200Response {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createUserID: ").append(toIndentedString(createUserID)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    createts: ").append(toIndentedString(createts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    elapsedTime: ").append(toIndentedString(elapsedTime)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("createUserID");
    openapiFields.add("startDateTime");
    openapiFields.add("cardId");
    openapiFields.add("createts");
    openapiFields.add("id");
    openapiFields.add("endDateTime");
    openapiFields.add("projectId");
    openapiFields.add("elapsedTime");
    openapiFields.add("cid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimecardsGetByUserId200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimecardsGetByUserId200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimecardsGetByUserId200Response is not found in the empty JSON string", TimecardsGetByUserId200Response.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("createUserID") != null && !jsonObj.get("createUserID").isJsonNull()) && !jsonObj.get("createUserID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createUserID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createUserID").toString()));
      }
      if ((jsonObj.get("startDateTime") != null && !jsonObj.get("startDateTime").isJsonNull()) && !jsonObj.get("startDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateTime").toString()));
      }
      if ((jsonObj.get("cardId") != null && !jsonObj.get("cardId").isJsonNull()) && !jsonObj.get("cardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardId").toString()));
      }
      if ((jsonObj.get("createts") != null && !jsonObj.get("createts").isJsonNull()) && !jsonObj.get("createts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createts").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("endDateTime") != null && !jsonObj.get("endDateTime").isJsonNull()) && !jsonObj.get("endDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDateTime").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("elapsedTime") != null && !jsonObj.get("elapsedTime").isJsonNull()) && !jsonObj.get("elapsedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elapsedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elapsedTime").toString()));
      }
      if ((jsonObj.get("cid") != null && !jsonObj.get("cid").isJsonNull()) && !jsonObj.get("cid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimecardsGetByUserId200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimecardsGetByUserId200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimecardsGetByUserId200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimecardsGetByUserId200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<TimecardsGetByUserId200Response>() {
           @Override
           public void write(JsonWriter out, TimecardsGetByUserId200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimecardsGetByUserId200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimecardsGetByUserId200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimecardsGetByUserId200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimecardsGetByUserId200Response
  * @throws IOException if the JSON string is invalid with respect to TimecardsGetByUserId200Response
  */
  public static TimecardsGetByUserId200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimecardsGetByUserId200Response.class);
  }

 /**
  * Convert an instance of TimecardsGetByUserId200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

