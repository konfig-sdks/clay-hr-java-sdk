/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.sql.Timestamp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WorkflowParameterModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WorkflowParameterModel {
  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_CREATETS = "createts";
  @SerializedName(SERIALIZED_NAME_CREATETS)
  private Timestamp createts;

  public static final String SERIALIZED_NAME_PARAM_NAME = "paramName";
  @SerializedName(SERIALIZED_NAME_PARAM_NAME)
  private String paramName;

  public static final String SERIALIZED_NAME_PARAM_TYPE = "paramType";
  @SerializedName(SERIALIZED_NAME_PARAM_TYPE)
  private String paramType;

  public static final String SERIALIZED_NAME_WORKFLOW_ARG_ID = "workflowArgId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ARG_ID)
  private Integer workflowArgId;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "workflowId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private Integer workflowId;

  public WorkflowParameterModel() {
  }

  public WorkflowParameterModel cid(Integer cid) {
    
    
    
    
    this.cid = cid;
    return this;
  }

   /**
   * Get cid
   * @return cid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCid() {
    return cid;
  }


  public void setCid(Integer cid) {
    
    
    
    this.cid = cid;
  }


  public WorkflowParameterModel createts(Timestamp createts) {
    
    
    
    
    this.createts = createts;
    return this;
  }

   /**
   * Get createts
   * @return createts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Timestamp getCreatets() {
    return createts;
  }


  public void setCreatets(Timestamp createts) {
    
    
    
    this.createts = createts;
  }


  public WorkflowParameterModel paramName(String paramName) {
    
    
    
    
    this.paramName = paramName;
    return this;
  }

   /**
   * Get paramName
   * @return paramName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getParamName() {
    return paramName;
  }


  public void setParamName(String paramName) {
    
    
    
    this.paramName = paramName;
  }


  public WorkflowParameterModel paramType(String paramType) {
    
    
    
    
    this.paramType = paramType;
    return this;
  }

   /**
   * Get paramType
   * @return paramType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getParamType() {
    return paramType;
  }


  public void setParamType(String paramType) {
    
    
    
    this.paramType = paramType;
  }


  public WorkflowParameterModel workflowArgId(Integer workflowArgId) {
    
    
    
    
    this.workflowArgId = workflowArgId;
    return this;
  }

   /**
   * Get workflowArgId
   * @return workflowArgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getWorkflowArgId() {
    return workflowArgId;
  }


  public void setWorkflowArgId(Integer workflowArgId) {
    
    
    
    this.workflowArgId = workflowArgId;
  }


  public WorkflowParameterModel workflowId(Integer workflowId) {
    
    
    
    
    this.workflowId = workflowId;
    return this;
  }

   /**
   * Get workflowId
   * @return workflowId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getWorkflowId() {
    return workflowId;
  }


  public void setWorkflowId(Integer workflowId) {
    
    
    
    this.workflowId = workflowId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkflowParameterModel instance itself
   */
  public WorkflowParameterModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowParameterModel workflowParameterModel = (WorkflowParameterModel) o;
    return Objects.equals(this.cid, workflowParameterModel.cid) &&
        Objects.equals(this.createts, workflowParameterModel.createts) &&
        Objects.equals(this.paramName, workflowParameterModel.paramName) &&
        Objects.equals(this.paramType, workflowParameterModel.paramType) &&
        Objects.equals(this.workflowArgId, workflowParameterModel.workflowArgId) &&
        Objects.equals(this.workflowId, workflowParameterModel.workflowId)&&
        Objects.equals(this.additionalProperties, workflowParameterModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cid, createts, paramName, paramType, workflowArgId, workflowId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowParameterModel {\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    createts: ").append(toIndentedString(createts)).append("\n");
    sb.append("    paramName: ").append(toIndentedString(paramName)).append("\n");
    sb.append("    paramType: ").append(toIndentedString(paramType)).append("\n");
    sb.append("    workflowArgId: ").append(toIndentedString(workflowArgId)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cid");
    openapiFields.add("createts");
    openapiFields.add("paramName");
    openapiFields.add("paramType");
    openapiFields.add("workflowArgId");
    openapiFields.add("workflowId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowParameterModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkflowParameterModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowParameterModel is not found in the empty JSON string", WorkflowParameterModel.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `createts`
      if (jsonObj.get("createts") != null && !jsonObj.get("createts").isJsonNull()) {
        Timestamp.validateJsonObject(jsonObj.getAsJsonObject("createts"));
      }
      if ((jsonObj.get("paramName") != null && !jsonObj.get("paramName").isJsonNull()) && !jsonObj.get("paramName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paramName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paramName").toString()));
      }
      if ((jsonObj.get("paramType") != null && !jsonObj.get("paramType").isJsonNull()) && !jsonObj.get("paramType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paramType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paramType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowParameterModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowParameterModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowParameterModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowParameterModel.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowParameterModel>() {
           @Override
           public void write(JsonWriter out, WorkflowParameterModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowParameterModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WorkflowParameterModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowParameterModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowParameterModel
  * @throws IOException if the JSON string is invalid with respect to WorkflowParameterModel
  */
  public static WorkflowParameterModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowParameterModel.class);
  }

 /**
  * Convert an instance of WorkflowParameterModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

