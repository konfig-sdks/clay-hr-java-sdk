/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.TaskModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTaskCall(List<TaskModel> taskModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskModel;

        // create path and map variables
        String localVarPath = "/api/v3/task/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTaskValidateBeforeCall(List<TaskModel> taskModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskModel' is set
        if (taskModel == null) {
            throw new ApiException("Missing the required parameter 'taskModel' when calling createNewTask(Async)");
        }

        return createNewTaskCall(taskModel, _callback);

    }


    private ApiResponse<Object> createNewTaskWithHttpInfo(List<TaskModel> taskModel) throws ApiException {
        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(taskModel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTaskAsync(List<TaskModel> taskModel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(taskModel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTaskRequestBuilder {
        private List<TaskModel> taskModel;

        private CreateNewTaskRequestBuilder() {
        }

        /**
         * Set taskModel
         * @param taskModel task object to create a new task (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder taskModel(List<TaskModel> taskModel) {
            this.taskModel = taskModel;
            return this;
        }

        /**
         * Build call for createNewTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<TaskModel> taskModel = buildBodyParams();
            return createNewTaskCall(taskModel, _callback);
        }

        private List<TaskModel> buildBodyParams() {
            return this.taskModel;
        }

        /**
         * Execute createNewTask request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            List<TaskModel> taskModel = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewTaskWithHttpInfo(taskModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTask request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            List<TaskModel> taskModel = buildBodyParams();
            return createNewTaskWithHttpInfo(taskModel);
        }

        /**
         * Execute createNewTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            List<TaskModel> taskModel = buildBodyParams();
            return createNewTaskAsync(taskModel, _callback);
        }
    }

    /**
     * Create a new task.
     * 
     * @param taskModel task object to create a new task (required)
     * @return CreateNewTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTaskRequestBuilder createNewTask() throws IllegalArgumentException {
        return new CreateNewTaskRequestBuilder();
    }
    private okhttp3.Call getTaskDetailsByTaskIdCall(Integer taskid, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/task/{taskid}"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskDetailsByTaskIdValidateBeforeCall(Integer taskid, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling getTaskDetailsByTaskId(Async)");
        }

        return getTaskDetailsByTaskIdCall(taskid, authorization, _callback);

    }


    private ApiResponse<Object> getTaskDetailsByTaskIdWithHttpInfo(Integer taskid, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getTaskDetailsByTaskIdValidateBeforeCall(taskid, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskDetailsByTaskIdAsync(Integer taskid, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskDetailsByTaskIdValidateBeforeCall(taskid, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskDetailsByTaskIdRequestBuilder {
        private final Integer taskid;
        private String authorization;

        private GetTaskDetailsByTaskIdRequestBuilder(Integer taskid) {
            this.taskid = taskid;
        }

        /**
         * Set authorization
         * @param authorization Authorization (optional)
         * @return GetTaskDetailsByTaskIdRequestBuilder
         */
        public GetTaskDetailsByTaskIdRequestBuilder authorization(String authorization) {
            this.authorization = authorization;
            return this;
        }
        
        /**
         * Build call for getTaskDetailsByTaskId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskDetailsByTaskIdCall(taskid, authorization, _callback);
        }


        /**
         * Execute getTaskDetailsByTaskId request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTaskDetailsByTaskIdWithHttpInfo(taskid, authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskDetailsByTaskId request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTaskDetailsByTaskIdWithHttpInfo(taskid, authorization);
        }

        /**
         * Execute getTaskDetailsByTaskId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTaskDetailsByTaskIdAsync(taskid, authorization, _callback);
        }
    }

    /**
     * Get the details of a workflow task by task id.
     * 
     * @param taskid taskid (required)
     * @return GetTaskDetailsByTaskIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskDetailsByTaskIdRequestBuilder getTaskDetailsByTaskId(Integer taskid) throws IllegalArgumentException {
        if (taskid == null) throw new IllegalArgumentException("\"taskid\" is required but got null");
        return new GetTaskDetailsByTaskIdRequestBuilder(taskid);
    }
    private okhttp3.Call getTasksByUserIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksByUserIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTasksByUserIdCall(_callback);

    }


    private ApiResponse<Object> getTasksByUserIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTasksByUserIdValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTasksByUserIdAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksByUserIdValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTasksByUserIdRequestBuilder {

        private GetTasksByUserIdRequestBuilder() {
        }

        /**
         * Build call for getTasksByUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTasksByUserIdCall(_callback);
        }


        /**
         * Execute getTasksByUserId request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTasksByUserIdWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTasksByUserId request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTasksByUserIdWithHttpInfo();
        }

        /**
         * Execute getTasksByUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTasksByUserIdAsync(_callback);
        }
    }

    /**
     * Get tasks by user id.
     * 
     * @return GetTasksByUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksByUserIdRequestBuilder getTasksByUserId() throws IllegalArgumentException {
        return new GetTasksByUserIdRequestBuilder();
    }
    private okhttp3.Call getUserWorkflowsCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/userworkflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserWorkflowsValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        return getUserWorkflowsCall(authorization, _callback);

    }


    private ApiResponse<Object> getUserWorkflowsWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getUserWorkflowsValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserWorkflowsAsync(String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserWorkflowsValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserWorkflowsRequestBuilder {
        private String authorization;

        private GetUserWorkflowsRequestBuilder() {
        }

        /**
         * Set authorization
         * @param authorization Authorization (optional)
         * @return GetUserWorkflowsRequestBuilder
         */
        public GetUserWorkflowsRequestBuilder authorization(String authorization) {
            this.authorization = authorization;
            return this;
        }
        
        /**
         * Build call for getUserWorkflows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserWorkflowsCall(authorization, _callback);
        }


        /**
         * Execute getUserWorkflows request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUserWorkflowsWithHttpInfo(authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserWorkflows request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUserWorkflowsWithHttpInfo(authorization);
        }

        /**
         * Execute getUserWorkflows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUserWorkflowsAsync(authorization, _callback);
        }
    }

    /**
     * Get workflows by user id.
     * 
     * @return GetUserWorkflowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetUserWorkflowsRequestBuilder getUserWorkflows() throws IllegalArgumentException {
        return new GetUserWorkflowsRequestBuilder();
    }
    private okhttp3.Call getWorkflowsCall(String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkflowsValidateBeforeCall(String status, final ApiCallback _callback) throws ApiException {
        return getWorkflowsCall(status, _callback);

    }


    private ApiResponse<Object> getWorkflowsWithHttpInfo(String status) throws ApiException {
        okhttp3.Call localVarCall = getWorkflowsValidateBeforeCall(status, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkflowsAsync(String status, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkflowsValidateBeforeCall(status, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkflowsRequestBuilder {
        private String status;

        private GetWorkflowsRequestBuilder() {
        }

        /**
         * Set status
         * @param status status (optional, default to A)
         * @return GetWorkflowsRequestBuilder
         */
        public GetWorkflowsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for getWorkflows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkflowsCall(status, _callback);
        }


        /**
         * Execute getWorkflows request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getWorkflowsWithHttpInfo(status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkflows request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getWorkflowsWithHttpInfo(status);
        }

        /**
         * Execute getWorkflows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getWorkflowsAsync(status, _callback);
        }
    }

    /**
     * Get workflows.
     * 
     * @return GetWorkflowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkflowsRequestBuilder getWorkflows() throws IllegalArgumentException {
        return new GetWorkflowsRequestBuilder();
    }
    private okhttp3.Call listTasksByUserworkflowIdCall(Integer userworkflowid, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/userworkflows/{userworkflowid}"
            .replace("{" + "userworkflowid" + "}", localVarApiClient.escapeString(userworkflowid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTasksByUserworkflowIdValidateBeforeCall(Integer userworkflowid, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userworkflowid' is set
        if (userworkflowid == null) {
            throw new ApiException("Missing the required parameter 'userworkflowid' when calling listTasksByUserworkflowId(Async)");
        }

        return listTasksByUserworkflowIdCall(userworkflowid, authorization, _callback);

    }


    private ApiResponse<Object> listTasksByUserworkflowIdWithHttpInfo(Integer userworkflowid, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listTasksByUserworkflowIdValidateBeforeCall(userworkflowid, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTasksByUserworkflowIdAsync(Integer userworkflowid, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTasksByUserworkflowIdValidateBeforeCall(userworkflowid, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTasksByUserworkflowIdRequestBuilder {
        private final Integer userworkflowid;
        private String authorization;

        private ListTasksByUserworkflowIdRequestBuilder(Integer userworkflowid) {
            this.userworkflowid = userworkflowid;
        }

        /**
         * Set authorization
         * @param authorization Authorization (optional)
         * @return ListTasksByUserworkflowIdRequestBuilder
         */
        public ListTasksByUserworkflowIdRequestBuilder authorization(String authorization) {
            this.authorization = authorization;
            return this;
        }
        
        /**
         * Build call for listTasksByUserworkflowId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTasksByUserworkflowIdCall(userworkflowid, authorization, _callback);
        }


        /**
         * Execute listTasksByUserworkflowId request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listTasksByUserworkflowIdWithHttpInfo(userworkflowid, authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTasksByUserworkflowId request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listTasksByUserworkflowIdWithHttpInfo(userworkflowid, authorization);
        }

        /**
         * Execute listTasksByUserworkflowId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listTasksByUserworkflowIdAsync(userworkflowid, authorization, _callback);
        }
    }

    /**
     * Get tasks by userworkflowid.
     * 
     * @param userworkflowid userworkflowid (required)
     * @return ListTasksByUserworkflowIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListTasksByUserworkflowIdRequestBuilder listTasksByUserworkflowId(Integer userworkflowid) throws IllegalArgumentException {
        if (userworkflowid == null) throw new IllegalArgumentException("\"userworkflowid\" is required but got null");
        return new ListTasksByUserworkflowIdRequestBuilder(userworkflowid);
    }
    private okhttp3.Call updateStatusTaskCall(String authorization, Integer appraisalId, Integer assignedUserId, Boolean ci, Integer cid, Integer createUserId, LocalDate createts, String description, LocalDate dueDate, String lastEdit, Integer launchtsDate, Integer launchtsDay, Integer launchtsHours, Integer launchtsMinutes, Integer launchtsMonth, Integer launchtsNanos, Integer launchtsSeconds, Long launchtsTime, Integer launchtsTimezoneOffset, Integer launchtsYear, String phasename, Integer projectId, Integer recruitId, String statusCode, Integer systemTask, Integer taskId, Integer taskUID, String title, String transitionName, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/task/update/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appraisalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appraisalId", appraisalId));
        }

        if (assignedUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignedUserId", assignedUserId));
        }

        if (ci != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ci", ci));
        }

        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (createUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createUserId", createUserId));
        }

        if (createts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts", createts));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (dueDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dueDate", dueDate));
        }

        if (lastEdit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastEdit", lastEdit));
        }

        if (launchtsDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.date", launchtsDate));
        }

        if (launchtsDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.day", launchtsDay));
        }

        if (launchtsHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.hours", launchtsHours));
        }

        if (launchtsMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.minutes", launchtsMinutes));
        }

        if (launchtsMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.month", launchtsMonth));
        }

        if (launchtsNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.nanos", launchtsNanos));
        }

        if (launchtsSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.seconds", launchtsSeconds));
        }

        if (launchtsTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.time", launchtsTime));
        }

        if (launchtsTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.timezoneOffset", launchtsTimezoneOffset));
        }

        if (launchtsYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("launchts.year", launchtsYear));
        }

        if (phasename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phasename", phasename));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (recruitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recruitId", recruitId));
        }

        if (statusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusCode", statusCode));
        }

        if (systemTask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("systemTask", systemTask));
        }

        if (taskId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taskId", taskId));
        }

        if (taskUID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taskUID", taskUID));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (transitionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transitionName", transitionName));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusTaskValidateBeforeCall(String authorization, Integer appraisalId, Integer assignedUserId, Boolean ci, Integer cid, Integer createUserId, LocalDate createts, String description, LocalDate dueDate, String lastEdit, Integer launchtsDate, Integer launchtsDay, Integer launchtsHours, Integer launchtsMinutes, Integer launchtsMonth, Integer launchtsNanos, Integer launchtsSeconds, Long launchtsTime, Integer launchtsTimezoneOffset, Integer launchtsYear, String phasename, Integer projectId, Integer recruitId, String statusCode, Integer systemTask, Integer taskId, Integer taskUID, String title, String transitionName, String type, final ApiCallback _callback) throws ApiException {
        return updateStatusTaskCall(authorization, appraisalId, assignedUserId, ci, cid, createUserId, createts, description, dueDate, lastEdit, launchtsDate, launchtsDay, launchtsHours, launchtsMinutes, launchtsMonth, launchtsNanos, launchtsSeconds, launchtsTime, launchtsTimezoneOffset, launchtsYear, phasename, projectId, recruitId, statusCode, systemTask, taskId, taskUID, title, transitionName, type, _callback);

    }


    private ApiResponse<Object> updateStatusTaskWithHttpInfo(String authorization, Integer appraisalId, Integer assignedUserId, Boolean ci, Integer cid, Integer createUserId, LocalDate createts, String description, LocalDate dueDate, String lastEdit, Integer launchtsDate, Integer launchtsDay, Integer launchtsHours, Integer launchtsMinutes, Integer launchtsMonth, Integer launchtsNanos, Integer launchtsSeconds, Long launchtsTime, Integer launchtsTimezoneOffset, Integer launchtsYear, String phasename, Integer projectId, Integer recruitId, String statusCode, Integer systemTask, Integer taskId, Integer taskUID, String title, String transitionName, String type) throws ApiException {
        okhttp3.Call localVarCall = updateStatusTaskValidateBeforeCall(authorization, appraisalId, assignedUserId, ci, cid, createUserId, createts, description, dueDate, lastEdit, launchtsDate, launchtsDay, launchtsHours, launchtsMinutes, launchtsMonth, launchtsNanos, launchtsSeconds, launchtsTime, launchtsTimezoneOffset, launchtsYear, phasename, projectId, recruitId, statusCode, systemTask, taskId, taskUID, title, transitionName, type, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStatusTaskAsync(String authorization, Integer appraisalId, Integer assignedUserId, Boolean ci, Integer cid, Integer createUserId, LocalDate createts, String description, LocalDate dueDate, String lastEdit, Integer launchtsDate, Integer launchtsDay, Integer launchtsHours, Integer launchtsMinutes, Integer launchtsMonth, Integer launchtsNanos, Integer launchtsSeconds, Long launchtsTime, Integer launchtsTimezoneOffset, Integer launchtsYear, String phasename, Integer projectId, Integer recruitId, String statusCode, Integer systemTask, Integer taskId, Integer taskUID, String title, String transitionName, String type, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusTaskValidateBeforeCall(authorization, appraisalId, assignedUserId, ci, cid, createUserId, createts, description, dueDate, lastEdit, launchtsDate, launchtsDay, launchtsHours, launchtsMinutes, launchtsMonth, launchtsNanos, launchtsSeconds, launchtsTime, launchtsTimezoneOffset, launchtsYear, phasename, projectId, recruitId, statusCode, systemTask, taskId, taskUID, title, transitionName, type, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStatusTaskRequestBuilder {
        private String authorization;
        private Integer appraisalId;
        private Integer assignedUserId;
        private Boolean ci;
        private Integer cid;
        private Integer createUserId;
        private LocalDate createts;
        private String description;
        private LocalDate dueDate;
        private String lastEdit;
        private Integer launchtsDate;
        private Integer launchtsDay;
        private Integer launchtsHours;
        private Integer launchtsMinutes;
        private Integer launchtsMonth;
        private Integer launchtsNanos;
        private Integer launchtsSeconds;
        private Long launchtsTime;
        private Integer launchtsTimezoneOffset;
        private Integer launchtsYear;
        private String phasename;
        private Integer projectId;
        private Integer recruitId;
        private String statusCode;
        private Integer systemTask;
        private Integer taskId;
        private Integer taskUID;
        private String title;
        private String transitionName;
        private String type;

        private UpdateStatusTaskRequestBuilder() {
        }

        /**
         * Set authorization
         * @param authorization Authorization (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder authorization(String authorization) {
            this.authorization = authorization;
            return this;
        }
        
        /**
         * Set appraisalId
         * @param appraisalId  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder appraisalId(Integer appraisalId) {
            this.appraisalId = appraisalId;
            return this;
        }
        
        /**
         * Set assignedUserId
         * @param assignedUserId  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder assignedUserId(Integer assignedUserId) {
            this.assignedUserId = assignedUserId;
            return this;
        }
        
        /**
         * Set ci
         * @param ci  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder ci(Boolean ci) {
            this.ci = ci;
            return this;
        }
        
        /**
         * Set cid
         * @param cid  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder cid(Integer cid) {
            this.cid = cid;
            return this;
        }
        
        /**
         * Set createUserId
         * @param createUserId  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder createUserId(Integer createUserId) {
            this.createUserId = createUserId;
            return this;
        }
        
        /**
         * Set createts
         * @param createts  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder createts(LocalDate createts) {
            this.createts = createts;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set dueDate
         * @param dueDate  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder dueDate(LocalDate dueDate) {
            this.dueDate = dueDate;
            return this;
        }
        
        /**
         * Set lastEdit
         * @param lastEdit  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder lastEdit(String lastEdit) {
            this.lastEdit = lastEdit;
            return this;
        }
        
        /**
         * Set launchtsDate
         * @param launchtsDate  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsDate(Integer launchtsDate) {
            this.launchtsDate = launchtsDate;
            return this;
        }
        
        /**
         * Set launchtsDay
         * @param launchtsDay  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsDay(Integer launchtsDay) {
            this.launchtsDay = launchtsDay;
            return this;
        }
        
        /**
         * Set launchtsHours
         * @param launchtsHours  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsHours(Integer launchtsHours) {
            this.launchtsHours = launchtsHours;
            return this;
        }
        
        /**
         * Set launchtsMinutes
         * @param launchtsMinutes  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsMinutes(Integer launchtsMinutes) {
            this.launchtsMinutes = launchtsMinutes;
            return this;
        }
        
        /**
         * Set launchtsMonth
         * @param launchtsMonth  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsMonth(Integer launchtsMonth) {
            this.launchtsMonth = launchtsMonth;
            return this;
        }
        
        /**
         * Set launchtsNanos
         * @param launchtsNanos  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsNanos(Integer launchtsNanos) {
            this.launchtsNanos = launchtsNanos;
            return this;
        }
        
        /**
         * Set launchtsSeconds
         * @param launchtsSeconds  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsSeconds(Integer launchtsSeconds) {
            this.launchtsSeconds = launchtsSeconds;
            return this;
        }
        
        /**
         * Set launchtsTime
         * @param launchtsTime  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsTime(Long launchtsTime) {
            this.launchtsTime = launchtsTime;
            return this;
        }
        
        /**
         * Set launchtsTimezoneOffset
         * @param launchtsTimezoneOffset  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsTimezoneOffset(Integer launchtsTimezoneOffset) {
            this.launchtsTimezoneOffset = launchtsTimezoneOffset;
            return this;
        }
        
        /**
         * Set launchtsYear
         * @param launchtsYear  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder launchtsYear(Integer launchtsYear) {
            this.launchtsYear = launchtsYear;
            return this;
        }
        
        /**
         * Set phasename
         * @param phasename  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder phasename(String phasename) {
            this.phasename = phasename;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder projectId(Integer projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set recruitId
         * @param recruitId  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder recruitId(Integer recruitId) {
            this.recruitId = recruitId;
            return this;
        }
        
        /**
         * Set statusCode
         * @param statusCode  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder statusCode(String statusCode) {
            this.statusCode = statusCode;
            return this;
        }
        
        /**
         * Set systemTask
         * @param systemTask  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder systemTask(Integer systemTask) {
            this.systemTask = systemTask;
            return this;
        }
        
        /**
         * Set taskId
         * @param taskId  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder taskId(Integer taskId) {
            this.taskId = taskId;
            return this;
        }
        
        /**
         * Set taskUID
         * @param taskUID  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder taskUID(Integer taskUID) {
            this.taskUID = taskUID;
            return this;
        }
        
        /**
         * Set title
         * @param title  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set transitionName
         * @param transitionName  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder transitionName(String transitionName) {
            this.transitionName = transitionName;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateStatusTaskRequestBuilder
         */
        public UpdateStatusTaskRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateStatusTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateStatusTaskCall(authorization, appraisalId, assignedUserId, ci, cid, createUserId, createts, description, dueDate, lastEdit, launchtsDate, launchtsDay, launchtsHours, launchtsMinutes, launchtsMonth, launchtsNanos, launchtsSeconds, launchtsTime, launchtsTimezoneOffset, launchtsYear, phasename, projectId, recruitId, statusCode, systemTask, taskId, taskUID, title, transitionName, type, _callback);
        }


        /**
         * Execute updateStatusTask request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = updateStatusTaskWithHttpInfo(authorization, appraisalId, assignedUserId, ci, cid, createUserId, createts, description, dueDate, lastEdit, launchtsDate, launchtsDay, launchtsHours, launchtsMinutes, launchtsMonth, launchtsNanos, launchtsSeconds, launchtsTime, launchtsTimezoneOffset, launchtsYear, phasename, projectId, recruitId, statusCode, systemTask, taskId, taskUID, title, transitionName, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStatusTask request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return updateStatusTaskWithHttpInfo(authorization, appraisalId, assignedUserId, ci, cid, createUserId, createts, description, dueDate, lastEdit, launchtsDate, launchtsDay, launchtsHours, launchtsMinutes, launchtsMonth, launchtsNanos, launchtsSeconds, launchtsTime, launchtsTimezoneOffset, launchtsYear, phasename, projectId, recruitId, statusCode, systemTask, taskId, taskUID, title, transitionName, type);
        }

        /**
         * Execute updateStatusTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return updateStatusTaskAsync(authorization, appraisalId, assignedUserId, ci, cid, createUserId, createts, description, dueDate, lastEdit, launchtsDate, launchtsDay, launchtsHours, launchtsMinutes, launchtsMonth, launchtsNanos, launchtsSeconds, launchtsTime, launchtsTimezoneOffset, launchtsYear, phasename, projectId, recruitId, statusCode, systemTask, taskId, taskUID, title, transitionName, type, _callback);
        }
    }

    /**
     * Update status workflow task.
     * 
     * @return UpdateStatusTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusTaskRequestBuilder updateStatusTask() throws IllegalArgumentException {
        return new UpdateStatusTaskRequestBuilder();
    }
}
