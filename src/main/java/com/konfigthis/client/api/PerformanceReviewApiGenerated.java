/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.PerformanceReviewCreatePerformanceReviewResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PerformanceReviewApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PerformanceReviewApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PerformanceReviewApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPerformanceReviewCall(Integer templateId, LocalDate startDate, LocalDate endDate, String appraisalType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appraisal/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (appraisalType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AppraisalType", appraisalType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPerformanceReviewValidateBeforeCall(Integer templateId, LocalDate startDate, LocalDate endDate, String appraisalType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling createPerformanceReview(Async)");
        }

        return createPerformanceReviewCall(templateId, startDate, endDate, appraisalType, _callback);

    }


    private ApiResponse<PerformanceReviewCreatePerformanceReviewResponse> createPerformanceReviewWithHttpInfo(Integer templateId, LocalDate startDate, LocalDate endDate, String appraisalType) throws ApiException {
        okhttp3.Call localVarCall = createPerformanceReviewValidateBeforeCall(templateId, startDate, endDate, appraisalType, null);
        Type localVarReturnType = new TypeToken<PerformanceReviewCreatePerformanceReviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPerformanceReviewAsync(Integer templateId, LocalDate startDate, LocalDate endDate, String appraisalType, final ApiCallback<PerformanceReviewCreatePerformanceReviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPerformanceReviewValidateBeforeCall(templateId, startDate, endDate, appraisalType, _callback);
        Type localVarReturnType = new TypeToken<PerformanceReviewCreatePerformanceReviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePerformanceReviewRequestBuilder {
        private final Integer templateId;
        private LocalDate startDate;
        private LocalDate endDate;
        private String appraisalType;

        private CreatePerformanceReviewRequestBuilder(Integer templateId) {
            this.templateId = templateId;
        }

        /**
         * Set startDate
         * @param startDate Start Date of the performance review. (optional)
         * @return CreatePerformanceReviewRequestBuilder
         */
        public CreatePerformanceReviewRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End Date of the performance review. (optional)
         * @return CreatePerformanceReviewRequestBuilder
         */
        public CreatePerformanceReviewRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set appraisalType
         * @param appraisalType Review Period (optional, default to Annual)
         * @return CreatePerformanceReviewRequestBuilder
         */
        public CreatePerformanceReviewRequestBuilder appraisalType(String appraisalType) {
            this.appraisalType = appraisalType;
            return this;
        }
        
        /**
         * Build call for createPerformanceReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPerformanceReviewCall(templateId, startDate, endDate, appraisalType, _callback);
        }


        /**
         * Execute createPerformanceReview request
         * @return PerformanceReviewCreatePerformanceReviewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public PerformanceReviewCreatePerformanceReviewResponse execute() throws ApiException {
            ApiResponse<PerformanceReviewCreatePerformanceReviewResponse> localVarResp = createPerformanceReviewWithHttpInfo(templateId, startDate, endDate, appraisalType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPerformanceReview request with HTTP info returned
         * @return ApiResponse&lt;PerformanceReviewCreatePerformanceReviewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PerformanceReviewCreatePerformanceReviewResponse> executeWithHttpInfo() throws ApiException {
            return createPerformanceReviewWithHttpInfo(templateId, startDate, endDate, appraisalType);
        }

        /**
         * Execute createPerformanceReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PerformanceReviewCreatePerformanceReviewResponse> _callback) throws ApiException {
            return createPerformanceReviewAsync(templateId, startDate, endDate, appraisalType, _callback);
        }
    }

    /**
     * Create Performance Review
     * 
     * @param templateId The ID of the performance review template. (required)
     * @return CreatePerformanceReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public CreatePerformanceReviewRequestBuilder createPerformanceReview(Integer templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
        return new CreatePerformanceReviewRequestBuilder(templateId);
    }
    private okhttp3.Call getCompletedReviewsBasedOnUserIdCall(Integer targetUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appraisal/getCompletedReviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetUserId", targetUserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompletedReviewsBasedOnUserIdValidateBeforeCall(Integer targetUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUserId' is set
        if (targetUserId == null) {
            throw new ApiException("Missing the required parameter 'targetUserId' when calling getCompletedReviewsBasedOnUserId(Async)");
        }

        return getCompletedReviewsBasedOnUserIdCall(targetUserId, _callback);

    }


    private ApiResponse<String> getCompletedReviewsBasedOnUserIdWithHttpInfo(Integer targetUserId) throws ApiException {
        okhttp3.Call localVarCall = getCompletedReviewsBasedOnUserIdValidateBeforeCall(targetUserId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompletedReviewsBasedOnUserIdAsync(Integer targetUserId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompletedReviewsBasedOnUserIdValidateBeforeCall(targetUserId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompletedReviewsBasedOnUserIdRequestBuilder {
        private final Integer targetUserId;

        private GetCompletedReviewsBasedOnUserIdRequestBuilder(Integer targetUserId) {
            this.targetUserId = targetUserId;
        }

        /**
         * Build call for getCompletedReviewsBasedOnUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompletedReviewsBasedOnUserIdCall(targetUserId, _callback);
        }


        /**
         * Execute getCompletedReviewsBasedOnUserId request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getCompletedReviewsBasedOnUserIdWithHttpInfo(targetUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompletedReviewsBasedOnUserId request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getCompletedReviewsBasedOnUserIdWithHttpInfo(targetUserId);
        }

        /**
         * Execute getCompletedReviewsBasedOnUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getCompletedReviewsBasedOnUserIdAsync(targetUserId, _callback);
        }
    }

    /**
     * Retrieve Completed Performance Reviews
     * 
     * @param targetUserId The ID of the user. (required)
     * @return GetCompletedReviewsBasedOnUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCompletedReviewsBasedOnUserIdRequestBuilder getCompletedReviewsBasedOnUserId(Integer targetUserId) throws IllegalArgumentException {
        if (targetUserId == null) throw new IllegalArgumentException("\"targetUserId\" is required but got null");
        return new GetCompletedReviewsBasedOnUserIdRequestBuilder(targetUserId);
    }
    private okhttp3.Call getPerformanceReviewsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appraisal/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPerformanceReviewsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPerformanceReviewsCall(_callback);

    }


    private ApiResponse<Object> getPerformanceReviewsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPerformanceReviewsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPerformanceReviewsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPerformanceReviewsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPerformanceReviewsRequestBuilder {

        private GetPerformanceReviewsRequestBuilder() {
        }

        /**
         * Build call for getPerformanceReviews
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPerformanceReviewsCall(_callback);
        }


        /**
         * Execute getPerformanceReviews request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getPerformanceReviewsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPerformanceReviews request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getPerformanceReviewsWithHttpInfo();
        }

        /**
         * Execute getPerformanceReviews request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getPerformanceReviewsAsync(_callback);
        }
    }

    /**
     * Retrieve Performance Reviews
     * 
     * @return GetPerformanceReviewsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetPerformanceReviewsRequestBuilder getPerformanceReviews() throws IllegalArgumentException {
        return new GetPerformanceReviewsRequestBuilder();
    }
    private okhttp3.Call getTemplatesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appraisal/template/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplatesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTemplatesCall(_callback);

    }


    private ApiResponse<Object> getTemplatesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTemplatesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTemplatesAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplatesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTemplatesRequestBuilder {

        private GetTemplatesRequestBuilder() {
        }

        /**
         * Build call for getTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTemplatesCall(_callback);
        }


        /**
         * Execute getTemplates request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTemplatesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTemplates request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTemplatesWithHttpInfo();
        }

        /**
         * Execute getTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTemplatesAsync(_callback);
        }
    }

    /**
     * Retrieve Performance Review Templates
     * 
     * @return GetTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetTemplatesRequestBuilder getTemplates() throws IllegalArgumentException {
        return new GetTemplatesRequestBuilder();
    }
    private okhttp3.Call launchPerformanceReviewsInBulkCall(String templateId, String reviewType, String startDate, String endDate, String importGoals, String importJobProfileSkills, String importSkills, String userIdList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appraisal/bulkLaunch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        if (reviewType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reviewType", reviewType));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (importGoals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importGoals", importGoals));
        }

        if (importJobProfileSkills != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importJobProfileSkills", importJobProfileSkills));
        }

        if (importSkills != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importSkills", importSkills));
        }

        if (userIdList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIdList", userIdList));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call launchPerformanceReviewsInBulkValidateBeforeCall(String templateId, String reviewType, String startDate, String endDate, String importGoals, String importJobProfileSkills, String importSkills, String userIdList, final ApiCallback _callback) throws ApiException {
        return launchPerformanceReviewsInBulkCall(templateId, reviewType, startDate, endDate, importGoals, importJobProfileSkills, importSkills, userIdList, _callback);

    }


    private ApiResponse<Object> launchPerformanceReviewsInBulkWithHttpInfo(String templateId, String reviewType, String startDate, String endDate, String importGoals, String importJobProfileSkills, String importSkills, String userIdList) throws ApiException {
        okhttp3.Call localVarCall = launchPerformanceReviewsInBulkValidateBeforeCall(templateId, reviewType, startDate, endDate, importGoals, importJobProfileSkills, importSkills, userIdList, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call launchPerformanceReviewsInBulkAsync(String templateId, String reviewType, String startDate, String endDate, String importGoals, String importJobProfileSkills, String importSkills, String userIdList, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = launchPerformanceReviewsInBulkValidateBeforeCall(templateId, reviewType, startDate, endDate, importGoals, importJobProfileSkills, importSkills, userIdList, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LaunchPerformanceReviewsInBulkRequestBuilder {
        private String templateId;
        private String reviewType;
        private String startDate;
        private String endDate;
        private String importGoals;
        private String importJobProfileSkills;
        private String importSkills;
        private String userIdList;

        private LaunchPerformanceReviewsInBulkRequestBuilder() {
        }

        /**
         * Set templateId
         * @param templateId  (optional)
         * @return LaunchPerformanceReviewsInBulkRequestBuilder
         */
        public LaunchPerformanceReviewsInBulkRequestBuilder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }
        
        /**
         * Set reviewType
         * @param reviewType  (optional)
         * @return LaunchPerformanceReviewsInBulkRequestBuilder
         */
        public LaunchPerformanceReviewsInBulkRequestBuilder reviewType(String reviewType) {
            this.reviewType = reviewType;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return LaunchPerformanceReviewsInBulkRequestBuilder
         */
        public LaunchPerformanceReviewsInBulkRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return LaunchPerformanceReviewsInBulkRequestBuilder
         */
        public LaunchPerformanceReviewsInBulkRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set importGoals
         * @param importGoals  (optional)
         * @return LaunchPerformanceReviewsInBulkRequestBuilder
         */
        public LaunchPerformanceReviewsInBulkRequestBuilder importGoals(String importGoals) {
            this.importGoals = importGoals;
            return this;
        }
        
        /**
         * Set importJobProfileSkills
         * @param importJobProfileSkills  (optional)
         * @return LaunchPerformanceReviewsInBulkRequestBuilder
         */
        public LaunchPerformanceReviewsInBulkRequestBuilder importJobProfileSkills(String importJobProfileSkills) {
            this.importJobProfileSkills = importJobProfileSkills;
            return this;
        }
        
        /**
         * Set importSkills
         * @param importSkills  (optional)
         * @return LaunchPerformanceReviewsInBulkRequestBuilder
         */
        public LaunchPerformanceReviewsInBulkRequestBuilder importSkills(String importSkills) {
            this.importSkills = importSkills;
            return this;
        }
        
        /**
         * Set userIdList
         * @param userIdList  (optional)
         * @return LaunchPerformanceReviewsInBulkRequestBuilder
         */
        public LaunchPerformanceReviewsInBulkRequestBuilder userIdList(String userIdList) {
            this.userIdList = userIdList;
            return this;
        }
        
        /**
         * Build call for launchPerformanceReviewsInBulk
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return launchPerformanceReviewsInBulkCall(templateId, reviewType, startDate, endDate, importGoals, importJobProfileSkills, importSkills, userIdList, _callback);
        }


        /**
         * Execute launchPerformanceReviewsInBulk request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = launchPerformanceReviewsInBulkWithHttpInfo(templateId, reviewType, startDate, endDate, importGoals, importJobProfileSkills, importSkills, userIdList);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute launchPerformanceReviewsInBulk request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return launchPerformanceReviewsInBulkWithHttpInfo(templateId, reviewType, startDate, endDate, importGoals, importJobProfileSkills, importSkills, userIdList);
        }

        /**
         * Execute launchPerformanceReviewsInBulk request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return launchPerformanceReviewsInBulkAsync(templateId, reviewType, startDate, endDate, importGoals, importJobProfileSkills, importSkills, userIdList, _callback);
        }
    }

    /**
     * Launch Performance Reviews In Bulk
     * 
     * @return LaunchPerformanceReviewsInBulkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public LaunchPerformanceReviewsInBulkRequestBuilder launchPerformanceReviewsInBulk() throws IllegalArgumentException {
        return new LaunchPerformanceReviewsInBulkRequestBuilder();
    }
}
