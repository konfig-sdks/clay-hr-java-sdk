/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.TimesheetsClockInResponse;
import com.konfigthis.client.model.TimesheetsClockOutResponse;
import com.konfigthis.client.model.TimesheetsCreateOrUpdateTimesheetResponse;
import com.konfigthis.client.model.TimesheetsDeleteByTimesheetIdResponse;
import com.konfigthis.client.model.TimesheetsGetActiveAllocationsResponse;
import com.konfigthis.client.model.TimesheetsGetApprovalListResponse;
import com.konfigthis.client.model.TimesheetsGetPreferencesByCidResponse;
import com.konfigthis.client.model.TimesheetsListActivityTypesByCidResponse;
import com.konfigthis.client.model.TimesheetsUpdateStatusByTimesheetIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimesheetsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimesheetsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimesheetsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call clockInCall(Integer proceedOutsideGeoFence, String description, Integer projectId, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet/clockin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (proceedOutsideGeoFence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proceedOutsideGeoFence", proceedOutsideGeoFence));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (projectManager != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectManager", projectManager));
        }

        if (categoryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryCode", categoryCode));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (billable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billable", billable));
        }

        if (activity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity", activity));
        }

        if (approvalRejectionReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalRejectionReason", approvalRejectionReason));
        }

        if (clockInLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockInLongitude", clockInLongitude));
        }

        if (clockInLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockInLatitude", clockInLatitude));
        }

        if (clockOutLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockOutLongitude", clockOutLongitude));
        }

        if (clockOutLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockOutLatitude", clockOutLatitude));
        }

        if (projectAreaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectAreaId", projectAreaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clockInValidateBeforeCall(Integer proceedOutsideGeoFence, String description, Integer projectId, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId, final ApiCallback _callback) throws ApiException {
        return clockInCall(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);

    }


    private ApiResponse<TimesheetsClockInResponse> clockInWithHttpInfo(Integer proceedOutsideGeoFence, String description, Integer projectId, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId) throws ApiException {
        okhttp3.Call localVarCall = clockInValidateBeforeCall(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, null);
        Type localVarReturnType = new TypeToken<TimesheetsClockInResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call clockInAsync(Integer proceedOutsideGeoFence, String description, Integer projectId, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId, final ApiCallback<TimesheetsClockInResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clockInValidateBeforeCall(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);
        Type localVarReturnType = new TypeToken<TimesheetsClockInResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClockInRequestBuilder {
        private Integer proceedOutsideGeoFence;
        private String description;
        private Integer projectId;
        private String projectManager;
        private String categoryCode;
        private String notes;
        private String billable;
        private String activity;
        private String approvalRejectionReason;
        private Double clockInLongitude;
        private Double clockInLatitude;
        private Double clockOutLongitude;
        private Double clockOutLatitude;
        private Integer projectAreaId;

        private ClockInRequestBuilder() {
        }

        /**
         * Set proceedOutsideGeoFence
         * @param proceedOutsideGeoFence To clockin outside geofence (optional, default to 0)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder proceedOutsideGeoFence(Integer proceedOutsideGeoFence) {
            this.proceedOutsideGeoFence = proceedOutsideGeoFence;
            return this;
        }
        
        /**
         * Set description
         * @param description Description of timecard. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId Project ID of project. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder projectId(Integer projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set projectManager
         * @param projectManager Project Manager corresponding user. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder projectManager(String projectManager) {
            this.projectManager = projectManager;
            return this;
        }
        
        /**
         * Set categoryCode
         * @param categoryCode Category of timecard. Choose between [\&quot;Regular\&quot;, \&quot;Overtime\&quot;]. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder categoryCode(String categoryCode) {
            this.categoryCode = categoryCode;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set billable
         * @param billable Billable or non- billable timecard. Select &#39;Y&#39; for billable and &#39;N&#39; for non-billable (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder billable(String billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set activity
         * @param activity Activity type of timecard. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder activity(String activity) {
            this.activity = activity;
            return this;
        }
        
        /**
         * Set approvalRejectionReason
         * @param approvalRejectionReason Reason for approval rejection. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder approvalRejectionReason(String approvalRejectionReason) {
            this.approvalRejectionReason = approvalRejectionReason;
            return this;
        }
        
        /**
         * Set clockInLongitude
         * @param clockInLongitude Longitude value while clocking in. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder clockInLongitude(Double clockInLongitude) {
            this.clockInLongitude = clockInLongitude;
            return this;
        }
        
        /**
         * Set clockInLatitude
         * @param clockInLatitude Latitude value while clocking in. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder clockInLatitude(Double clockInLatitude) {
            this.clockInLatitude = clockInLatitude;
            return this;
        }
        
        /**
         * Set clockOutLongitude
         * @param clockOutLongitude Longitude value while clocking out. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder clockOutLongitude(Double clockOutLongitude) {
            this.clockOutLongitude = clockOutLongitude;
            return this;
        }
        
        /**
         * Set clockOutLatitude
         * @param clockOutLatitude Latitude value while clocking out. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder clockOutLatitude(Double clockOutLatitude) {
            this.clockOutLatitude = clockOutLatitude;
            return this;
        }
        
        /**
         * Set projectAreaId
         * @param projectAreaId Project area ID of project area. (optional)
         * @return ClockInRequestBuilder
         */
        public ClockInRequestBuilder projectAreaId(Integer projectAreaId) {
            this.projectAreaId = projectAreaId;
            return this;
        }
        
        /**
         * Build call for clockIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return clockInCall(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);
        }


        /**
         * Execute clockIn request
         * @return TimesheetsClockInResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsClockInResponse execute() throws ApiException {
            ApiResponse<TimesheetsClockInResponse> localVarResp = clockInWithHttpInfo(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute clockIn request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsClockInResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsClockInResponse> executeWithHttpInfo() throws ApiException {
            return clockInWithHttpInfo(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId);
        }

        /**
         * Execute clockIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsClockInResponse> _callback) throws ApiException {
            return clockInAsync(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);
        }
    }

    /**
     * Clock in.
     * Allows to clock in.
     * @return ClockInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ClockInRequestBuilder clockIn() throws IllegalArgumentException {
        return new ClockInRequestBuilder();
    }
    private okhttp3.Call clockOutCall(Integer proceedOutsideGeoFence, String description, Integer projectId, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet/clockout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (proceedOutsideGeoFence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proceedOutsideGeoFence", proceedOutsideGeoFence));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (projectManager != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectManager", projectManager));
        }

        if (categoryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryCode", categoryCode));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (billable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billable", billable));
        }

        if (activity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity", activity));
        }

        if (approvalRejectionReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalRejectionReason", approvalRejectionReason));
        }

        if (clockInLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockInLongitude", clockInLongitude));
        }

        if (clockInLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockInLatitude", clockInLatitude));
        }

        if (clockOutLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockOutLongitude", clockOutLongitude));
        }

        if (clockOutLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockOutLatitude", clockOutLatitude));
        }

        if (projectAreaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectAreaId", projectAreaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clockOutValidateBeforeCall(Integer proceedOutsideGeoFence, String description, Integer projectId, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId, final ApiCallback _callback) throws ApiException {
        return clockOutCall(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);

    }


    private ApiResponse<TimesheetsClockOutResponse> clockOutWithHttpInfo(Integer proceedOutsideGeoFence, String description, Integer projectId, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId) throws ApiException {
        okhttp3.Call localVarCall = clockOutValidateBeforeCall(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, null);
        Type localVarReturnType = new TypeToken<TimesheetsClockOutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call clockOutAsync(Integer proceedOutsideGeoFence, String description, Integer projectId, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId, final ApiCallback<TimesheetsClockOutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clockOutValidateBeforeCall(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);
        Type localVarReturnType = new TypeToken<TimesheetsClockOutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClockOutRequestBuilder {
        private Integer proceedOutsideGeoFence;
        private String description;
        private Integer projectId;
        private String projectManager;
        private String categoryCode;
        private String notes;
        private String billable;
        private String activity;
        private String approvalRejectionReason;
        private Double clockInLongitude;
        private Double clockInLatitude;
        private Double clockOutLongitude;
        private Double clockOutLatitude;
        private Integer projectAreaId;

        private ClockOutRequestBuilder() {
        }

        /**
         * Set proceedOutsideGeoFence
         * @param proceedOutsideGeoFence clock out outside geofence (optional, default to 0)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder proceedOutsideGeoFence(Integer proceedOutsideGeoFence) {
            this.proceedOutsideGeoFence = proceedOutsideGeoFence;
            return this;
        }
        
        /**
         * Set description
         * @param description Description of timecard. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId Project ID of project. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder projectId(Integer projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set projectManager
         * @param projectManager Project Manager corresponding user. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder projectManager(String projectManager) {
            this.projectManager = projectManager;
            return this;
        }
        
        /**
         * Set categoryCode
         * @param categoryCode Category of timecard. Choose between [\&quot;Regular\&quot;, \&quot;Overtime\&quot;]. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder categoryCode(String categoryCode) {
            this.categoryCode = categoryCode;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set billable
         * @param billable Billable or non- billable timecard. Select &#39;Y&#39; for billable and &#39;N&#39; for non-billable (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder billable(String billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set activity
         * @param activity Activity type of timecard. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder activity(String activity) {
            this.activity = activity;
            return this;
        }
        
        /**
         * Set approvalRejectionReason
         * @param approvalRejectionReason Reason for approval rejection. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder approvalRejectionReason(String approvalRejectionReason) {
            this.approvalRejectionReason = approvalRejectionReason;
            return this;
        }
        
        /**
         * Set clockInLongitude
         * @param clockInLongitude Longitude value while clocking in. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder clockInLongitude(Double clockInLongitude) {
            this.clockInLongitude = clockInLongitude;
            return this;
        }
        
        /**
         * Set clockInLatitude
         * @param clockInLatitude Latitude value while clocking in. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder clockInLatitude(Double clockInLatitude) {
            this.clockInLatitude = clockInLatitude;
            return this;
        }
        
        /**
         * Set clockOutLongitude
         * @param clockOutLongitude Longitude value while clocking out. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder clockOutLongitude(Double clockOutLongitude) {
            this.clockOutLongitude = clockOutLongitude;
            return this;
        }
        
        /**
         * Set clockOutLatitude
         * @param clockOutLatitude Latitude value while clocking out. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder clockOutLatitude(Double clockOutLatitude) {
            this.clockOutLatitude = clockOutLatitude;
            return this;
        }
        
        /**
         * Set projectAreaId
         * @param projectAreaId Project area ID of project area. (optional)
         * @return ClockOutRequestBuilder
         */
        public ClockOutRequestBuilder projectAreaId(Integer projectAreaId) {
            this.projectAreaId = projectAreaId;
            return this;
        }
        
        /**
         * Build call for clockOut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return clockOutCall(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);
        }


        /**
         * Execute clockOut request
         * @return TimesheetsClockOutResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsClockOutResponse execute() throws ApiException {
            ApiResponse<TimesheetsClockOutResponse> localVarResp = clockOutWithHttpInfo(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute clockOut request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsClockOutResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsClockOutResponse> executeWithHttpInfo() throws ApiException {
            return clockOutWithHttpInfo(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId);
        }

        /**
         * Execute clockOut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsClockOutResponse> _callback) throws ApiException {
            return clockOutAsync(proceedOutsideGeoFence, description, projectId, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);
        }
    }

    /**
     * Clock out.
     * Allows user to clock out.
     * @return ClockOutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClockOutRequestBuilder clockOut() throws IllegalArgumentException {
        return new ClockOutRequestBuilder();
    }
    private okhttp3.Call createOrUpdateTimesheetCall(LocalDate date, Integer projectId, OffsetDateTime elapsedTime, Integer cardId, String description, Integer clockedOutsideGeofence, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (elapsedTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime", elapsedTime));
        }

        if (cardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardId", cardId));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (clockedOutsideGeofence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockedOutsideGeofence", clockedOutsideGeofence));
        }

        if (projectManager != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectManager", projectManager));
        }

        if (categoryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryCode", categoryCode));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (billable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billable", billable));
        }

        if (activity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity", activity));
        }

        if (approvalRejectionReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalRejectionReason", approvalRejectionReason));
        }

        if (clockInLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockInLongitude", clockInLongitude));
        }

        if (clockInLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockInLatitude", clockInLatitude));
        }

        if (clockOutLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockOutLongitude", clockOutLongitude));
        }

        if (clockOutLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockOutLatitude", clockOutLatitude));
        }

        if (projectAreaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectAreaId", projectAreaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateTimesheetValidateBeforeCall(LocalDate date, Integer projectId, OffsetDateTime elapsedTime, Integer cardId, String description, Integer clockedOutsideGeofence, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling createOrUpdateTimesheet(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createOrUpdateTimesheet(Async)");
        }

        // verify the required parameter 'elapsedTime' is set
        if (elapsedTime == null) {
            throw new ApiException("Missing the required parameter 'elapsedTime' when calling createOrUpdateTimesheet(Async)");
        }

        return createOrUpdateTimesheetCall(date, projectId, elapsedTime, cardId, description, clockedOutsideGeofence, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);

    }


    private ApiResponse<TimesheetsCreateOrUpdateTimesheetResponse> createOrUpdateTimesheetWithHttpInfo(LocalDate date, Integer projectId, OffsetDateTime elapsedTime, Integer cardId, String description, Integer clockedOutsideGeofence, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateTimesheetValidateBeforeCall(date, projectId, elapsedTime, cardId, description, clockedOutsideGeofence, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, null);
        Type localVarReturnType = new TypeToken<TimesheetsCreateOrUpdateTimesheetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrUpdateTimesheetAsync(LocalDate date, Integer projectId, OffsetDateTime elapsedTime, Integer cardId, String description, Integer clockedOutsideGeofence, String projectManager, String categoryCode, String notes, String billable, String activity, String approvalRejectionReason, Double clockInLongitude, Double clockInLatitude, Double clockOutLongitude, Double clockOutLatitude, Integer projectAreaId, final ApiCallback<TimesheetsCreateOrUpdateTimesheetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateTimesheetValidateBeforeCall(date, projectId, elapsedTime, cardId, description, clockedOutsideGeofence, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);
        Type localVarReturnType = new TypeToken<TimesheetsCreateOrUpdateTimesheetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateTimesheetRequestBuilder {
        private final LocalDate date;
        private final Integer projectId;
        private final OffsetDateTime elapsedTime;
        private Integer cardId;
        private String description;
        private Integer clockedOutsideGeofence;
        private String projectManager;
        private String categoryCode;
        private String notes;
        private String billable;
        private String activity;
        private String approvalRejectionReason;
        private Double clockInLongitude;
        private Double clockInLatitude;
        private Double clockOutLongitude;
        private Double clockOutLatitude;
        private Integer projectAreaId;

        private CreateOrUpdateTimesheetRequestBuilder(LocalDate date, Integer projectId, OffsetDateTime elapsedTime) {
            this.date = date;
            this.projectId = projectId;
            this.elapsedTime = elapsedTime;
        }

        /**
         * Set cardId
         * @param cardId Timecard Id of timecard. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder cardId(Integer cardId) {
            this.cardId = cardId;
            return this;
        }
        
        /**
         * Set description
         * @param description Description of timecard. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set clockedOutsideGeofence
         * @param clockedOutsideGeofence Clocked in or clocked out outside geofence. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder clockedOutsideGeofence(Integer clockedOutsideGeofence) {
            this.clockedOutsideGeofence = clockedOutsideGeofence;
            return this;
        }
        
        /**
         * Set projectManager
         * @param projectManager Project Manager corresponding user. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder projectManager(String projectManager) {
            this.projectManager = projectManager;
            return this;
        }
        
        /**
         * Set categoryCode
         * @param categoryCode Category of timecard. Choose between [\&quot;Regular\&quot;, \&quot;Overtime\&quot;]. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder categoryCode(String categoryCode) {
            this.categoryCode = categoryCode;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set billable
         * @param billable Billable or non- billable timecard. Select &#39;Y&#39; for billable and &#39;N&#39; for non-billable (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder billable(String billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set activity
         * @param activity Activity type of timecard. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder activity(String activity) {
            this.activity = activity;
            return this;
        }
        
        /**
         * Set approvalRejectionReason
         * @param approvalRejectionReason Reason for approval rejection. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder approvalRejectionReason(String approvalRejectionReason) {
            this.approvalRejectionReason = approvalRejectionReason;
            return this;
        }
        
        /**
         * Set clockInLongitude
         * @param clockInLongitude Longitude value while clocking in. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder clockInLongitude(Double clockInLongitude) {
            this.clockInLongitude = clockInLongitude;
            return this;
        }
        
        /**
         * Set clockInLatitude
         * @param clockInLatitude Latitude value while clocking in. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder clockInLatitude(Double clockInLatitude) {
            this.clockInLatitude = clockInLatitude;
            return this;
        }
        
        /**
         * Set clockOutLongitude
         * @param clockOutLongitude Longitude value while clocking out. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder clockOutLongitude(Double clockOutLongitude) {
            this.clockOutLongitude = clockOutLongitude;
            return this;
        }
        
        /**
         * Set clockOutLatitude
         * @param clockOutLatitude Latitude value while clocking out. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder clockOutLatitude(Double clockOutLatitude) {
            this.clockOutLatitude = clockOutLatitude;
            return this;
        }
        
        /**
         * Set projectAreaId
         * @param projectAreaId Project area ID of project area. (optional)
         * @return CreateOrUpdateTimesheetRequestBuilder
         */
        public CreateOrUpdateTimesheetRequestBuilder projectAreaId(Integer projectAreaId) {
            this.projectAreaId = projectAreaId;
            return this;
        }
        
        /**
         * Build call for createOrUpdateTimesheet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOrUpdateTimesheetCall(date, projectId, elapsedTime, cardId, description, clockedOutsideGeofence, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);
        }


        /**
         * Execute createOrUpdateTimesheet request
         * @return TimesheetsCreateOrUpdateTimesheetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsCreateOrUpdateTimesheetResponse execute() throws ApiException {
            ApiResponse<TimesheetsCreateOrUpdateTimesheetResponse> localVarResp = createOrUpdateTimesheetWithHttpInfo(date, projectId, elapsedTime, cardId, description, clockedOutsideGeofence, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrUpdateTimesheet request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsCreateOrUpdateTimesheetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsCreateOrUpdateTimesheetResponse> executeWithHttpInfo() throws ApiException {
            return createOrUpdateTimesheetWithHttpInfo(date, projectId, elapsedTime, cardId, description, clockedOutsideGeofence, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId);
        }

        /**
         * Execute createOrUpdateTimesheet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsCreateOrUpdateTimesheetResponse> _callback) throws ApiException {
            return createOrUpdateTimesheetAsync(date, projectId, elapsedTime, cardId, description, clockedOutsideGeofence, projectManager, categoryCode, notes, billable, activity, approvalRejectionReason, clockInLongitude, clockInLatitude, clockOutLongitude, clockOutLatitude, projectAreaId, _callback);
        }
    }

    /**
     * Create/Update a timesheet.
     * Creates a new timesheet and update existing timesheet.
     * @param date Timesheet date. (required)
     * @param projectId Project ID of project. (required)
     * @param elapsedTime Elapsed Time of timecard. (required)
     * @return CreateOrUpdateTimesheetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateTimesheetRequestBuilder createOrUpdateTimesheet(LocalDate date, Integer projectId, OffsetDateTime elapsedTime) throws IllegalArgumentException {
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
        if (elapsedTime == null) throw new IllegalArgumentException("\"elapsedTime\" is required but got null");
        return new CreateOrUpdateTimesheetRequestBuilder(date, projectId, elapsedTime);
    }
    private okhttp3.Call deleteByTimesheetIdCall(Integer timesheetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timesheetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timesheetId", timesheetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByTimesheetIdValidateBeforeCall(Integer timesheetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timesheetId' is set
        if (timesheetId == null) {
            throw new ApiException("Missing the required parameter 'timesheetId' when calling deleteByTimesheetId(Async)");
        }

        return deleteByTimesheetIdCall(timesheetId, _callback);

    }


    private ApiResponse<TimesheetsDeleteByTimesheetIdResponse> deleteByTimesheetIdWithHttpInfo(Integer timesheetId) throws ApiException {
        okhttp3.Call localVarCall = deleteByTimesheetIdValidateBeforeCall(timesheetId, null);
        Type localVarReturnType = new TypeToken<TimesheetsDeleteByTimesheetIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByTimesheetIdAsync(Integer timesheetId, final ApiCallback<TimesheetsDeleteByTimesheetIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByTimesheetIdValidateBeforeCall(timesheetId, _callback);
        Type localVarReturnType = new TypeToken<TimesheetsDeleteByTimesheetIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByTimesheetIdRequestBuilder {
        private final Integer timesheetId;

        private DeleteByTimesheetIdRequestBuilder(Integer timesheetId) {
            this.timesheetId = timesheetId;
        }

        /**
         * Build call for deleteByTimesheetId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByTimesheetIdCall(timesheetId, _callback);
        }


        /**
         * Execute deleteByTimesheetId request
         * @return TimesheetsDeleteByTimesheetIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsDeleteByTimesheetIdResponse execute() throws ApiException {
            ApiResponse<TimesheetsDeleteByTimesheetIdResponse> localVarResp = deleteByTimesheetIdWithHttpInfo(timesheetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteByTimesheetId request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsDeleteByTimesheetIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsDeleteByTimesheetIdResponse> executeWithHttpInfo() throws ApiException {
            return deleteByTimesheetIdWithHttpInfo(timesheetId);
        }

        /**
         * Execute deleteByTimesheetId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsDeleteByTimesheetIdResponse> _callback) throws ApiException {
            return deleteByTimesheetIdAsync(timesheetId, _callback);
        }
    }

    /**
     * Delete a timesheet.
     * Deletes a timesheet by Timesheet ID.
     * @param timesheetId Timesheet ID of timesheet. (required)
     * @return DeleteByTimesheetIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByTimesheetIdRequestBuilder deleteByTimesheetId(Integer timesheetId) throws IllegalArgumentException {
        if (timesheetId == null) throw new IllegalArgumentException("\"timesheetId\" is required but got null");
        return new DeleteByTimesheetIdRequestBuilder(timesheetId);
    }
    private okhttp3.Call getActiveAllocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet/allocations/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveAllocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getActiveAllocationsCall(_callback);

    }


    private ApiResponse<TimesheetsGetActiveAllocationsResponse> getActiveAllocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getActiveAllocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TimesheetsGetActiveAllocationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getActiveAllocationsAsync(final ApiCallback<TimesheetsGetActiveAllocationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveAllocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TimesheetsGetActiveAllocationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetActiveAllocationsRequestBuilder {

        private GetActiveAllocationsRequestBuilder() {
        }

        /**
         * Build call for getActiveAllocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActiveAllocationsCall(_callback);
        }


        /**
         * Execute getActiveAllocations request
         * @return TimesheetsGetActiveAllocationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsGetActiveAllocationsResponse execute() throws ApiException {
            ApiResponse<TimesheetsGetActiveAllocationsResponse> localVarResp = getActiveAllocationsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getActiveAllocations request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsGetActiveAllocationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsGetActiveAllocationsResponse> executeWithHttpInfo() throws ApiException {
            return getActiveAllocationsWithHttpInfo();
        }

        /**
         * Execute getActiveAllocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsGetActiveAllocationsResponse> _callback) throws ApiException {
            return getActiveAllocationsAsync(_callback);
        }
    }

    /**
     * Retrieve my active allocations.
     * Retrieve list of active allocations of user.
     * @return GetActiveAllocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetActiveAllocationsRequestBuilder getActiveAllocations() throws IllegalArgumentException {
        return new GetActiveAllocationsRequestBuilder();
    }
    private okhttp3.Call getApprovalListCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet/approvals/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApprovalListValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getApprovalList(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getApprovalList(Async)");
        }

        return getApprovalListCall(startDate, endDate, _callback);

    }


    private ApiResponse<TimesheetsGetApprovalListResponse> getApprovalListWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = getApprovalListValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<TimesheetsGetApprovalListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApprovalListAsync(String startDate, String endDate, final ApiCallback<TimesheetsGetApprovalListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApprovalListValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<TimesheetsGetApprovalListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApprovalListRequestBuilder {
        private final String startDate;
        private final String endDate;

        private GetApprovalListRequestBuilder(String startDate, String endDate) {
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Build call for getApprovalList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApprovalListCall(startDate, endDate, _callback);
        }


        /**
         * Execute getApprovalList request
         * @return TimesheetsGetApprovalListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsGetApprovalListResponse execute() throws ApiException {
            ApiResponse<TimesheetsGetApprovalListResponse> localVarResp = getApprovalListWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApprovalList request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsGetApprovalListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsGetApprovalListResponse> executeWithHttpInfo() throws ApiException {
            return getApprovalListWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute getApprovalList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsGetApprovalListResponse> _callback) throws ApiException {
            return getApprovalListAsync(startDate, endDate, _callback);
        }
    }

    /**
     * Retrieve timesheet approvals.
     * Retrieve list of timesheet approvals on the basis of permission.
     * @param startDate Start date of the timesheet. (required)
     * @param endDate End date of the timesheet. (required)
     * @return GetApprovalListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetApprovalListRequestBuilder getApprovalList(String startDate, String endDate) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        return new GetApprovalListRequestBuilder(startDate, endDate);
    }
    private okhttp3.Call getByTimesheetIdCall(Integer timesheetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timesheetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timesheetId", timesheetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByTimesheetIdValidateBeforeCall(Integer timesheetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timesheetId' is set
        if (timesheetId == null) {
            throw new ApiException("Missing the required parameter 'timesheetId' when calling getByTimesheetId(Async)");
        }

        return getByTimesheetIdCall(timesheetId, _callback);

    }


    private ApiResponse<String> getByTimesheetIdWithHttpInfo(Integer timesheetId) throws ApiException {
        okhttp3.Call localVarCall = getByTimesheetIdValidateBeforeCall(timesheetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByTimesheetIdAsync(Integer timesheetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByTimesheetIdValidateBeforeCall(timesheetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByTimesheetIdRequestBuilder {
        private final Integer timesheetId;

        private GetByTimesheetIdRequestBuilder(Integer timesheetId) {
            this.timesheetId = timesheetId;
        }

        /**
         * Build call for getByTimesheetId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByTimesheetIdCall(timesheetId, _callback);
        }


        /**
         * Execute getByTimesheetId request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByTimesheetIdWithHttpInfo(timesheetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByTimesheetId request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByTimesheetIdWithHttpInfo(timesheetId);
        }

        /**
         * Execute getByTimesheetId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByTimesheetIdAsync(timesheetId, _callback);
        }
    }

    /**
     * Retrieve a timesheet by timesheet ID.
     * Retrieve a timesheet by timesheet ID.
     * @param timesheetId Tmesheet ID of timesheet. (required)
     * @return GetByTimesheetIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByTimesheetIdRequestBuilder getByTimesheetId(Integer timesheetId) throws IllegalArgumentException {
        if (timesheetId == null) throw new IllegalArgumentException("\"timesheetId\" is required but got null");
        return new GetByTimesheetIdRequestBuilder(timesheetId);
    }
    private okhttp3.Call getByUserIdCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByUserIdValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return getByUserIdCall(startDate, endDate, _callback);

    }


    private ApiResponse<String> getByUserIdWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = getByUserIdValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByUserIdAsync(String startDate, String endDate, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByUserIdValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByUserIdRequestBuilder {
        private String startDate;
        private String endDate;

        private GetByUserIdRequestBuilder() {
        }

        /**
         * Set startDate
         * @param startDate Start date of the timesheet. (optional)
         * @return GetByUserIdRequestBuilder
         */
        public GetByUserIdRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End date of the timesheet. (optional)
         * @return GetByUserIdRequestBuilder
         */
        public GetByUserIdRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for getByUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByUserIdCall(startDate, endDate, _callback);
        }


        /**
         * Execute getByUserId request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByUserIdWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByUserId request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByUserIdWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute getByUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByUserIdAsync(startDate, endDate, _callback);
        }
    }

    /**
     * Retrieve timesheets by User ID.
     * Retrieve a list of timesheets.
     * @return GetByUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByUserIdRequestBuilder getByUserId() throws IllegalArgumentException {
        return new GetByUserIdRequestBuilder();
    }
    private okhttp3.Call getDetailsByTimesheetIdCall(Integer timeSheetId, Boolean flatcustomfields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheets/details/{timeSheetId}"
            .replace("{" + "timeSheetId" + "}", localVarApiClient.escapeString(timeSheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flatcustomfields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flatcustomfields", flatcustomfields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsByTimesheetIdValidateBeforeCall(Integer timeSheetId, Boolean flatcustomfields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeSheetId' is set
        if (timeSheetId == null) {
            throw new ApiException("Missing the required parameter 'timeSheetId' when calling getDetailsByTimesheetId(Async)");
        }

        return getDetailsByTimesheetIdCall(timeSheetId, flatcustomfields, _callback);

    }


    private ApiResponse<String> getDetailsByTimesheetIdWithHttpInfo(Integer timeSheetId, Boolean flatcustomfields) throws ApiException {
        okhttp3.Call localVarCall = getDetailsByTimesheetIdValidateBeforeCall(timeSheetId, flatcustomfields, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsByTimesheetIdAsync(Integer timeSheetId, Boolean flatcustomfields, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsByTimesheetIdValidateBeforeCall(timeSheetId, flatcustomfields, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsByTimesheetIdRequestBuilder {
        private final Integer timeSheetId;
        private Boolean flatcustomfields;

        private GetDetailsByTimesheetIdRequestBuilder(Integer timeSheetId) {
            this.timeSheetId = timeSheetId;
        }

        /**
         * Set flatcustomfields
         * @param flatcustomfields  (optional)
         * @return GetDetailsByTimesheetIdRequestBuilder
         */
        public GetDetailsByTimesheetIdRequestBuilder flatcustomfields(Boolean flatcustomfields) {
            this.flatcustomfields = flatcustomfields;
            return this;
        }
        
        /**
         * Build call for getDetailsByTimesheetId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsByTimesheetIdCall(timeSheetId, flatcustomfields, _callback);
        }


        /**
         * Execute getDetailsByTimesheetId request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getDetailsByTimesheetIdWithHttpInfo(timeSheetId, flatcustomfields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailsByTimesheetId request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getDetailsByTimesheetIdWithHttpInfo(timeSheetId, flatcustomfields);
        }

        /**
         * Execute getDetailsByTimesheetId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getDetailsByTimesheetIdAsync(timeSheetId, flatcustomfields, _callback);
        }
    }

    /**
     * Retrieve timesheet details by Timesheet ID.
     * Retrieve timesheet details by Timesheet ID.
     * @param timeSheetId Timesheet ID of timesheet. (required)
     * @return GetDetailsByTimesheetIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsByTimesheetIdRequestBuilder getDetailsByTimesheetId(Integer timeSheetId) throws IllegalArgumentException {
        if (timeSheetId == null) throw new IllegalArgumentException("\"timeSheetId\" is required but got null");
        return new GetDetailsByTimesheetIdRequestBuilder(timeSheetId);
    }
    private okhttp3.Call getPreferencesByCidCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet/preferences/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPreferencesByCidValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPreferencesByCidCall(_callback);

    }


    private ApiResponse<TimesheetsGetPreferencesByCidResponse> getPreferencesByCidWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPreferencesByCidValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TimesheetsGetPreferencesByCidResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPreferencesByCidAsync(final ApiCallback<TimesheetsGetPreferencesByCidResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPreferencesByCidValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TimesheetsGetPreferencesByCidResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPreferencesByCidRequestBuilder {

        private GetPreferencesByCidRequestBuilder() {
        }

        /**
         * Build call for getPreferencesByCid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPreferencesByCidCall(_callback);
        }


        /**
         * Execute getPreferencesByCid request
         * @return TimesheetsGetPreferencesByCidResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsGetPreferencesByCidResponse execute() throws ApiException {
            ApiResponse<TimesheetsGetPreferencesByCidResponse> localVarResp = getPreferencesByCidWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPreferencesByCid request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsGetPreferencesByCidResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsGetPreferencesByCidResponse> executeWithHttpInfo() throws ApiException {
            return getPreferencesByCidWithHttpInfo();
        }

        /**
         * Execute getPreferencesByCid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsGetPreferencesByCidResponse> _callback) throws ApiException {
            return getPreferencesByCidAsync(_callback);
        }
    }

    /**
     * Retrieve my timesheet preferences.
     * Retrieve list of timesheet preferences based in cid.
     * @return GetPreferencesByCidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPreferencesByCidRequestBuilder getPreferencesByCid() throws IllegalArgumentException {
        return new GetPreferencesByCidRequestBuilder();
    }
    private okhttp3.Call getTimecardsByTimesheetIdCall(LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timecards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimecardsByTimesheetIdValidateBeforeCall(LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getTimecardsByTimesheetId(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getTimecardsByTimesheetId(Async)");
        }

        return getTimecardsByTimesheetIdCall(startDate, endDate, _callback);

    }


    private ApiResponse<String> getTimecardsByTimesheetIdWithHttpInfo(LocalDate startDate, LocalDate endDate) throws ApiException {
        okhttp3.Call localVarCall = getTimecardsByTimesheetIdValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimecardsByTimesheetIdAsync(LocalDate startDate, LocalDate endDate, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimecardsByTimesheetIdValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimecardsByTimesheetIdRequestBuilder {
        private final LocalDate startDate;
        private final LocalDate endDate;

        private GetTimecardsByTimesheetIdRequestBuilder(LocalDate startDate, LocalDate endDate) {
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Build call for getTimecardsByTimesheetId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimecardsByTimesheetIdCall(startDate, endDate, _callback);
        }


        /**
         * Execute getTimecardsByTimesheetId request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getTimecardsByTimesheetIdWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimecardsByTimesheetId request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getTimecardsByTimesheetIdWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute getTimecardsByTimesheetId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getTimecardsByTimesheetIdAsync(startDate, endDate, _callback);
        }
    }

    /**
     * Retrieve timecards by Timesheet ID.
     * Retrieve a list of timecards.
     * @param startDate Start date of the timesheet. (required)
     * @param endDate End date of the timesheet. (required)
     * @return GetTimecardsByTimesheetIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetTimecardsByTimesheetIdRequestBuilder getTimecardsByTimesheetId(LocalDate startDate, LocalDate endDate) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        return new GetTimecardsByTimesheetIdRequestBuilder(startDate, endDate);
    }
    private okhttp3.Call listActivityTypesByCidCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet/activitytype/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActivityTypesByCidValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listActivityTypesByCidCall(_callback);

    }


    private ApiResponse<TimesheetsListActivityTypesByCidResponse> listActivityTypesByCidWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listActivityTypesByCidValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TimesheetsListActivityTypesByCidResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listActivityTypesByCidAsync(final ApiCallback<TimesheetsListActivityTypesByCidResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActivityTypesByCidValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TimesheetsListActivityTypesByCidResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListActivityTypesByCidRequestBuilder {

        private ListActivityTypesByCidRequestBuilder() {
        }

        /**
         * Build call for listActivityTypesByCid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listActivityTypesByCidCall(_callback);
        }


        /**
         * Execute listActivityTypesByCid request
         * @return TimesheetsListActivityTypesByCidResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsListActivityTypesByCidResponse execute() throws ApiException {
            ApiResponse<TimesheetsListActivityTypesByCidResponse> localVarResp = listActivityTypesByCidWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listActivityTypesByCid request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsListActivityTypesByCidResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsListActivityTypesByCidResponse> executeWithHttpInfo() throws ApiException {
            return listActivityTypesByCidWithHttpInfo();
        }

        /**
         * Execute listActivityTypesByCid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsListActivityTypesByCidResponse> _callback) throws ApiException {
            return listActivityTypesByCidAsync(_callback);
        }
    }

    /**
     * Retrieve list of activity types based on cid.
     * Retrieve list of activity types based on cid.
     * @return ListActivityTypesByCidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListActivityTypesByCidRequestBuilder listActivityTypesByCid() throws IllegalArgumentException {
        return new ListActivityTypesByCidRequestBuilder();
    }
    private okhttp3.Call updateStatusByTimesheetIdCall(Integer timesheetId, String status, String comments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timesheet/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timesheetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timesheetId", timesheetId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (comments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comments", comments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusByTimesheetIdValidateBeforeCall(Integer timesheetId, String status, String comments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timesheetId' is set
        if (timesheetId == null) {
            throw new ApiException("Missing the required parameter 'timesheetId' when calling updateStatusByTimesheetId(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateStatusByTimesheetId(Async)");
        }

        return updateStatusByTimesheetIdCall(timesheetId, status, comments, _callback);

    }


    private ApiResponse<TimesheetsUpdateStatusByTimesheetIdResponse> updateStatusByTimesheetIdWithHttpInfo(Integer timesheetId, String status, String comments) throws ApiException {
        okhttp3.Call localVarCall = updateStatusByTimesheetIdValidateBeforeCall(timesheetId, status, comments, null);
        Type localVarReturnType = new TypeToken<TimesheetsUpdateStatusByTimesheetIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStatusByTimesheetIdAsync(Integer timesheetId, String status, String comments, final ApiCallback<TimesheetsUpdateStatusByTimesheetIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusByTimesheetIdValidateBeforeCall(timesheetId, status, comments, _callback);
        Type localVarReturnType = new TypeToken<TimesheetsUpdateStatusByTimesheetIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStatusByTimesheetIdRequestBuilder {
        private final Integer timesheetId;
        private final String status;
        private String comments;

        private UpdateStatusByTimesheetIdRequestBuilder(Integer timesheetId, String status) {
            this.timesheetId = timesheetId;
            this.status = status;
        }

        /**
         * Set comments
         * @param comments Comments (optional)
         * @return UpdateStatusByTimesheetIdRequestBuilder
         */
        public UpdateStatusByTimesheetIdRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Build call for updateStatusByTimesheetId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateStatusByTimesheetIdCall(timesheetId, status, comments, _callback);
        }


        /**
         * Execute updateStatusByTimesheetId request
         * @return TimesheetsUpdateStatusByTimesheetIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetsUpdateStatusByTimesheetIdResponse execute() throws ApiException {
            ApiResponse<TimesheetsUpdateStatusByTimesheetIdResponse> localVarResp = updateStatusByTimesheetIdWithHttpInfo(timesheetId, status, comments);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStatusByTimesheetId request with HTTP info returned
         * @return ApiResponse&lt;TimesheetsUpdateStatusByTimesheetIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetsUpdateStatusByTimesheetIdResponse> executeWithHttpInfo() throws ApiException {
            return updateStatusByTimesheetIdWithHttpInfo(timesheetId, status, comments);
        }

        /**
         * Execute updateStatusByTimesheetId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetsUpdateStatusByTimesheetIdResponse> _callback) throws ApiException {
            return updateStatusByTimesheetIdAsync(timesheetId, status, comments, _callback);
        }
    }

    /**
     * Update timesheet status by Timesheet ID.
     * Update the timesheet status (submit, approve, reject) corresponding to supplied Timesheet ID.
     * @param timesheetId Timesheet ID of the timesheet. (required)
     * @param status Status of timecard. Choose between [\&quot;PD-Pending for Approval\&quot;, \&quot;PAP-Partially Approved\&quot;, \&quot;AP-Fully Approved\&quot;,\&quot;NEW-New Timesheet\&quot;,\&quot;RJ-Rejected\&quot;]. (required)
     * @return UpdateStatusByTimesheetIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusByTimesheetIdRequestBuilder updateStatusByTimesheetId(Integer timesheetId, String status) throws IllegalArgumentException {
        if (timesheetId == null) throw new IllegalArgumentException("\"timesheetId\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new UpdateStatusByTimesheetIdRequestBuilder(timesheetId, status);
    }
}
