/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CandidatesExtractPdfResumeRequest;
import com.konfigthis.client.model.CandidatesExtractPdfResumeResponse;
import com.konfigthis.client.model.CandidatesGetBasicDetailsResponse;
import com.konfigthis.client.model.CandidatesGetCandidateDetailByRecruitidResponse;
import com.konfigthis.client.model.CandidatesGetResponse;
import com.konfigthis.client.model.CandidatesSubmitNewCandidateResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CandidatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CandidatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CandidatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call extractPdfResumeCall(CandidatesExtractPdfResumeRequest candidatesExtractPdfResumeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = candidatesExtractPdfResumeRequest;

        // create path and map variables
        String localVarPath = "/resume";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractPdfResumeValidateBeforeCall(CandidatesExtractPdfResumeRequest candidatesExtractPdfResumeRequest, final ApiCallback _callback) throws ApiException {
        return extractPdfResumeCall(candidatesExtractPdfResumeRequest, _callback);

    }


    private ApiResponse<CandidatesExtractPdfResumeResponse> extractPdfResumeWithHttpInfo(CandidatesExtractPdfResumeRequest candidatesExtractPdfResumeRequest) throws ApiException {
        okhttp3.Call localVarCall = extractPdfResumeValidateBeforeCall(candidatesExtractPdfResumeRequest, null);
        Type localVarReturnType = new TypeToken<CandidatesExtractPdfResumeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call extractPdfResumeAsync(CandidatesExtractPdfResumeRequest candidatesExtractPdfResumeRequest, final ApiCallback<CandidatesExtractPdfResumeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractPdfResumeValidateBeforeCall(candidatesExtractPdfResumeRequest, _callback);
        Type localVarReturnType = new TypeToken<CandidatesExtractPdfResumeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExtractPdfResumeRequestBuilder {
        private final File _file;

        private ExtractPdfResumeRequestBuilder(File _file) {
            this._file = _file;
        }

        /**
         * Build call for extractPdfResume
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CandidatesExtractPdfResumeRequest candidatesExtractPdfResumeRequest = buildBodyParams();
            return extractPdfResumeCall(candidatesExtractPdfResumeRequest, _callback);
        }

        private CandidatesExtractPdfResumeRequest buildBodyParams() {
            CandidatesExtractPdfResumeRequest candidatesExtractPdfResumeRequest = new CandidatesExtractPdfResumeRequest();
            candidatesExtractPdfResumeRequest._file(this._file);
            return candidatesExtractPdfResumeRequest;
        }

        /**
         * Execute extractPdfResume request
         * @return CandidatesExtractPdfResumeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CandidatesExtractPdfResumeResponse execute() throws ApiException {
            CandidatesExtractPdfResumeRequest candidatesExtractPdfResumeRequest = buildBodyParams();
            ApiResponse<CandidatesExtractPdfResumeResponse> localVarResp = extractPdfResumeWithHttpInfo(candidatesExtractPdfResumeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute extractPdfResume request with HTTP info returned
         * @return ApiResponse&lt;CandidatesExtractPdfResumeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CandidatesExtractPdfResumeResponse> executeWithHttpInfo() throws ApiException {
            CandidatesExtractPdfResumeRequest candidatesExtractPdfResumeRequest = buildBodyParams();
            return extractPdfResumeWithHttpInfo(candidatesExtractPdfResumeRequest);
        }

        /**
         * Execute extractPdfResume request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CandidatesExtractPdfResumeResponse> _callback) throws ApiException {
            CandidatesExtractPdfResumeRequest candidatesExtractPdfResumeRequest = buildBodyParams();
            return extractPdfResumeAsync(candidatesExtractPdfResumeRequest, _callback);
        }
    }

    /**
     * Create a candidate from pdf resume
     * 
     * @return ExtractPdfResumeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ExtractPdfResumeRequestBuilder extractPdfResume(File _file) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new ExtractPdfResumeRequestBuilder(_file);
    }
    private okhttp3.Call getCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCall(_callback);

    }


    private ApiResponse<CandidatesGetResponse> getWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CandidatesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(final ApiCallback<CandidatesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CandidatesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {

        private GetRequestBuilder() {
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(_callback);
        }


        /**
         * Execute get request
         * @return CandidatesGetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CandidatesGetResponse execute() throws ApiException {
            ApiResponse<CandidatesGetResponse> localVarResp = getWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;CandidatesGetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CandidatesGetResponse> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo();
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CandidatesGetResponse> _callback) throws ApiException {
            return getAsync(_callback);
        }
    }

    /**
     * Retrieve candidates
     * 
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get() throws IllegalArgumentException {
        return new GetRequestBuilder();
    }
    private okhttp3.Call getBasicDetailsCall(Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasicDetailsValidateBeforeCall(Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return getBasicDetailsCall(page, pageSize, search, _callback);

    }


    private ApiResponse<CandidatesGetBasicDetailsResponse> getBasicDetailsWithHttpInfo(Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = getBasicDetailsValidateBeforeCall(page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<CandidatesGetBasicDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBasicDetailsAsync(Integer page, Integer pageSize, String search, final ApiCallback<CandidatesGetBasicDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasicDetailsValidateBeforeCall(page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<CandidatesGetBasicDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBasicDetailsRequestBuilder {
        private Integer page;
        private Integer pageSize;
        private String search;

        private GetBasicDetailsRequestBuilder() {
        }

        /**
         * Set page
         * @param page Page number. (optional, default to 0)
         * @return GetBasicDetailsRequestBuilder
         */
        public GetBasicDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of candidates per page. (optional, default to 20)
         * @return GetBasicDetailsRequestBuilder
         */
        public GetBasicDetailsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search  (optional)
         * @return GetBasicDetailsRequestBuilder
         */
        public GetBasicDetailsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for getBasicDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBasicDetailsCall(page, pageSize, search, _callback);
        }


        /**
         * Execute getBasicDetails request
         * @return CandidatesGetBasicDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CandidatesGetBasicDetailsResponse execute() throws ApiException {
            ApiResponse<CandidatesGetBasicDetailsResponse> localVarResp = getBasicDetailsWithHttpInfo(page, pageSize, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBasicDetails request with HTTP info returned
         * @return ApiResponse&lt;CandidatesGetBasicDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CandidatesGetBasicDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getBasicDetailsWithHttpInfo(page, pageSize, search);
        }

        /**
         * Execute getBasicDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CandidatesGetBasicDetailsResponse> _callback) throws ApiException {
            return getBasicDetailsAsync(page, pageSize, search, _callback);
        }
    }

    /**
     * Retrieve candidates with basic details
     * 
     * @return GetBasicDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetBasicDetailsRequestBuilder getBasicDetails() throws IllegalArgumentException {
        return new GetBasicDetailsRequestBuilder();
    }
    private okhttp3.Call getCandidateDetailByRecruitidCall(Integer recruitid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/detail/{recruitid}"
            .replace("{" + "recruitid" + "}", localVarApiClient.escapeString(recruitid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCandidateDetailByRecruitidValidateBeforeCall(Integer recruitid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recruitid' is set
        if (recruitid == null) {
            throw new ApiException("Missing the required parameter 'recruitid' when calling getCandidateDetailByRecruitid(Async)");
        }

        return getCandidateDetailByRecruitidCall(recruitid, _callback);

    }


    private ApiResponse<CandidatesGetCandidateDetailByRecruitidResponse> getCandidateDetailByRecruitidWithHttpInfo(Integer recruitid) throws ApiException {
        okhttp3.Call localVarCall = getCandidateDetailByRecruitidValidateBeforeCall(recruitid, null);
        Type localVarReturnType = new TypeToken<CandidatesGetCandidateDetailByRecruitidResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCandidateDetailByRecruitidAsync(Integer recruitid, final ApiCallback<CandidatesGetCandidateDetailByRecruitidResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCandidateDetailByRecruitidValidateBeforeCall(recruitid, _callback);
        Type localVarReturnType = new TypeToken<CandidatesGetCandidateDetailByRecruitidResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCandidateDetailByRecruitidRequestBuilder {
        private final Integer recruitid;

        private GetCandidateDetailByRecruitidRequestBuilder(Integer recruitid) {
            this.recruitid = recruitid;
        }

        /**
         * Build call for getCandidateDetailByRecruitid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCandidateDetailByRecruitidCall(recruitid, _callback);
        }


        /**
         * Execute getCandidateDetailByRecruitid request
         * @return CandidatesGetCandidateDetailByRecruitidResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CandidatesGetCandidateDetailByRecruitidResponse execute() throws ApiException {
            ApiResponse<CandidatesGetCandidateDetailByRecruitidResponse> localVarResp = getCandidateDetailByRecruitidWithHttpInfo(recruitid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCandidateDetailByRecruitid request with HTTP info returned
         * @return ApiResponse&lt;CandidatesGetCandidateDetailByRecruitidResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CandidatesGetCandidateDetailByRecruitidResponse> executeWithHttpInfo() throws ApiException {
            return getCandidateDetailByRecruitidWithHttpInfo(recruitid);
        }

        /**
         * Execute getCandidateDetailByRecruitid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CandidatesGetCandidateDetailByRecruitidResponse> _callback) throws ApiException {
            return getCandidateDetailByRecruitidAsync(recruitid, _callback);
        }
    }

    /**
     * Retrieve the candidate detail by recruitid
     * 
     * @param recruitid The ID of the recruiter. (required)
     * @return GetCandidateDetailByRecruitidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCandidateDetailByRecruitidRequestBuilder getCandidateDetailByRecruitid(Integer recruitid) throws IllegalArgumentException {
        if (recruitid == null) throw new IllegalArgumentException("\"recruitid\" is required but got null");
        return new GetCandidateDetailByRecruitidRequestBuilder(recruitid);
    }
    private okhttp3.Call submitNewCandidateCall(String name, String email, String isNewCand, Integer phone, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (isNewCand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isNewCand", isNewCand));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitNewCandidateValidateBeforeCall(String name, String email, String isNewCand, Integer phone, String source, final ApiCallback _callback) throws ApiException {
        return submitNewCandidateCall(name, email, isNewCand, phone, source, _callback);

    }


    private ApiResponse<CandidatesSubmitNewCandidateResponse> submitNewCandidateWithHttpInfo(String name, String email, String isNewCand, Integer phone, String source) throws ApiException {
        okhttp3.Call localVarCall = submitNewCandidateValidateBeforeCall(name, email, isNewCand, phone, source, null);
        Type localVarReturnType = new TypeToken<CandidatesSubmitNewCandidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitNewCandidateAsync(String name, String email, String isNewCand, Integer phone, String source, final ApiCallback<CandidatesSubmitNewCandidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitNewCandidateValidateBeforeCall(name, email, isNewCand, phone, source, _callback);
        Type localVarReturnType = new TypeToken<CandidatesSubmitNewCandidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitNewCandidateRequestBuilder {
        private String name;
        private String email;
        private String isNewCand;
        private Integer phone;
        private String source;

        private SubmitNewCandidateRequestBuilder() {
        }

        /**
         * Set name
         * @param name Name of the candidate. (optional)
         * @return SubmitNewCandidateRequestBuilder
         */
        public SubmitNewCandidateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set email
         * @param email Email ID of the candidate. (optional)
         * @return SubmitNewCandidateRequestBuilder
         */
        public SubmitNewCandidateRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set isNewCand
         * @param isNewCand Is this new candidate? (optional)
         * @return SubmitNewCandidateRequestBuilder
         */
        public SubmitNewCandidateRequestBuilder isNewCand(String isNewCand) {
            this.isNewCand = isNewCand;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Phone number of the candidate. (optional)
         * @return SubmitNewCandidateRequestBuilder
         */
        public SubmitNewCandidateRequestBuilder phone(Integer phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set source
         * @param source The source from which the candidate is being created. (optional, default to API)
         * @return SubmitNewCandidateRequestBuilder
         */
        public SubmitNewCandidateRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Build call for submitNewCandidate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return submitNewCandidateCall(name, email, isNewCand, phone, source, _callback);
        }


        /**
         * Execute submitNewCandidate request
         * @return CandidatesSubmitNewCandidateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public CandidatesSubmitNewCandidateResponse execute() throws ApiException {
            ApiResponse<CandidatesSubmitNewCandidateResponse> localVarResp = submitNewCandidateWithHttpInfo(name, email, isNewCand, phone, source);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitNewCandidate request with HTTP info returned
         * @return ApiResponse&lt;CandidatesSubmitNewCandidateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CandidatesSubmitNewCandidateResponse> executeWithHttpInfo() throws ApiException {
            return submitNewCandidateWithHttpInfo(name, email, isNewCand, phone, source);
        }

        /**
         * Execute submitNewCandidate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CandidatesSubmitNewCandidateResponse> _callback) throws ApiException {
            return submitNewCandidateAsync(name, email, isNewCand, phone, source, _callback);
        }
    }

    /**
     * Create new candidate
     * 
     * @return SubmitNewCandidateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public SubmitNewCandidateRequestBuilder submitNewCandidate() throws IllegalArgumentException {
        return new SubmitNewCandidateRequestBuilder();
    }
}
