/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LeaveModel;
import com.konfigthis.client.model.LeavesAddPtoBalanceRequest;
import java.time.LocalDate;
import com.konfigthis.client.model.PtoPolicyModel;
import com.konfigthis.client.model.UserModel;
import com.konfigthis.client.model.UserViewModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LeavesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LeavesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LeavesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addPtoBalanceCall(LeavesAddPtoBalanceRequest leavesAddPtoBalanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leavesAddPtoBalanceRequest;

        // create path and map variables
        String localVarPath = "/api/userpto/balance/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPtoBalanceValidateBeforeCall(LeavesAddPtoBalanceRequest leavesAddPtoBalanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leavesAddPtoBalanceRequest' is set
        if (leavesAddPtoBalanceRequest == null) {
            throw new ApiException("Missing the required parameter 'leavesAddPtoBalanceRequest' when calling addPtoBalance(Async)");
        }

        return addPtoBalanceCall(leavesAddPtoBalanceRequest, _callback);

    }


    private ApiResponse<String> addPtoBalanceWithHttpInfo(LeavesAddPtoBalanceRequest leavesAddPtoBalanceRequest) throws ApiException {
        okhttp3.Call localVarCall = addPtoBalanceValidateBeforeCall(leavesAddPtoBalanceRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPtoBalanceAsync(LeavesAddPtoBalanceRequest leavesAddPtoBalanceRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPtoBalanceValidateBeforeCall(leavesAddPtoBalanceRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPtoBalanceRequestBuilder {
        private final String ptobalances;

        private AddPtoBalanceRequestBuilder(String ptobalances) {
            this.ptobalances = ptobalances;
        }

        /**
         * Build call for addPtoBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeavesAddPtoBalanceRequest leavesAddPtoBalanceRequest = buildBodyParams();
            return addPtoBalanceCall(leavesAddPtoBalanceRequest, _callback);
        }

        private LeavesAddPtoBalanceRequest buildBodyParams() {
            LeavesAddPtoBalanceRequest leavesAddPtoBalanceRequest = new LeavesAddPtoBalanceRequest();
            leavesAddPtoBalanceRequest.ptobalances(this.ptobalances);
            return leavesAddPtoBalanceRequest;
        }

        /**
         * Execute addPtoBalance request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            LeavesAddPtoBalanceRequest leavesAddPtoBalanceRequest = buildBodyParams();
            ApiResponse<String> localVarResp = addPtoBalanceWithHttpInfo(leavesAddPtoBalanceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPtoBalance request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            LeavesAddPtoBalanceRequest leavesAddPtoBalanceRequest = buildBodyParams();
            return addPtoBalanceWithHttpInfo(leavesAddPtoBalanceRequest);
        }

        /**
         * Execute addPtoBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            LeavesAddPtoBalanceRequest leavesAddPtoBalanceRequest = buildBodyParams();
            return addPtoBalanceAsync(leavesAddPtoBalanceRequest, _callback);
        }
    }

    /**
     * Add PTO balance.
     * 
     * @param leavesAddPtoBalanceRequest ptoBalances (required)
     * @return AddPtoBalanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public AddPtoBalanceRequestBuilder addPtoBalance(String ptobalances) throws IllegalArgumentException {
        if (ptobalances == null) throw new IllegalArgumentException("\"ptobalances\" is required but got null");
            

        return new AddPtoBalanceRequestBuilder(ptobalances);
    }
    private okhttp3.Call createNewLeaveCall(LeaveModel leaveModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveModel;

        // create path and map variables
        String localVarPath = "/api/leaverequest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewLeaveValidateBeforeCall(LeaveModel leaveModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaveModel' is set
        if (leaveModel == null) {
            throw new ApiException("Missing the required parameter 'leaveModel' when calling createNewLeave(Async)");
        }

        return createNewLeaveCall(leaveModel, _callback);

    }


    private ApiResponse<String> createNewLeaveWithHttpInfo(LeaveModel leaveModel) throws ApiException {
        okhttp3.Call localVarCall = createNewLeaveValidateBeforeCall(leaveModel, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewLeaveAsync(LeaveModel leaveModel, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewLeaveValidateBeforeCall(leaveModel, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewLeaveRequestBuilder {
        private final LocalDate date;
        private String description;
        private UserViewModel createUserViewModel;
        private String endDateMeridiem;
        private String meridiem;
        private Integer numberOfDays;
        private PtoPolicyModel ptoPolicyModel;
        private Double totalLeaveDays;
        private Double totalLeaveHours;
        private UserModel userModel;

        private CreateNewLeaveRequestBuilder(LocalDate date) {
            this.date = date;
        }

        /**
         * Set description
         * @param description Description for the leave. (optional)
         * @return CreateNewLeaveRequestBuilder
         */
        public CreateNewLeaveRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set createUserViewModel
         * @param createUserViewModel  (optional)
         * @return CreateNewLeaveRequestBuilder
         */
        public CreateNewLeaveRequestBuilder createUserViewModel(UserViewModel createUserViewModel) {
            this.createUserViewModel = createUserViewModel;
            return this;
        }
        
        /**
         * Set endDateMeridiem
         * @param endDateMeridiem  (optional)
         * @return CreateNewLeaveRequestBuilder
         */
        public CreateNewLeaveRequestBuilder endDateMeridiem(String endDateMeridiem) {
            this.endDateMeridiem = endDateMeridiem;
            return this;
        }
        
        /**
         * Set meridiem
         * @param meridiem  (optional)
         * @return CreateNewLeaveRequestBuilder
         */
        public CreateNewLeaveRequestBuilder meridiem(String meridiem) {
            this.meridiem = meridiem;
            return this;
        }
        
        /**
         * Set numberOfDays
         * @param numberOfDays Number of days for which leave is requested. (optional)
         * @return CreateNewLeaveRequestBuilder
         */
        public CreateNewLeaveRequestBuilder numberOfDays(Integer numberOfDays) {
            this.numberOfDays = numberOfDays;
            return this;
        }
        
        /**
         * Set ptoPolicyModel
         * @param ptoPolicyModel  (optional)
         * @return CreateNewLeaveRequestBuilder
         */
        public CreateNewLeaveRequestBuilder ptoPolicyModel(PtoPolicyModel ptoPolicyModel) {
            this.ptoPolicyModel = ptoPolicyModel;
            return this;
        }
        
        /**
         * Set totalLeaveDays
         * @param totalLeaveDays Total days of leave. (optional)
         * @return CreateNewLeaveRequestBuilder
         */
        public CreateNewLeaveRequestBuilder totalLeaveDays(Double totalLeaveDays) {
            this.totalLeaveDays = totalLeaveDays;
            return this;
        }
        
        /**
         * Set totalLeaveHours
         * @param totalLeaveHours Total hours of leave. (optional)
         * @return CreateNewLeaveRequestBuilder
         */
        public CreateNewLeaveRequestBuilder totalLeaveHours(Double totalLeaveHours) {
            this.totalLeaveHours = totalLeaveHours;
            return this;
        }
        
        /**
         * Set userModel
         * @param userModel  (optional)
         * @return CreateNewLeaveRequestBuilder
         */
        public CreateNewLeaveRequestBuilder userModel(UserModel userModel) {
            this.userModel = userModel;
            return this;
        }
        
        /**
         * Build call for createNewLeave
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveModel leaveModel = buildBodyParams();
            return createNewLeaveCall(leaveModel, _callback);
        }

        private LeaveModel buildBodyParams() {
            LeaveModel leaveModel = new LeaveModel();
            leaveModel.description(this.description);
            leaveModel.createUserViewModel(this.createUserViewModel);
            leaveModel.date(this.date);
            leaveModel.endDateMeridiem(this.endDateMeridiem);
            leaveModel.meridiem(this.meridiem);
            leaveModel.numberOfDays(this.numberOfDays);
            leaveModel.ptoPolicyModel(this.ptoPolicyModel);
            leaveModel.totalLeaveDays(this.totalLeaveDays);
            leaveModel.totalLeaveHours(this.totalLeaveHours);
            leaveModel.userModel(this.userModel);
            return leaveModel;
        }

        /**
         * Execute createNewLeave request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            LeaveModel leaveModel = buildBodyParams();
            ApiResponse<String> localVarResp = createNewLeaveWithHttpInfo(leaveModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewLeave request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            LeaveModel leaveModel = buildBodyParams();
            return createNewLeaveWithHttpInfo(leaveModel);
        }

        /**
         * Execute createNewLeave request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            LeaveModel leaveModel = buildBodyParams();
            return createNewLeaveAsync(leaveModel, _callback);
        }
    }

    /**
     * Create a new leave.
     * 
     * @param leaveModel leaveModel (required)
     * @return CreateNewLeaveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewLeaveRequestBuilder createNewLeave(LocalDate date) throws IllegalArgumentException {
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new CreateNewLeaveRequestBuilder(date);
    }
    private okhttp3.Call getLeaveRequestsWithinDateRangeCall(LocalDate endDate, LocalDate startDate, Integer leaveUserid, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/leaverequests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (leaveUserid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaveUserid", leaveUserid));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLeaveRequestsWithinDateRangeValidateBeforeCall(LocalDate endDate, LocalDate startDate, Integer leaveUserid, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getLeaveRequestsWithinDateRange(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getLeaveRequestsWithinDateRange(Async)");
        }

        return getLeaveRequestsWithinDateRangeCall(endDate, startDate, leaveUserid, status, _callback);

    }


    private ApiResponse<String> getLeaveRequestsWithinDateRangeWithHttpInfo(LocalDate endDate, LocalDate startDate, Integer leaveUserid, String status) throws ApiException {
        okhttp3.Call localVarCall = getLeaveRequestsWithinDateRangeValidateBeforeCall(endDate, startDate, leaveUserid, status, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLeaveRequestsWithinDateRangeAsync(LocalDate endDate, LocalDate startDate, Integer leaveUserid, String status, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLeaveRequestsWithinDateRangeValidateBeforeCall(endDate, startDate, leaveUserid, status, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLeaveRequestsWithinDateRangeRequestBuilder {
        private final LocalDate endDate;
        private final LocalDate startDate;
        private Integer leaveUserid;
        private String status;

        private GetLeaveRequestsWithinDateRangeRequestBuilder(LocalDate endDate, LocalDate startDate) {
            this.endDate = endDate;
            this.startDate = startDate;
        }

        /**
         * Set leaveUserid
         * @param leaveUserid The userId for that leave. (optional, default to 0)
         * @return GetLeaveRequestsWithinDateRangeRequestBuilder
         */
        public GetLeaveRequestsWithinDateRangeRequestBuilder leaveUserid(Integer leaveUserid) {
            this.leaveUserid = leaveUserid;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of leave.   AP: Leave approved   WA: Leave is waiting for approval   RJ: Leave has been rejected   PAP: Leave is in a muti layer approval flow and has been partially approved   RCAL:  Leave was approved, taken, computed and then recalled  (optional, default to AP)
         * @return GetLeaveRequestsWithinDateRangeRequestBuilder
         */
        public GetLeaveRequestsWithinDateRangeRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for getLeaveRequestsWithinDateRange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLeaveRequestsWithinDateRangeCall(endDate, startDate, leaveUserid, status, _callback);
        }


        /**
         * Execute getLeaveRequestsWithinDateRange request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getLeaveRequestsWithinDateRangeWithHttpInfo(endDate, startDate, leaveUserid, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLeaveRequestsWithinDateRange request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getLeaveRequestsWithinDateRangeWithHttpInfo(endDate, startDate, leaveUserid, status);
        }

        /**
         * Execute getLeaveRequestsWithinDateRange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getLeaveRequestsWithinDateRangeAsync(endDate, startDate, leaveUserid, status, _callback);
        }
    }

    /**
     * Retrieve leave requests within a date range
     * 
     * @param endDate End date of the leave. (required)
     * @param startDate Start date of the leave. (required)
     * @return GetLeaveRequestsWithinDateRangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetLeaveRequestsWithinDateRangeRequestBuilder getLeaveRequestsWithinDateRange(LocalDate endDate, LocalDate startDate) throws IllegalArgumentException {
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        return new GetLeaveRequestsWithinDateRangeRequestBuilder(endDate, startDate);
    }
    private okhttp3.Call getLeavesBasedOnRoleCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/leaves";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLeavesBasedOnRoleValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLeavesBasedOnRoleCall(_callback);

    }


    private ApiResponse<String> getLeavesBasedOnRoleWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLeavesBasedOnRoleValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLeavesBasedOnRoleAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLeavesBasedOnRoleValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLeavesBasedOnRoleRequestBuilder {

        private GetLeavesBasedOnRoleRequestBuilder() {
        }

        /**
         * Build call for getLeavesBasedOnRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLeavesBasedOnRoleCall(_callback);
        }


        /**
         * Execute getLeavesBasedOnRole request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getLeavesBasedOnRoleWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLeavesBasedOnRole request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getLeavesBasedOnRoleWithHttpInfo();
        }

        /**
         * Execute getLeavesBasedOnRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getLeavesBasedOnRoleAsync(_callback);
        }
    }

    /**
     * Retrieve leaves for approval/rejection by filtering on basis of Role
     * 
     * @return GetLeavesBasedOnRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetLeavesBasedOnRoleRequestBuilder getLeavesBasedOnRole() throws IllegalArgumentException {
        return new GetLeavesBasedOnRoleRequestBuilder();
    }
    private okhttp3.Call getRemainingHoursCreditCall(LocalDate leaveDate, Integer leaveId, Integer leaveUserId, Integer ptoPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/leave/hours/credit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leaveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaveDate", leaveDate));
        }

        if (leaveId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaveId", leaveId));
        }

        if (leaveUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaveUserId", leaveUserId));
        }

        if (ptoPolicyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ptoPolicyId", ptoPolicyId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRemainingHoursCreditValidateBeforeCall(LocalDate leaveDate, Integer leaveId, Integer leaveUserId, Integer ptoPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaveDate' is set
        if (leaveDate == null) {
            throw new ApiException("Missing the required parameter 'leaveDate' when calling getRemainingHoursCredit(Async)");
        }

        // verify the required parameter 'leaveId' is set
        if (leaveId == null) {
            throw new ApiException("Missing the required parameter 'leaveId' when calling getRemainingHoursCredit(Async)");
        }

        // verify the required parameter 'leaveUserId' is set
        if (leaveUserId == null) {
            throw new ApiException("Missing the required parameter 'leaveUserId' when calling getRemainingHoursCredit(Async)");
        }

        // verify the required parameter 'ptoPolicyId' is set
        if (ptoPolicyId == null) {
            throw new ApiException("Missing the required parameter 'ptoPolicyId' when calling getRemainingHoursCredit(Async)");
        }

        return getRemainingHoursCreditCall(leaveDate, leaveId, leaveUserId, ptoPolicyId, _callback);

    }


    private ApiResponse<String> getRemainingHoursCreditWithHttpInfo(LocalDate leaveDate, Integer leaveId, Integer leaveUserId, Integer ptoPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getRemainingHoursCreditValidateBeforeCall(leaveDate, leaveId, leaveUserId, ptoPolicyId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRemainingHoursCreditAsync(LocalDate leaveDate, Integer leaveId, Integer leaveUserId, Integer ptoPolicyId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRemainingHoursCreditValidateBeforeCall(leaveDate, leaveId, leaveUserId, ptoPolicyId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRemainingHoursCreditRequestBuilder {
        private final LocalDate leaveDate;
        private final Integer leaveId;
        private final Integer leaveUserId;
        private final Integer ptoPolicyId;

        private GetRemainingHoursCreditRequestBuilder(LocalDate leaveDate, Integer leaveId, Integer leaveUserId, Integer ptoPolicyId) {
            this.leaveDate = leaveDate;
            this.leaveId = leaveId;
            this.leaveUserId = leaveUserId;
            this.ptoPolicyId = ptoPolicyId;
        }

        /**
         * Build call for getRemainingHoursCredit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRemainingHoursCreditCall(leaveDate, leaveId, leaveUserId, ptoPolicyId, _callback);
        }


        /**
         * Execute getRemainingHoursCredit request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getRemainingHoursCreditWithHttpInfo(leaveDate, leaveId, leaveUserId, ptoPolicyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRemainingHoursCredit request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getRemainingHoursCreditWithHttpInfo(leaveDate, leaveId, leaveUserId, ptoPolicyId);
        }

        /**
         * Execute getRemainingHoursCredit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getRemainingHoursCreditAsync(leaveDate, leaveId, leaveUserId, ptoPolicyId, _callback);
        }
    }

    /**
     * Retrieve remaining hours credit for leave policy
     * 
     * @param leaveDate The date of the leave. (required)
     * @param leaveId The Id of the leave. (required)
     * @param leaveUserId The userId for that leave. (required)
     * @param ptoPolicyId The Id of the ptoPolicy (required)
     * @return GetRemainingHoursCreditRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetRemainingHoursCreditRequestBuilder getRemainingHoursCredit(LocalDate leaveDate, Integer leaveId, Integer leaveUserId, Integer ptoPolicyId) throws IllegalArgumentException {
        if (leaveDate == null) throw new IllegalArgumentException("\"leaveDate\" is required but got null");
        if (leaveId == null) throw new IllegalArgumentException("\"leaveId\" is required but got null");
        if (leaveUserId == null) throw new IllegalArgumentException("\"leaveUserId\" is required but got null");
        if (ptoPolicyId == null) throw new IllegalArgumentException("\"ptoPolicyId\" is required but got null");
        return new GetRemainingHoursCreditRequestBuilder(leaveDate, leaveId, leaveUserId, ptoPolicyId);
    }
    private okhttp3.Call processLeaveByIdCall(Integer leaveId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/process/leave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leaveId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaveId", leaveId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processLeaveByIdValidateBeforeCall(Integer leaveId, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaveId' is set
        if (leaveId == null) {
            throw new ApiException("Missing the required parameter 'leaveId' when calling processLeaveById(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling processLeaveById(Async)");
        }

        return processLeaveByIdCall(leaveId, status, _callback);

    }


    private ApiResponse<String> processLeaveByIdWithHttpInfo(Integer leaveId, String status) throws ApiException {
        okhttp3.Call localVarCall = processLeaveByIdValidateBeforeCall(leaveId, status, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processLeaveByIdAsync(Integer leaveId, String status, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = processLeaveByIdValidateBeforeCall(leaveId, status, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessLeaveByIdRequestBuilder {
        private final Integer leaveId;
        private final String status;

        private ProcessLeaveByIdRequestBuilder(Integer leaveId, String status) {
            this.leaveId = leaveId;
            this.status = status;
        }

        /**
         * Build call for processLeaveById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return processLeaveByIdCall(leaveId, status, _callback);
        }


        /**
         * Execute processLeaveById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = processLeaveByIdWithHttpInfo(leaveId, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processLeaveById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return processLeaveByIdWithHttpInfo(leaveId, status);
        }

        /**
         * Execute processLeaveById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return processLeaveByIdAsync(leaveId, status, _callback);
        }
    }

    /**
     * Process the leave of a user by leave Id
     * 
     * @param leaveId The Id for the leave. (required)
     * @param status The status of leave.   AP: Leave approved   WA: Leave is waiting for approval   RJ: Leave has been rejected   PAP: Leave is in a muti layer approval flow and has been partially approved   RCAL:  Leave was approved, taken, computed and then recalled  (required)
     * @return ProcessLeaveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProcessLeaveByIdRequestBuilder processLeaveById(Integer leaveId, String status) throws IllegalArgumentException {
        if (leaveId == null) throw new IllegalArgumentException("\"leaveId\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new ProcessLeaveByIdRequestBuilder(leaveId, status);
    }
}
