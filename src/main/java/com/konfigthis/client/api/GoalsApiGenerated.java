/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GoalsDeleteGoalResponse;
import com.konfigthis.client.model.GoalsGetGoalResponse;
import com.konfigthis.client.model.GoalsGetUserGoalsResponse;
import java.time.LocalDate;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GoalsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GoalsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GoalsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewGoalCall(Integer additive, LocalDate begindate, Integer cid, String commentCrediteatets, String commentDescription, Integer companyGoal, Float completionRatio, Integer createUserId, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, OffsetDateTime crediteatets, Float currentValue, String description, String disposition, Float elapsedTimeRatio, Integer goalId, Float goalValue, Float goalWeightage, Boolean hasGoalApprovalPermission, Integer id, Float initialvalue, Boolean isForward, Integer lastUpdateUserId, Integer objectiveId, Integer parentGoalId, Float progressRatio, Integer projectid, Integer reviewUserId, String state, String status, String summary, LocalDate targetDate, String typecode, String uname, String units, Integer visibleToDirectReports, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (additive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additive", additive));
        }

        if (begindate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("begindate", begindate));
        }

        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (commentCrediteatets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commentCrediteatets", commentCrediteatets));
        }

        if (commentDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commentDescription", commentDescription));
        }

        if (companyGoal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyGoal", companyGoal));
        }

        if (completionRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completionRatio", completionRatio));
        }

        if (createUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createUserId", createUserId));
        }

        if (createtsDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.date", createtsDate));
        }

        if (createtsDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.day", createtsDay));
        }

        if (createtsHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.hours", createtsHours));
        }

        if (createtsMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.minutes", createtsMinutes));
        }

        if (createtsMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.month", createtsMonth));
        }

        if (createtsNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.nanos", createtsNanos));
        }

        if (createtsSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.seconds", createtsSeconds));
        }

        if (createtsTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.time", createtsTime));
        }

        if (createtsTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.timezoneOffset", createtsTimezoneOffset));
        }

        if (createtsYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.year", createtsYear));
        }

        if (crediteatets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("crediteatets", crediteatets));
        }

        if (currentValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentValue", currentValue));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (disposition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disposition", disposition));
        }

        if (elapsedTimeRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTimeRatio", elapsedTimeRatio));
        }

        if (goalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("goalId", goalId));
        }

        if (goalValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("goalValue", goalValue));
        }

        if (goalWeightage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("goalWeightage", goalWeightage));
        }

        if (hasGoalApprovalPermission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasGoalApprovalPermission", hasGoalApprovalPermission));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (initialvalue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initialvalue", initialvalue));
        }

        if (isForward != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isForward", isForward));
        }

        if (lastUpdateUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateUserId", lastUpdateUserId));
        }

        if (objectiveId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("objectiveId", objectiveId));
        }

        if (parentGoalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentGoalId", parentGoalId));
        }

        if (progressRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("progressRatio", progressRatio));
        }

        if (projectid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectid", projectid));
        }

        if (reviewUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reviewUserId", reviewUserId));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (summary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summary", summary));
        }

        if (targetDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetDate", targetDate));
        }

        if (typecode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typecode", typecode));
        }

        if (uname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uname", uname));
        }

        if (units != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("units", units));
        }

        if (visibleToDirectReports != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibleToDirectReports", visibleToDirectReports));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewGoalValidateBeforeCall(Integer additive, LocalDate begindate, Integer cid, String commentCrediteatets, String commentDescription, Integer companyGoal, Float completionRatio, Integer createUserId, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, OffsetDateTime crediteatets, Float currentValue, String description, String disposition, Float elapsedTimeRatio, Integer goalId, Float goalValue, Float goalWeightage, Boolean hasGoalApprovalPermission, Integer id, Float initialvalue, Boolean isForward, Integer lastUpdateUserId, Integer objectiveId, Integer parentGoalId, Float progressRatio, Integer projectid, Integer reviewUserId, String state, String status, String summary, LocalDate targetDate, String typecode, String uname, String units, Integer visibleToDirectReports, final ApiCallback _callback) throws ApiException {
        return createNewGoalCall(additive, begindate, cid, commentCrediteatets, commentDescription, companyGoal, completionRatio, createUserId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, crediteatets, currentValue, description, disposition, elapsedTimeRatio, goalId, goalValue, goalWeightage, hasGoalApprovalPermission, id, initialvalue, isForward, lastUpdateUserId, objectiveId, parentGoalId, progressRatio, projectid, reviewUserId, state, status, summary, targetDate, typecode, uname, units, visibleToDirectReports, _callback);

    }


    private ApiResponse<Object> createNewGoalWithHttpInfo(Integer additive, LocalDate begindate, Integer cid, String commentCrediteatets, String commentDescription, Integer companyGoal, Float completionRatio, Integer createUserId, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, OffsetDateTime crediteatets, Float currentValue, String description, String disposition, Float elapsedTimeRatio, Integer goalId, Float goalValue, Float goalWeightage, Boolean hasGoalApprovalPermission, Integer id, Float initialvalue, Boolean isForward, Integer lastUpdateUserId, Integer objectiveId, Integer parentGoalId, Float progressRatio, Integer projectid, Integer reviewUserId, String state, String status, String summary, LocalDate targetDate, String typecode, String uname, String units, Integer visibleToDirectReports) throws ApiException {
        okhttp3.Call localVarCall = createNewGoalValidateBeforeCall(additive, begindate, cid, commentCrediteatets, commentDescription, companyGoal, completionRatio, createUserId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, crediteatets, currentValue, description, disposition, elapsedTimeRatio, goalId, goalValue, goalWeightage, hasGoalApprovalPermission, id, initialvalue, isForward, lastUpdateUserId, objectiveId, parentGoalId, progressRatio, projectid, reviewUserId, state, status, summary, targetDate, typecode, uname, units, visibleToDirectReports, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewGoalAsync(Integer additive, LocalDate begindate, Integer cid, String commentCrediteatets, String commentDescription, Integer companyGoal, Float completionRatio, Integer createUserId, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, OffsetDateTime crediteatets, Float currentValue, String description, String disposition, Float elapsedTimeRatio, Integer goalId, Float goalValue, Float goalWeightage, Boolean hasGoalApprovalPermission, Integer id, Float initialvalue, Boolean isForward, Integer lastUpdateUserId, Integer objectiveId, Integer parentGoalId, Float progressRatio, Integer projectid, Integer reviewUserId, String state, String status, String summary, LocalDate targetDate, String typecode, String uname, String units, Integer visibleToDirectReports, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewGoalValidateBeforeCall(additive, begindate, cid, commentCrediteatets, commentDescription, companyGoal, completionRatio, createUserId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, crediteatets, currentValue, description, disposition, elapsedTimeRatio, goalId, goalValue, goalWeightage, hasGoalApprovalPermission, id, initialvalue, isForward, lastUpdateUserId, objectiveId, parentGoalId, progressRatio, projectid, reviewUserId, state, status, summary, targetDate, typecode, uname, units, visibleToDirectReports, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewGoalRequestBuilder {
        private Integer additive;
        private LocalDate begindate;
        private Integer cid;
        private String commentCrediteatets;
        private String commentDescription;
        private Integer companyGoal;
        private Float completionRatio;
        private Integer createUserId;
        private Integer createtsDate;
        private Integer createtsDay;
        private Integer createtsHours;
        private Integer createtsMinutes;
        private Integer createtsMonth;
        private Integer createtsNanos;
        private Integer createtsSeconds;
        private Long createtsTime;
        private Integer createtsTimezoneOffset;
        private Integer createtsYear;
        private OffsetDateTime crediteatets;
        private Float currentValue;
        private String description;
        private String disposition;
        private Float elapsedTimeRatio;
        private Integer goalId;
        private Float goalValue;
        private Float goalWeightage;
        private Boolean hasGoalApprovalPermission;
        private Integer id;
        private Float initialvalue;
        private Boolean isForward;
        private Integer lastUpdateUserId;
        private Integer objectiveId;
        private Integer parentGoalId;
        private Float progressRatio;
        private Integer projectid;
        private Integer reviewUserId;
        private String state;
        private String status;
        private String summary;
        private LocalDate targetDate;
        private String typecode;
        private String uname;
        private String units;
        private Integer visibleToDirectReports;

        private CreateNewGoalRequestBuilder() {
        }

        /**
         * Set additive
         * @param additive  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder additive(Integer additive) {
            this.additive = additive;
            return this;
        }
        
        /**
         * Set begindate
         * @param begindate  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder begindate(LocalDate begindate) {
            this.begindate = begindate;
            return this;
        }
        
        /**
         * Set cid
         * @param cid  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder cid(Integer cid) {
            this.cid = cid;
            return this;
        }
        
        /**
         * Set commentCrediteatets
         * @param commentCrediteatets  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder commentCrediteatets(String commentCrediteatets) {
            this.commentCrediteatets = commentCrediteatets;
            return this;
        }
        
        /**
         * Set commentDescription
         * @param commentDescription  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder commentDescription(String commentDescription) {
            this.commentDescription = commentDescription;
            return this;
        }
        
        /**
         * Set companyGoal
         * @param companyGoal  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder companyGoal(Integer companyGoal) {
            this.companyGoal = companyGoal;
            return this;
        }
        
        /**
         * Set completionRatio
         * @param completionRatio  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder completionRatio(Float completionRatio) {
            this.completionRatio = completionRatio;
            return this;
        }
        
        /**
         * Set createUserId
         * @param createUserId  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createUserId(Integer createUserId) {
            this.createUserId = createUserId;
            return this;
        }
        
        /**
         * Set createtsDate
         * @param createtsDate  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsDate(Integer createtsDate) {
            this.createtsDate = createtsDate;
            return this;
        }
        
        /**
         * Set createtsDay
         * @param createtsDay  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsDay(Integer createtsDay) {
            this.createtsDay = createtsDay;
            return this;
        }
        
        /**
         * Set createtsHours
         * @param createtsHours  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsHours(Integer createtsHours) {
            this.createtsHours = createtsHours;
            return this;
        }
        
        /**
         * Set createtsMinutes
         * @param createtsMinutes  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsMinutes(Integer createtsMinutes) {
            this.createtsMinutes = createtsMinutes;
            return this;
        }
        
        /**
         * Set createtsMonth
         * @param createtsMonth  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsMonth(Integer createtsMonth) {
            this.createtsMonth = createtsMonth;
            return this;
        }
        
        /**
         * Set createtsNanos
         * @param createtsNanos  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsNanos(Integer createtsNanos) {
            this.createtsNanos = createtsNanos;
            return this;
        }
        
        /**
         * Set createtsSeconds
         * @param createtsSeconds  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsSeconds(Integer createtsSeconds) {
            this.createtsSeconds = createtsSeconds;
            return this;
        }
        
        /**
         * Set createtsTime
         * @param createtsTime  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsTime(Long createtsTime) {
            this.createtsTime = createtsTime;
            return this;
        }
        
        /**
         * Set createtsTimezoneOffset
         * @param createtsTimezoneOffset  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsTimezoneOffset(Integer createtsTimezoneOffset) {
            this.createtsTimezoneOffset = createtsTimezoneOffset;
            return this;
        }
        
        /**
         * Set createtsYear
         * @param createtsYear  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder createtsYear(Integer createtsYear) {
            this.createtsYear = createtsYear;
            return this;
        }
        
        /**
         * Set crediteatets
         * @param crediteatets  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder crediteatets(OffsetDateTime crediteatets) {
            this.crediteatets = crediteatets;
            return this;
        }
        
        /**
         * Set currentValue
         * @param currentValue  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder currentValue(Float currentValue) {
            this.currentValue = currentValue;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set disposition
         * @param disposition  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder disposition(String disposition) {
            this.disposition = disposition;
            return this;
        }
        
        /**
         * Set elapsedTimeRatio
         * @param elapsedTimeRatio  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder elapsedTimeRatio(Float elapsedTimeRatio) {
            this.elapsedTimeRatio = elapsedTimeRatio;
            return this;
        }
        
        /**
         * Set goalId
         * @param goalId  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder goalId(Integer goalId) {
            this.goalId = goalId;
            return this;
        }
        
        /**
         * Set goalValue
         * @param goalValue  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder goalValue(Float goalValue) {
            this.goalValue = goalValue;
            return this;
        }
        
        /**
         * Set goalWeightage
         * @param goalWeightage  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder goalWeightage(Float goalWeightage) {
            this.goalWeightage = goalWeightage;
            return this;
        }
        
        /**
         * Set hasGoalApprovalPermission
         * @param hasGoalApprovalPermission  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder hasGoalApprovalPermission(Boolean hasGoalApprovalPermission) {
            this.hasGoalApprovalPermission = hasGoalApprovalPermission;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set initialvalue
         * @param initialvalue  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder initialvalue(Float initialvalue) {
            this.initialvalue = initialvalue;
            return this;
        }
        
        /**
         * Set isForward
         * @param isForward  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder isForward(Boolean isForward) {
            this.isForward = isForward;
            return this;
        }
        
        /**
         * Set lastUpdateUserId
         * @param lastUpdateUserId  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder lastUpdateUserId(Integer lastUpdateUserId) {
            this.lastUpdateUserId = lastUpdateUserId;
            return this;
        }
        
        /**
         * Set objectiveId
         * @param objectiveId  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder objectiveId(Integer objectiveId) {
            this.objectiveId = objectiveId;
            return this;
        }
        
        /**
         * Set parentGoalId
         * @param parentGoalId  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder parentGoalId(Integer parentGoalId) {
            this.parentGoalId = parentGoalId;
            return this;
        }
        
        /**
         * Set progressRatio
         * @param progressRatio  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder progressRatio(Float progressRatio) {
            this.progressRatio = progressRatio;
            return this;
        }
        
        /**
         * Set projectid
         * @param projectid  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder projectid(Integer projectid) {
            this.projectid = projectid;
            return this;
        }
        
        /**
         * Set reviewUserId
         * @param reviewUserId reviewUserId (optional, default to 0)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder reviewUserId(Integer reviewUserId) {
            this.reviewUserId = reviewUserId;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set summary
         * @param summary  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder summary(String summary) {
            this.summary = summary;
            return this;
        }
        
        /**
         * Set targetDate
         * @param targetDate  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder targetDate(LocalDate targetDate) {
            this.targetDate = targetDate;
            return this;
        }
        
        /**
         * Set typecode
         * @param typecode  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder typecode(String typecode) {
            this.typecode = typecode;
            return this;
        }
        
        /**
         * Set uname
         * @param uname  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder uname(String uname) {
            this.uname = uname;
            return this;
        }
        
        /**
         * Set units
         * @param units  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder units(String units) {
            this.units = units;
            return this;
        }
        
        /**
         * Set visibleToDirectReports
         * @param visibleToDirectReports  (optional)
         * @return CreateNewGoalRequestBuilder
         */
        public CreateNewGoalRequestBuilder visibleToDirectReports(Integer visibleToDirectReports) {
            this.visibleToDirectReports = visibleToDirectReports;
            return this;
        }
        
        /**
         * Build call for createNewGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewGoalCall(additive, begindate, cid, commentCrediteatets, commentDescription, companyGoal, completionRatio, createUserId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, crediteatets, currentValue, description, disposition, elapsedTimeRatio, goalId, goalValue, goalWeightage, hasGoalApprovalPermission, id, initialvalue, isForward, lastUpdateUserId, objectiveId, parentGoalId, progressRatio, projectid, reviewUserId, state, status, summary, targetDate, typecode, uname, units, visibleToDirectReports, _callback);
        }


        /**
         * Execute createNewGoal request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = createNewGoalWithHttpInfo(additive, begindate, cid, commentCrediteatets, commentDescription, companyGoal, completionRatio, createUserId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, crediteatets, currentValue, description, disposition, elapsedTimeRatio, goalId, goalValue, goalWeightage, hasGoalApprovalPermission, id, initialvalue, isForward, lastUpdateUserId, objectiveId, parentGoalId, progressRatio, projectid, reviewUserId, state, status, summary, targetDate, typecode, uname, units, visibleToDirectReports);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewGoal request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return createNewGoalWithHttpInfo(additive, begindate, cid, commentCrediteatets, commentDescription, companyGoal, completionRatio, createUserId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, crediteatets, currentValue, description, disposition, elapsedTimeRatio, goalId, goalValue, goalWeightage, hasGoalApprovalPermission, id, initialvalue, isForward, lastUpdateUserId, objectiveId, parentGoalId, progressRatio, projectid, reviewUserId, state, status, summary, targetDate, typecode, uname, units, visibleToDirectReports);
        }

        /**
         * Execute createNewGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return createNewGoalAsync(additive, begindate, cid, commentCrediteatets, commentDescription, companyGoal, completionRatio, createUserId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, crediteatets, currentValue, description, disposition, elapsedTimeRatio, goalId, goalValue, goalWeightage, hasGoalApprovalPermission, id, initialvalue, isForward, lastUpdateUserId, objectiveId, parentGoalId, progressRatio, projectid, reviewUserId, state, status, summary, targetDate, typecode, uname, units, visibleToDirectReports, _callback);
        }
    }

    /**
     * Create new goal
     * 
     * @return CreateNewGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewGoalRequestBuilder createNewGoal() throws IllegalArgumentException {
        return new CreateNewGoalRequestBuilder();
    }
    private okhttp3.Call deleteGoalCall(Integer goalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletegoal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (goalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("goalId", goalId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGoalValidateBeforeCall(Integer goalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling deleteGoal(Async)");
        }

        return deleteGoalCall(goalId, _callback);

    }


    private ApiResponse<GoalsDeleteGoalResponse> deleteGoalWithHttpInfo(Integer goalId) throws ApiException {
        okhttp3.Call localVarCall = deleteGoalValidateBeforeCall(goalId, null);
        Type localVarReturnType = new TypeToken<GoalsDeleteGoalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteGoalAsync(Integer goalId, final ApiCallback<GoalsDeleteGoalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGoalValidateBeforeCall(goalId, _callback);
        Type localVarReturnType = new TypeToken<GoalsDeleteGoalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteGoalRequestBuilder {
        private final Integer goalId;

        private DeleteGoalRequestBuilder(Integer goalId) {
            this.goalId = goalId;
        }

        /**
         * Build call for deleteGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteGoalCall(goalId, _callback);
        }


        /**
         * Execute deleteGoal request
         * @return GoalsDeleteGoalResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public GoalsDeleteGoalResponse execute() throws ApiException {
            ApiResponse<GoalsDeleteGoalResponse> localVarResp = deleteGoalWithHttpInfo(goalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteGoal request with HTTP info returned
         * @return ApiResponse&lt;GoalsDeleteGoalResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsDeleteGoalResponse> executeWithHttpInfo() throws ApiException {
            return deleteGoalWithHttpInfo(goalId);
        }

        /**
         * Execute deleteGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsDeleteGoalResponse> _callback) throws ApiException {
            return deleteGoalAsync(goalId, _callback);
        }
    }

    /**
     * Delete Goal
     * 
     * @param goalId GoalId to delete a goal (required)
     * @return DeleteGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGoalRequestBuilder deleteGoal(Integer goalId) throws IllegalArgumentException {
        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
        return new DeleteGoalRequestBuilder(goalId);
    }
    private okhttp3.Call getAllGoalsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGoalsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllGoalsCall(_callback);

    }


    private ApiResponse<Object> getAllGoalsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllGoalsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllGoalsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGoalsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllGoalsRequestBuilder {

        private GetAllGoalsRequestBuilder() {
        }

        /**
         * Build call for getAllGoals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllGoalsCall(_callback);
        }


        /**
         * Execute getAllGoals request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAllGoalsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllGoals request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAllGoalsWithHttpInfo();
        }

        /**
         * Execute getAllGoals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAllGoalsAsync(_callback);
        }
    }

    /**
     * Retrieve all goals
     * 
     * @return GetAllGoalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllGoalsRequestBuilder getAllGoals() throws IllegalArgumentException {
        return new GetAllGoalsRequestBuilder();
    }
    private okhttp3.Call getGoalCall(Integer goalid, Integer reviewUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getgoal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (goalid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("goalid", goalid));
        }

        if (reviewUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reviewUserId", reviewUserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGoalValidateBeforeCall(Integer goalid, Integer reviewUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalid' is set
        if (goalid == null) {
            throw new ApiException("Missing the required parameter 'goalid' when calling getGoal(Async)");
        }

        return getGoalCall(goalid, reviewUserId, _callback);

    }


    private ApiResponse<GoalsGetGoalResponse> getGoalWithHttpInfo(Integer goalid, Integer reviewUserId) throws ApiException {
        okhttp3.Call localVarCall = getGoalValidateBeforeCall(goalid, reviewUserId, null);
        Type localVarReturnType = new TypeToken<GoalsGetGoalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGoalAsync(Integer goalid, Integer reviewUserId, final ApiCallback<GoalsGetGoalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGoalValidateBeforeCall(goalid, reviewUserId, _callback);
        Type localVarReturnType = new TypeToken<GoalsGetGoalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGoalRequestBuilder {
        private final Integer goalid;
        private Integer reviewUserId;

        private GetGoalRequestBuilder(Integer goalid) {
            this.goalid = goalid;
        }

        /**
         * Set reviewUserId
         * @param reviewUserId The ID of the user who is reviewee. (optional)
         * @return GetGoalRequestBuilder
         */
        public GetGoalRequestBuilder reviewUserId(Integer reviewUserId) {
            this.reviewUserId = reviewUserId;
            return this;
        }
        
        /**
         * Build call for getGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGoalCall(goalid, reviewUserId, _callback);
        }


        /**
         * Execute getGoal request
         * @return GoalsGetGoalResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetGoalResponse execute() throws ApiException {
            ApiResponse<GoalsGetGoalResponse> localVarResp = getGoalWithHttpInfo(goalid, reviewUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGoal request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetGoalResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetGoalResponse> executeWithHttpInfo() throws ApiException {
            return getGoalWithHttpInfo(goalid, reviewUserId);
        }

        /**
         * Execute getGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetGoalResponse> _callback) throws ApiException {
            return getGoalAsync(goalid, reviewUserId, _callback);
        }
    }

    /**
     * Retrieve Goal
     * 
     * @param goalid ID to get a goal. (required)
     * @return GetGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetGoalRequestBuilder getGoal(Integer goalid) throws IllegalArgumentException {
        if (goalid == null) throw new IllegalArgumentException("\"goalid\" is required but got null");
        return new GetGoalRequestBuilder(goalid);
    }
    private okhttp3.Call getUserGoalsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGoalsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserGoalsCall(_callback);

    }


    private ApiResponse<GoalsGetUserGoalsResponse> getUserGoalsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserGoalsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GoalsGetUserGoalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserGoalsAsync(final ApiCallback<GoalsGetUserGoalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGoalsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GoalsGetUserGoalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserGoalsRequestBuilder {

        private GetUserGoalsRequestBuilder() {
        }

        /**
         * Build call for getUserGoals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserGoalsCall(_callback);
        }


        /**
         * Execute getUserGoals request
         * @return GoalsGetUserGoalsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetUserGoalsResponse execute() throws ApiException {
            ApiResponse<GoalsGetUserGoalsResponse> localVarResp = getUserGoalsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserGoals request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetUserGoalsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetUserGoalsResponse> executeWithHttpInfo() throws ApiException {
            return getUserGoalsWithHttpInfo();
        }

        /**
         * Execute getUserGoals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetUserGoalsResponse> _callback) throws ApiException {
            return getUserGoalsAsync(_callback);
        }
    }

    /**
     * Retrieve goals of user
     * 
     * @return GetUserGoalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetUserGoalsRequestBuilder getUserGoals() throws IllegalArgumentException {
        return new GetUserGoalsRequestBuilder();
    }
}
