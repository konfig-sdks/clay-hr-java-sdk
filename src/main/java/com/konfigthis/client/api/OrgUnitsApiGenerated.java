/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OrgUnitsCreateNewOrgUnitResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrgUnitsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrgUnitsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrgUnitsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewOrgUnitCall(String name, String description, Integer deptHead, String deptHeadName, String departmentCode, Integer departmentId, String departmentLabel, Integer noOfEmployees, Integer parentDepartmentId, String parentDepartmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/orgunits/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (deptHead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deptHead", deptHead));
        }

        if (deptHeadName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deptHeadName", deptHeadName));
        }

        if (departmentCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departmentCode", departmentCode));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departmentId", departmentId));
        }

        if (departmentLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departmentLabel", departmentLabel));
        }

        if (noOfEmployees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noOfEmployees", noOfEmployees));
        }

        if (parentDepartmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentDepartmentId", parentDepartmentId));
        }

        if (parentDepartmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentDepartmentName", parentDepartmentName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewOrgUnitValidateBeforeCall(String name, String description, Integer deptHead, String deptHeadName, String departmentCode, Integer departmentId, String departmentLabel, Integer noOfEmployees, Integer parentDepartmentId, String parentDepartmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createNewOrgUnit(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling createNewOrgUnit(Async)");
        }

        return createNewOrgUnitCall(name, description, deptHead, deptHeadName, departmentCode, departmentId, departmentLabel, noOfEmployees, parentDepartmentId, parentDepartmentName, _callback);

    }


    private ApiResponse<OrgUnitsCreateNewOrgUnitResponse> createNewOrgUnitWithHttpInfo(String name, String description, Integer deptHead, String deptHeadName, String departmentCode, Integer departmentId, String departmentLabel, Integer noOfEmployees, Integer parentDepartmentId, String parentDepartmentName) throws ApiException {
        okhttp3.Call localVarCall = createNewOrgUnitValidateBeforeCall(name, description, deptHead, deptHeadName, departmentCode, departmentId, departmentLabel, noOfEmployees, parentDepartmentId, parentDepartmentName, null);
        Type localVarReturnType = new TypeToken<OrgUnitsCreateNewOrgUnitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewOrgUnitAsync(String name, String description, Integer deptHead, String deptHeadName, String departmentCode, Integer departmentId, String departmentLabel, Integer noOfEmployees, Integer parentDepartmentId, String parentDepartmentName, final ApiCallback<OrgUnitsCreateNewOrgUnitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewOrgUnitValidateBeforeCall(name, description, deptHead, deptHeadName, departmentCode, departmentId, departmentLabel, noOfEmployees, parentDepartmentId, parentDepartmentName, _callback);
        Type localVarReturnType = new TypeToken<OrgUnitsCreateNewOrgUnitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewOrgUnitRequestBuilder {
        private final String name;
        private final String description;
        private Integer deptHead;
        private String deptHeadName;
        private String departmentCode;
        private Integer departmentId;
        private String departmentLabel;
        private Integer noOfEmployees;
        private Integer parentDepartmentId;
        private String parentDepartmentName;

        private CreateNewOrgUnitRequestBuilder(String name, String description) {
            this.name = name;
            this.description = description;
        }

        /**
         * Set deptHead
         * @param deptHead The ID of the department head. (optional)
         * @return CreateNewOrgUnitRequestBuilder
         */
        public CreateNewOrgUnitRequestBuilder deptHead(Integer deptHead) {
            this.deptHead = deptHead;
            return this;
        }
        
        /**
         * Set deptHeadName
         * @param deptHeadName Name of the department head. (optional)
         * @return CreateNewOrgUnitRequestBuilder
         */
        public CreateNewOrgUnitRequestBuilder deptHeadName(String deptHeadName) {
            this.deptHeadName = deptHeadName;
            return this;
        }
        
        /**
         * Set departmentCode
         * @param departmentCode The code of the department. (optional)
         * @return CreateNewOrgUnitRequestBuilder
         */
        public CreateNewOrgUnitRequestBuilder departmentCode(String departmentCode) {
            this.departmentCode = departmentCode;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId The ID of the department. (optional)
         * @return CreateNewOrgUnitRequestBuilder
         */
        public CreateNewOrgUnitRequestBuilder departmentId(Integer departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set departmentLabel
         * @param departmentLabel Label for the department. (optional)
         * @return CreateNewOrgUnitRequestBuilder
         */
        public CreateNewOrgUnitRequestBuilder departmentLabel(String departmentLabel) {
            this.departmentLabel = departmentLabel;
            return this;
        }
        
        /**
         * Set noOfEmployees
         * @param noOfEmployees Number of employees. (optional)
         * @return CreateNewOrgUnitRequestBuilder
         */
        public CreateNewOrgUnitRequestBuilder noOfEmployees(Integer noOfEmployees) {
            this.noOfEmployees = noOfEmployees;
            return this;
        }
        
        /**
         * Set parentDepartmentId
         * @param parentDepartmentId The ID of the parent department. (optional)
         * @return CreateNewOrgUnitRequestBuilder
         */
        public CreateNewOrgUnitRequestBuilder parentDepartmentId(Integer parentDepartmentId) {
            this.parentDepartmentId = parentDepartmentId;
            return this;
        }
        
        /**
         * Set parentDepartmentName
         * @param parentDepartmentName Name of the parent department. (optional)
         * @return CreateNewOrgUnitRequestBuilder
         */
        public CreateNewOrgUnitRequestBuilder parentDepartmentName(String parentDepartmentName) {
            this.parentDepartmentName = parentDepartmentName;
            return this;
        }
        
        /**
         * Build call for createNewOrgUnit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewOrgUnitCall(name, description, deptHead, deptHeadName, departmentCode, departmentId, departmentLabel, noOfEmployees, parentDepartmentId, parentDepartmentName, _callback);
        }


        /**
         * Execute createNewOrgUnit request
         * @return OrgUnitsCreateNewOrgUnitResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public OrgUnitsCreateNewOrgUnitResponse execute() throws ApiException {
            ApiResponse<OrgUnitsCreateNewOrgUnitResponse> localVarResp = createNewOrgUnitWithHttpInfo(name, description, deptHead, deptHeadName, departmentCode, departmentId, departmentLabel, noOfEmployees, parentDepartmentId, parentDepartmentName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewOrgUnit request with HTTP info returned
         * @return ApiResponse&lt;OrgUnitsCreateNewOrgUnitResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgUnitsCreateNewOrgUnitResponse> executeWithHttpInfo() throws ApiException {
            return createNewOrgUnitWithHttpInfo(name, description, deptHead, deptHeadName, departmentCode, departmentId, departmentLabel, noOfEmployees, parentDepartmentId, parentDepartmentName);
        }

        /**
         * Execute createNewOrgUnit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgUnitsCreateNewOrgUnitResponse> _callback) throws ApiException {
            return createNewOrgUnitAsync(name, description, deptHead, deptHeadName, departmentCode, departmentId, departmentLabel, noOfEmployees, parentDepartmentId, parentDepartmentName, _callback);
        }
    }

    /**
     * Create new org unit
     * 
     * @param name Name of the org unit. (required)
     * @param description Description of the org unit. (required)
     * @return CreateNewOrgUnitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewOrgUnitRequestBuilder createNewOrgUnit(String name, String description) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        return new CreateNewOrgUnitRequestBuilder(name, description);
    }
    private okhttp3.Call getOrgUnitsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/orgunits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgUnitsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrgUnitsCall(_callback);

    }


    private ApiResponse<String> getOrgUnitsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrgUnitsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrgUnitsAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgUnitsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrgUnitsRequestBuilder {

        private GetOrgUnitsRequestBuilder() {
        }

        /**
         * Build call for getOrgUnits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrgUnitsCall(_callback);
        }


        /**
         * Execute getOrgUnits request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getOrgUnitsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrgUnits request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getOrgUnitsWithHttpInfo();
        }

        /**
         * Execute getOrgUnits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getOrgUnitsAsync(_callback);
        }
    }

    /**
     * Retrieve org units
     * 
     * @return GetOrgUnitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetOrgUnitsRequestBuilder getOrgUnits() throws IllegalArgumentException {
        return new GetOrgUnitsRequestBuilder();
    }
}
