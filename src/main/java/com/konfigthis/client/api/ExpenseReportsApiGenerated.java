/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExpenseReportsCreateNewExpenseItemResponse;
import com.konfigthis.client.model.ExpenseReportsCreateNewResponse;
import com.konfigthis.client.model.ExpenseReportsDeleteExpenseReportResponse;
import com.konfigthis.client.model.ExpenseReportsGetCurrenciesResponse;
import com.konfigthis.client.model.ExpenseReportsSubmitExpenseReportResponse;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExpenseReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpenseReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExpenseReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCall(String name, Double amount, String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expensereport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(String name, Double amount, String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createNew(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling createNew(Async)");
        }

        return createNewCall(name, amount, description, _callback);

    }


    private ApiResponse<ExpenseReportsCreateNewResponse> createNewWithHttpInfo(String name, Double amount, String description) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(name, amount, description, null);
        Type localVarReturnType = new TypeToken<ExpenseReportsCreateNewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(String name, Double amount, String description, final ApiCallback<ExpenseReportsCreateNewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(name, amount, description, _callback);
        Type localVarReturnType = new TypeToken<ExpenseReportsCreateNewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private final String name;
        private final Double amount;
        private String description;

        private CreateNewRequestBuilder(String name, Double amount) {
            this.name = name;
            this.amount = amount;
        }

        /**
         * Set description
         * @param description Description of the expense report. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewCall(name, amount, description, _callback);
        }


        /**
         * Execute createNew request
         * @return ExpenseReportsCreateNewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseReportsCreateNewResponse execute() throws ApiException {
            ApiResponse<ExpenseReportsCreateNewResponse> localVarResp = createNewWithHttpInfo(name, amount, description);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;ExpenseReportsCreateNewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseReportsCreateNewResponse> executeWithHttpInfo() throws ApiException {
            return createNewWithHttpInfo(name, amount, description);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseReportsCreateNewResponse> _callback) throws ApiException {
            return createNewAsync(name, amount, description, _callback);
        }
    }

    /**
     * Create expense report
     * 
     * @param name Name of the expense report. (required)
     * @param amount Amount to be added in expense report. (required)
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew(String name, Double amount) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new CreateNewRequestBuilder(name, amount);
    }
    private okhttp3.Call createNewExpenseItemCall(Float amount, String billable, Integer cid, String currencyCode, LocalDate date, Integer expenseItemId, String expenseType, Integer expenseTypeId, Integer projectId, String reimbursible, String remarks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expenseitem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (billable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billable", billable));
        }

        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyCode", currencyCode));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (expenseItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseItemId", expenseItemId));
        }

        if (expenseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseType", expenseType));
        }

        if (expenseTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseTypeId", expenseTypeId));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (reimbursible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reimbursible", reimbursible));
        }

        if (remarks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remarks", remarks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewExpenseItemValidateBeforeCall(Float amount, String billable, Integer cid, String currencyCode, LocalDate date, Integer expenseItemId, String expenseType, Integer expenseTypeId, Integer projectId, String reimbursible, String remarks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'billable' is set
        if (billable == null) {
            throw new ApiException("Missing the required parameter 'billable' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'expenseItemId' is set
        if (expenseItemId == null) {
            throw new ApiException("Missing the required parameter 'expenseItemId' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'expenseType' is set
        if (expenseType == null) {
            throw new ApiException("Missing the required parameter 'expenseType' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'expenseTypeId' is set
        if (expenseTypeId == null) {
            throw new ApiException("Missing the required parameter 'expenseTypeId' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'reimbursible' is set
        if (reimbursible == null) {
            throw new ApiException("Missing the required parameter 'reimbursible' when calling createNewExpenseItem(Async)");
        }

        // verify the required parameter 'remarks' is set
        if (remarks == null) {
            throw new ApiException("Missing the required parameter 'remarks' when calling createNewExpenseItem(Async)");
        }

        return createNewExpenseItemCall(amount, billable, cid, currencyCode, date, expenseItemId, expenseType, expenseTypeId, projectId, reimbursible, remarks, _callback);

    }


    private ApiResponse<ExpenseReportsCreateNewExpenseItemResponse> createNewExpenseItemWithHttpInfo(Float amount, String billable, Integer cid, String currencyCode, LocalDate date, Integer expenseItemId, String expenseType, Integer expenseTypeId, Integer projectId, String reimbursible, String remarks) throws ApiException {
        okhttp3.Call localVarCall = createNewExpenseItemValidateBeforeCall(amount, billable, cid, currencyCode, date, expenseItemId, expenseType, expenseTypeId, projectId, reimbursible, remarks, null);
        Type localVarReturnType = new TypeToken<ExpenseReportsCreateNewExpenseItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewExpenseItemAsync(Float amount, String billable, Integer cid, String currencyCode, LocalDate date, Integer expenseItemId, String expenseType, Integer expenseTypeId, Integer projectId, String reimbursible, String remarks, final ApiCallback<ExpenseReportsCreateNewExpenseItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewExpenseItemValidateBeforeCall(amount, billable, cid, currencyCode, date, expenseItemId, expenseType, expenseTypeId, projectId, reimbursible, remarks, _callback);
        Type localVarReturnType = new TypeToken<ExpenseReportsCreateNewExpenseItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewExpenseItemRequestBuilder {
        private final Float amount;
        private final String billable;
        private final Integer cid;
        private final String currencyCode;
        private final LocalDate date;
        private final Integer expenseItemId;
        private final String expenseType;
        private final Integer expenseTypeId;
        private final Integer projectId;
        private final String reimbursible;
        private final String remarks;

        private CreateNewExpenseItemRequestBuilder(Float amount, String billable, Integer cid, String currencyCode, LocalDate date, Integer expenseItemId, String expenseType, Integer expenseTypeId, Integer projectId, String reimbursible, String remarks) {
            this.amount = amount;
            this.billable = billable;
            this.cid = cid;
            this.currencyCode = currencyCode;
            this.date = date;
            this.expenseItemId = expenseItemId;
            this.expenseType = expenseType;
            this.expenseTypeId = expenseTypeId;
            this.projectId = projectId;
            this.reimbursible = reimbursible;
            this.remarks = remarks;
        }

        /**
         * Build call for createNewExpenseItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewExpenseItemCall(amount, billable, cid, currencyCode, date, expenseItemId, expenseType, expenseTypeId, projectId, reimbursible, remarks, _callback);
        }


        /**
         * Execute createNewExpenseItem request
         * @return ExpenseReportsCreateNewExpenseItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseReportsCreateNewExpenseItemResponse execute() throws ApiException {
            ApiResponse<ExpenseReportsCreateNewExpenseItemResponse> localVarResp = createNewExpenseItemWithHttpInfo(amount, billable, cid, currencyCode, date, expenseItemId, expenseType, expenseTypeId, projectId, reimbursible, remarks);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewExpenseItem request with HTTP info returned
         * @return ApiResponse&lt;ExpenseReportsCreateNewExpenseItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseReportsCreateNewExpenseItemResponse> executeWithHttpInfo() throws ApiException {
            return createNewExpenseItemWithHttpInfo(amount, billable, cid, currencyCode, date, expenseItemId, expenseType, expenseTypeId, projectId, reimbursible, remarks);
        }

        /**
         * Execute createNewExpenseItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseReportsCreateNewExpenseItemResponse> _callback) throws ApiException {
            return createNewExpenseItemAsync(amount, billable, cid, currencyCode, date, expenseItemId, expenseType, expenseTypeId, projectId, reimbursible, remarks, _callback);
        }
    }

    /**
     * Create expense item
     * 
     * @param amount Amount of the expense item. (required)
     * @param billable Y for \&quot;Yes\&quot; and N for \&quot;No\&quot;. (required)
     * @param cid The unique ID of the customer. (required)
     * @param currencyCode Code of the currency. (required)
     * @param date Date of creating expense item. (required)
     * @param expenseItemId The ID of the expense item. (required)
     * @param expenseType The type of expense. (required)
     * @param expenseTypeId The ID of the expense type. (required)
     * @param projectId The ID of the project. (required)
     * @param reimbursible Y for \&quot;Yes\&quot; and N for \&quot;No\&quot;. (required)
     * @param remarks  (required)
     * @return CreateNewExpenseItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewExpenseItemRequestBuilder createNewExpenseItem(Float amount, String billable, Integer cid, String currencyCode, LocalDate date, Integer expenseItemId, String expenseType, Integer expenseTypeId, Integer projectId, String reimbursible, String remarks) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (billable == null) throw new IllegalArgumentException("\"billable\" is required but got null");
            

        if (cid == null) throw new IllegalArgumentException("\"cid\" is required but got null");
        if (currencyCode == null) throw new IllegalArgumentException("\"currencyCode\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        if (expenseItemId == null) throw new IllegalArgumentException("\"expenseItemId\" is required but got null");
        if (expenseType == null) throw new IllegalArgumentException("\"expenseType\" is required but got null");
            

        if (expenseTypeId == null) throw new IllegalArgumentException("\"expenseTypeId\" is required but got null");
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
        if (reimbursible == null) throw new IllegalArgumentException("\"reimbursible\" is required but got null");
            

        if (remarks == null) throw new IllegalArgumentException("\"remarks\" is required but got null");
            

        return new CreateNewExpenseItemRequestBuilder(amount, billable, cid, currencyCode, date, expenseItemId, expenseType, expenseTypeId, projectId, reimbursible, remarks);
    }
    private okhttp3.Call deleteExpenseReportCall(Integer expenseReportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expensereport/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expenseReportId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseReportId", expenseReportId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExpenseReportValidateBeforeCall(Integer expenseReportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseReportId' is set
        if (expenseReportId == null) {
            throw new ApiException("Missing the required parameter 'expenseReportId' when calling deleteExpenseReport(Async)");
        }

        return deleteExpenseReportCall(expenseReportId, _callback);

    }


    private ApiResponse<ExpenseReportsDeleteExpenseReportResponse> deleteExpenseReportWithHttpInfo(Integer expenseReportId) throws ApiException {
        okhttp3.Call localVarCall = deleteExpenseReportValidateBeforeCall(expenseReportId, null);
        Type localVarReturnType = new TypeToken<ExpenseReportsDeleteExpenseReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteExpenseReportAsync(Integer expenseReportId, final ApiCallback<ExpenseReportsDeleteExpenseReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExpenseReportValidateBeforeCall(expenseReportId, _callback);
        Type localVarReturnType = new TypeToken<ExpenseReportsDeleteExpenseReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteExpenseReportRequestBuilder {
        private final Integer expenseReportId;

        private DeleteExpenseReportRequestBuilder(Integer expenseReportId) {
            this.expenseReportId = expenseReportId;
        }

        /**
         * Build call for deleteExpenseReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteExpenseReportCall(expenseReportId, _callback);
        }


        /**
         * Execute deleteExpenseReport request
         * @return ExpenseReportsDeleteExpenseReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseReportsDeleteExpenseReportResponse execute() throws ApiException {
            ApiResponse<ExpenseReportsDeleteExpenseReportResponse> localVarResp = deleteExpenseReportWithHttpInfo(expenseReportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteExpenseReport request with HTTP info returned
         * @return ApiResponse&lt;ExpenseReportsDeleteExpenseReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseReportsDeleteExpenseReportResponse> executeWithHttpInfo() throws ApiException {
            return deleteExpenseReportWithHttpInfo(expenseReportId);
        }

        /**
         * Execute deleteExpenseReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseReportsDeleteExpenseReportResponse> _callback) throws ApiException {
            return deleteExpenseReportAsync(expenseReportId, _callback);
        }
    }

    /**
     * Delete expense report
     * 
     * @param expenseReportId The ID of the expense report. (required)
     * @return DeleteExpenseReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteExpenseReportRequestBuilder deleteExpenseReport(Integer expenseReportId) throws IllegalArgumentException {
        if (expenseReportId == null) throw new IllegalArgumentException("\"expenseReportId\" is required but got null");
        return new DeleteExpenseReportRequestBuilder(expenseReportId);
    }
    private okhttp3.Call getByUserIdCall(String guid, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expensereports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (guid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guid", guid));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByUserIdValidateBeforeCall(String guid, String email, final ApiCallback _callback) throws ApiException {
        return getByUserIdCall(guid, email, _callback);

    }


    private ApiResponse<String> getByUserIdWithHttpInfo(String guid, String email) throws ApiException {
        okhttp3.Call localVarCall = getByUserIdValidateBeforeCall(guid, email, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByUserIdAsync(String guid, String email, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByUserIdValidateBeforeCall(guid, email, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByUserIdRequestBuilder {
        private String guid;
        private String email;

        private GetByUserIdRequestBuilder() {
        }

        /**
         * Set guid
         * @param guid The unique system generated ID of the user. (optional)
         * @return GetByUserIdRequestBuilder
         */
        public GetByUserIdRequestBuilder guid(String guid) {
            this.guid = guid;
            return this;
        }
        
        /**
         * Set email
         * @param email Email of the user. (optional)
         * @return GetByUserIdRequestBuilder
         */
        public GetByUserIdRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for getByUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByUserIdCall(guid, email, _callback);
        }


        /**
         * Execute getByUserId request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByUserIdWithHttpInfo(guid, email);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByUserId request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByUserIdWithHttpInfo(guid, email);
        }

        /**
         * Execute getByUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByUserIdAsync(guid, email, _callback);
        }
    }

    /**
     * Retrieve expense reports by User ID
     * 
     * @return GetByUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
     </table>
     */
    public GetByUserIdRequestBuilder getByUserId() throws IllegalArgumentException {
        return new GetByUserIdRequestBuilder();
    }
    private okhttp3.Call getCurrenciesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/currencylist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrenciesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrenciesCall(_callback);

    }


    private ApiResponse<ExpenseReportsGetCurrenciesResponse> getCurrenciesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ExpenseReportsGetCurrenciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrenciesAsync(final ApiCallback<ExpenseReportsGetCurrenciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ExpenseReportsGetCurrenciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrenciesRequestBuilder {

        private GetCurrenciesRequestBuilder() {
        }

        /**
         * Build call for getCurrencies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrenciesCall(_callback);
        }


        /**
         * Execute getCurrencies request
         * @return ExpenseReportsGetCurrenciesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseReportsGetCurrenciesResponse execute() throws ApiException {
            ApiResponse<ExpenseReportsGetCurrenciesResponse> localVarResp = getCurrenciesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrencies request with HTTP info returned
         * @return ApiResponse&lt;ExpenseReportsGetCurrenciesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseReportsGetCurrenciesResponse> executeWithHttpInfo() throws ApiException {
            return getCurrenciesWithHttpInfo();
        }

        /**
         * Execute getCurrencies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseReportsGetCurrenciesResponse> _callback) throws ApiException {
            return getCurrenciesAsync(_callback);
        }
    }

    /**
     * Retrieve currencies
     * 
     * @return GetCurrenciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrenciesRequestBuilder getCurrencies() throws IllegalArgumentException {
        return new GetCurrenciesRequestBuilder();
    }
    private okhttp3.Call getExpenseTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expensetypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpenseTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getExpenseTypesCall(_callback);

    }


    private ApiResponse<String> getExpenseTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getExpenseTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExpenseTypesAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpenseTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetExpenseTypesRequestBuilder {

        private GetExpenseTypesRequestBuilder() {
        }

        /**
         * Build call for getExpenseTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExpenseTypesCall(_callback);
        }


        /**
         * Execute getExpenseTypes request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getExpenseTypesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getExpenseTypes request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getExpenseTypesWithHttpInfo();
        }

        /**
         * Execute getExpenseTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getExpenseTypesAsync(_callback);
        }
    }

    /**
     * Retrieve expense types
     * 
     * @return GetExpenseTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 </td><td>  -  </td></tr>
     </table>
     */
    public GetExpenseTypesRequestBuilder getExpenseTypes() throws IllegalArgumentException {
        return new GetExpenseTypesRequestBuilder();
    }
    private okhttp3.Call getReportDetailsCall(Integer expenseReportId, String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expensereport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expenseReportId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expenseReportId", expenseReportId));
        }

        if (guid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guid", guid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportDetailsValidateBeforeCall(Integer expenseReportId, String guid, final ApiCallback _callback) throws ApiException {
        return getReportDetailsCall(expenseReportId, guid, _callback);

    }


    private ApiResponse<String> getReportDetailsWithHttpInfo(Integer expenseReportId, String guid) throws ApiException {
        okhttp3.Call localVarCall = getReportDetailsValidateBeforeCall(expenseReportId, guid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReportDetailsAsync(Integer expenseReportId, String guid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportDetailsValidateBeforeCall(expenseReportId, guid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetReportDetailsRequestBuilder {
        private Integer expenseReportId;
        private String guid;

        private GetReportDetailsRequestBuilder() {
        }

        /**
         * Set expenseReportId
         * @param expenseReportId The ID of the expense report. (optional)
         * @return GetReportDetailsRequestBuilder
         */
        public GetReportDetailsRequestBuilder expenseReportId(Integer expenseReportId) {
            this.expenseReportId = expenseReportId;
            return this;
        }
        
        /**
         * Set guid
         * @param guid The unique system generated ID of the user. (optional)
         * @return GetReportDetailsRequestBuilder
         */
        public GetReportDetailsRequestBuilder guid(String guid) {
            this.guid = guid;
            return this;
        }
        
        /**
         * Build call for getReportDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReportDetailsCall(expenseReportId, guid, _callback);
        }


        /**
         * Execute getReportDetails request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getReportDetailsWithHttpInfo(expenseReportId, guid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getReportDetails request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getReportDetailsWithHttpInfo(expenseReportId, guid);
        }

        /**
         * Execute getReportDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getReportDetailsAsync(expenseReportId, guid, _callback);
        }
    }

    /**
     * Retrieve the details of expense report
     * 
     * @return GetReportDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetReportDetailsRequestBuilder getReportDetails() throws IllegalArgumentException {
        return new GetReportDetailsRequestBuilder();
    }
    private okhttp3.Call submitExpenseReportCall(Integer expenseReportId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expensereport/submit/{expenseReportId}"
            .replace("{" + "expenseReportId" + "}", localVarApiClient.escapeString(expenseReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitExpenseReportValidateBeforeCall(Integer expenseReportId, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseReportId' is set
        if (expenseReportId == null) {
            throw new ApiException("Missing the required parameter 'expenseReportId' when calling submitExpenseReport(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling submitExpenseReport(Async)");
        }

        return submitExpenseReportCall(expenseReportId, status, _callback);

    }


    private ApiResponse<ExpenseReportsSubmitExpenseReportResponse> submitExpenseReportWithHttpInfo(Integer expenseReportId, String status) throws ApiException {
        okhttp3.Call localVarCall = submitExpenseReportValidateBeforeCall(expenseReportId, status, null);
        Type localVarReturnType = new TypeToken<ExpenseReportsSubmitExpenseReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitExpenseReportAsync(Integer expenseReportId, String status, final ApiCallback<ExpenseReportsSubmitExpenseReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitExpenseReportValidateBeforeCall(expenseReportId, status, _callback);
        Type localVarReturnType = new TypeToken<ExpenseReportsSubmitExpenseReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitExpenseReportRequestBuilder {
        private final Integer expenseReportId;
        private final String status;

        private SubmitExpenseReportRequestBuilder(Integer expenseReportId, String status) {
            this.expenseReportId = expenseReportId;
            this.status = status;
        }

        /**
         * Build call for submitExpenseReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return submitExpenseReportCall(expenseReportId, status, _callback);
        }


        /**
         * Execute submitExpenseReport request
         * @return ExpenseReportsSubmitExpenseReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseReportsSubmitExpenseReportResponse execute() throws ApiException {
            ApiResponse<ExpenseReportsSubmitExpenseReportResponse> localVarResp = submitExpenseReportWithHttpInfo(expenseReportId, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitExpenseReport request with HTTP info returned
         * @return ApiResponse&lt;ExpenseReportsSubmitExpenseReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseReportsSubmitExpenseReportResponse> executeWithHttpInfo() throws ApiException {
            return submitExpenseReportWithHttpInfo(expenseReportId, status);
        }

        /**
         * Execute submitExpenseReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseReportsSubmitExpenseReportResponse> _callback) throws ApiException {
            return submitExpenseReportAsync(expenseReportId, status, _callback);
        }
    }

    /**
     * Submit expense report
     * 
     * @param expenseReportId The ID of the expense report. (required)
     * @param status Status of the expense report. (required)
     * @return SubmitExpenseReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SubmitExpenseReportRequestBuilder submitExpenseReport(Integer expenseReportId, String status) throws IllegalArgumentException {
        if (expenseReportId == null) throw new IllegalArgumentException("\"expenseReportId\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new SubmitExpenseReportRequestBuilder(expenseReportId, status);
    }
}
