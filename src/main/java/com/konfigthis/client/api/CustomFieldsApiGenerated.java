/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomFieldsGetByIdResponse;
import com.konfigthis.client.model.CustomFieldsGetCustomFieldsResponse;
import com.konfigthis.client.model.CustomFieldsGetCustomListsResponseInner;
import com.konfigthis.client.model.CustomFieldsGetValueResponse;
import com.konfigthis.client.model.CustomFieldsUpdateValueResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomFieldsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomFieldsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomFieldsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(Integer customFieldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customfield";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customFieldId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customFieldId", customFieldId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer customFieldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling getById(Async)");
        }

        return getByIdCall(customFieldId, _callback);

    }


    private ApiResponse<CustomFieldsGetByIdResponse> getByIdWithHttpInfo(Integer customFieldId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(customFieldId, null);
        Type localVarReturnType = new TypeToken<CustomFieldsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer customFieldId, final ApiCallback<CustomFieldsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(customFieldId, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer customFieldId;

        private GetByIdRequestBuilder(Integer customFieldId) {
            this.customFieldId = customFieldId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(customFieldId, _callback);
        }


        /**
         * Execute getById request
         * @return CustomFieldsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsGetByIdResponse execute() throws ApiException {
            ApiResponse<CustomFieldsGetByIdResponse> localVarResp = getByIdWithHttpInfo(customFieldId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(customFieldId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(customFieldId, _callback);
        }
    }

    /**
     * Retrieve Custom Field by ID
     * Retrieve Custom Field by ID
     * @param customFieldId The ID of the custom field. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer customFieldId) throws IllegalArgumentException {
        if (customFieldId == null) throw new IllegalArgumentException("\"customFieldId\" is required but got null");
        return new GetByIdRequestBuilder(customFieldId);
    }
    private okhttp3.Call getCustomFieldsCall(String objectType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customfields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("objectType", objectType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsValidateBeforeCall(String objectType, final ApiCallback _callback) throws ApiException {
        return getCustomFieldsCall(objectType, _callback);

    }


    private ApiResponse<CustomFieldsGetCustomFieldsResponse> getCustomFieldsWithHttpInfo(String objectType) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(objectType, null);
        Type localVarReturnType = new TypeToken<CustomFieldsGetCustomFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldsAsync(String objectType, final ApiCallback<CustomFieldsGetCustomFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(objectType, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsGetCustomFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldsRequestBuilder {
        private String objectType;

        private GetCustomFieldsRequestBuilder() {
        }

        /**
         * Set objectType
         * @param objectType The object type of custom field. (optional)
         * @return GetCustomFieldsRequestBuilder
         */
        public GetCustomFieldsRequestBuilder objectType(String objectType) {
            this.objectType = objectType;
            return this;
        }
        
        /**
         * Build call for getCustomFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldsCall(objectType, _callback);
        }


        /**
         * Execute getCustomFields request
         * @return CustomFieldsGetCustomFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsGetCustomFieldsResponse execute() throws ApiException {
            ApiResponse<CustomFieldsGetCustomFieldsResponse> localVarResp = getCustomFieldsWithHttpInfo(objectType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFields request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsGetCustomFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsGetCustomFieldsResponse> executeWithHttpInfo() throws ApiException {
            return getCustomFieldsWithHttpInfo(objectType);
        }

        /**
         * Execute getCustomFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsGetCustomFieldsResponse> _callback) throws ApiException {
            return getCustomFieldsAsync(objectType, _callback);
        }
    }

    /**
     * Retrieve Custom Fields
     * Retrieve Custom Fields
     * @return GetCustomFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldsRequestBuilder getCustomFields() throws IllegalArgumentException {
        return new GetCustomFieldsRequestBuilder();
    }
    private okhttp3.Call getCustomListsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomListsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCustomListsCall(_callback);

    }


    private ApiResponse<List<CustomFieldsGetCustomListsResponseInner>> getCustomListsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomListsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CustomFieldsGetCustomListsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomListsAsync(final ApiCallback<List<CustomFieldsGetCustomListsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomListsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldsGetCustomListsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomListsRequestBuilder {

        private GetCustomListsRequestBuilder() {
        }

        /**
         * Build call for getCustomLists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomListsCall(_callback);
        }


        /**
         * Execute getCustomLists request
         * @return List&lt;CustomFieldsGetCustomListsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<CustomFieldsGetCustomListsResponseInner> execute() throws ApiException {
            ApiResponse<List<CustomFieldsGetCustomListsResponseInner>> localVarResp = getCustomListsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomLists request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CustomFieldsGetCustomListsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CustomFieldsGetCustomListsResponseInner>> executeWithHttpInfo() throws ApiException {
            return getCustomListsWithHttpInfo();
        }

        /**
         * Execute getCustomLists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CustomFieldsGetCustomListsResponseInner>> _callback) throws ApiException {
            return getCustomListsAsync(_callback);
        }
    }

    /**
     * Retrieve Custom Lists
     * 
     * @return GetCustomListsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomListsRequestBuilder getCustomLists() throws IllegalArgumentException {
        return new GetCustomListsRequestBuilder();
    }
    private okhttp3.Call getValueCall(Integer customFieldId, String customFieldCode, String userEmail, String empId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customfieldvalues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customFieldCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customFieldCode", customFieldCode));
        }

        if (customFieldId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customFieldId", customFieldId));
        }

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userEmail", userEmail));
        }

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empId", empId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValueValidateBeforeCall(Integer customFieldId, String customFieldCode, String userEmail, String empId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling getValue(Async)");
        }

        return getValueCall(customFieldId, customFieldCode, userEmail, empId, _callback);

    }


    private ApiResponse<CustomFieldsGetValueResponse> getValueWithHttpInfo(Integer customFieldId, String customFieldCode, String userEmail, String empId) throws ApiException {
        okhttp3.Call localVarCall = getValueValidateBeforeCall(customFieldId, customFieldCode, userEmail, empId, null);
        Type localVarReturnType = new TypeToken<CustomFieldsGetValueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getValueAsync(Integer customFieldId, String customFieldCode, String userEmail, String empId, final ApiCallback<CustomFieldsGetValueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValueValidateBeforeCall(customFieldId, customFieldCode, userEmail, empId, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsGetValueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetValueRequestBuilder {
        private final Integer customFieldId;
        private String customFieldCode;
        private String userEmail;
        private String empId;

        private GetValueRequestBuilder(Integer customFieldId) {
            this.customFieldId = customFieldId;
        }

        /**
         * Set customFieldCode
         * @param customFieldCode customFieldCode (optional)
         * @return GetValueRequestBuilder
         */
        public GetValueRequestBuilder customFieldCode(String customFieldCode) {
            this.customFieldCode = customFieldCode;
            return this;
        }
        
        /**
         * Set userEmail
         * @param userEmail userEmail (optional)
         * @return GetValueRequestBuilder
         */
        public GetValueRequestBuilder userEmail(String userEmail) {
            this.userEmail = userEmail;
            return this;
        }
        
        /**
         * Set empId
         * @param empId empId (optional)
         * @return GetValueRequestBuilder
         */
        public GetValueRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Build call for getValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValueCall(customFieldId, customFieldCode, userEmail, empId, _callback);
        }


        /**
         * Execute getValue request
         * @return CustomFieldsGetValueResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsGetValueResponse execute() throws ApiException {
            ApiResponse<CustomFieldsGetValueResponse> localVarResp = getValueWithHttpInfo(customFieldId, customFieldCode, userEmail, empId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getValue request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsGetValueResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsGetValueResponse> executeWithHttpInfo() throws ApiException {
            return getValueWithHttpInfo(customFieldId, customFieldCode, userEmail, empId);
        }

        /**
         * Execute getValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsGetValueResponse> _callback) throws ApiException {
            return getValueAsync(customFieldId, customFieldCode, userEmail, empId, _callback);
        }
    }

    /**
     * Retrieve Custom Field Value
     * 
     * @param customFieldId customFieldId (required)
     * @return GetValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetValueRequestBuilder getValue(Integer customFieldId) throws IllegalArgumentException {
        if (customFieldId == null) throw new IllegalArgumentException("\"customFieldId\" is required but got null");
        return new GetValueRequestBuilder(customFieldId);
    }
    private okhttp3.Call updateValueCall(Integer customFieldId, String value, String customFieldCode, String userEmail, String empId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customfieldvalues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customFieldId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customFieldId", customFieldId));
        }

        if (customFieldCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customFieldCode", customFieldCode));
        }

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userEmail", userEmail));
        }

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empId", empId));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValueValidateBeforeCall(Integer customFieldId, String value, String customFieldCode, String userEmail, String empId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling updateValue(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updateValue(Async)");
        }

        return updateValueCall(customFieldId, value, customFieldCode, userEmail, empId, _callback);

    }


    private ApiResponse<CustomFieldsUpdateValueResponse> updateValueWithHttpInfo(Integer customFieldId, String value, String customFieldCode, String userEmail, String empId) throws ApiException {
        okhttp3.Call localVarCall = updateValueValidateBeforeCall(customFieldId, value, customFieldCode, userEmail, empId, null);
        Type localVarReturnType = new TypeToken<CustomFieldsUpdateValueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateValueAsync(Integer customFieldId, String value, String customFieldCode, String userEmail, String empId, final ApiCallback<CustomFieldsUpdateValueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValueValidateBeforeCall(customFieldId, value, customFieldCode, userEmail, empId, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsUpdateValueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateValueRequestBuilder {
        private final Integer customFieldId;
        private final String value;
        private String customFieldCode;
        private String userEmail;
        private String empId;

        private UpdateValueRequestBuilder(Integer customFieldId, String value) {
            this.customFieldId = customFieldId;
            this.value = value;
        }

        /**
         * Set customFieldCode
         * @param customFieldCode  (optional)
         * @return UpdateValueRequestBuilder
         */
        public UpdateValueRequestBuilder customFieldCode(String customFieldCode) {
            this.customFieldCode = customFieldCode;
            return this;
        }
        
        /**
         * Set userEmail
         * @param userEmail  (optional)
         * @return UpdateValueRequestBuilder
         */
        public UpdateValueRequestBuilder userEmail(String userEmail) {
            this.userEmail = userEmail;
            return this;
        }
        
        /**
         * Set empId
         * @param empId  (optional)
         * @return UpdateValueRequestBuilder
         */
        public UpdateValueRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Build call for updateValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateValueCall(customFieldId, value, customFieldCode, userEmail, empId, _callback);
        }


        /**
         * Execute updateValue request
         * @return CustomFieldsUpdateValueResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsUpdateValueResponse execute() throws ApiException {
            ApiResponse<CustomFieldsUpdateValueResponse> localVarResp = updateValueWithHttpInfo(customFieldId, value, customFieldCode, userEmail, empId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateValue request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsUpdateValueResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsUpdateValueResponse> executeWithHttpInfo() throws ApiException {
            return updateValueWithHttpInfo(customFieldId, value, customFieldCode, userEmail, empId);
        }

        /**
         * Execute updateValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsUpdateValueResponse> _callback) throws ApiException {
            return updateValueAsync(customFieldId, value, customFieldCode, userEmail, empId, _callback);
        }
    }

    /**
     * Update Custom Field Value
     * 
     * @param customFieldId  (required)
     * @param value  (required)
     * @return UpdateValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateValueRequestBuilder updateValue(Integer customFieldId, String value) throws IllegalArgumentException {
        if (customFieldId == null) throw new IllegalArgumentException("\"customFieldId\" is required but got null");
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        return new UpdateValueRequestBuilder(customFieldId, value);
    }
}
