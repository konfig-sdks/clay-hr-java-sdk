/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.OrgRelationSaveUserResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrgRelationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrgRelationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrgRelationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllActiveCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/orgrelation/allactive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllActiveValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllActiveCall(_callback);

    }


    private ApiResponse<String> getAllActiveWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllActiveValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllActiveAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllActiveValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllActiveRequestBuilder {

        private GetAllActiveRequestBuilder() {
        }

        /**
         * Build call for getAllActive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllActiveCall(_callback);
        }


        /**
         * Execute getAllActive request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getAllActiveWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllActive request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getAllActiveWithHttpInfo();
        }

        /**
         * Execute getAllActive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getAllActiveAsync(_callback);
        }
    }

    /**
     * Retrieve all active OrgRelations
     * Retrieve all active OrgRelations for entire organization.
     * @return GetAllActiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllActiveRequestBuilder getAllActive() throws IllegalArgumentException {
        return new GetAllActiveRequestBuilder();
    }
    private okhttp3.Call getOrgRelationsByUserCall(String email, Integer employeeUserId, String empId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/orgrelation/orgRelationsByUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeUserId", employeeUserId));
        }

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empId", empId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgRelationsByUserValidateBeforeCall(String email, Integer employeeUserId, String empId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling getOrgRelationsByUser(Async)");
        }

        return getOrgRelationsByUserCall(email, employeeUserId, empId, _callback);

    }


    private ApiResponse<String> getOrgRelationsByUserWithHttpInfo(String email, Integer employeeUserId, String empId) throws ApiException {
        okhttp3.Call localVarCall = getOrgRelationsByUserValidateBeforeCall(email, employeeUserId, empId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrgRelationsByUserAsync(String email, Integer employeeUserId, String empId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgRelationsByUserValidateBeforeCall(email, employeeUserId, empId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrgRelationsByUserRequestBuilder {
        private final String email;
        private Integer employeeUserId;
        private String empId;

        private GetOrgRelationsByUserRequestBuilder(String email) {
            this.email = email;
        }

        /**
         * Set employeeUserId
         * @param employeeUserId User Id for which org relation will be fetched. (optional)
         * @return GetOrgRelationsByUserRequestBuilder
         */
        public GetOrgRelationsByUserRequestBuilder employeeUserId(Integer employeeUserId) {
            this.employeeUserId = employeeUserId;
            return this;
        }
        
        /**
         * Set empId
         * @param empId Employee Id for which org relation will be fetched. (optional)
         * @return GetOrgRelationsByUserRequestBuilder
         */
        public GetOrgRelationsByUserRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Build call for getOrgRelationsByUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrgRelationsByUserCall(email, employeeUserId, empId, _callback);
        }


        /**
         * Execute getOrgRelationsByUser request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getOrgRelationsByUserWithHttpInfo(email, employeeUserId, empId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrgRelationsByUser request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getOrgRelationsByUserWithHttpInfo(email, employeeUserId, empId);
        }

        /**
         * Execute getOrgRelationsByUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getOrgRelationsByUserAsync(email, employeeUserId, empId, _callback);
        }
    }

    /**
     * Retrieve all the OrgRelations for the given user.
     * Retrieve all the OrgRelations for the given user including Active, Archive and Future OrgRelations.
     * @param email Email for which org relation will be fetched. (required)
     * @return GetOrgRelationsByUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetOrgRelationsByUserRequestBuilder getOrgRelationsByUser(String email) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new GetOrgRelationsByUserRequestBuilder(email);
    }
    private okhttp3.Call saveUserCall(Integer orgRelationId, Integer managerUserId, String managerEmail, String userEmail, Integer otherUserId, String relationType, LocalDate startDate, LocalDate enddate, Integer cid, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/orgrelation/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgRelationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgRelationId", orgRelationId));
        }

        if (managerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managerUserId", managerUserId));
        }

        if (managerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managerEmail", managerEmail));
        }

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userEmail", userEmail));
        }

        if (otherUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otherUserId", otherUserId));
        }

        if (relationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relationType", relationType));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveUserValidateBeforeCall(Integer orgRelationId, Integer managerUserId, String managerEmail, String userEmail, Integer otherUserId, String relationType, LocalDate startDate, LocalDate enddate, Integer cid, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgRelationId' is set
        if (orgRelationId == null) {
            throw new ApiException("Missing the required parameter 'orgRelationId' when calling saveUser(Async)");
        }

        // verify the required parameter 'managerUserId' is set
        if (managerUserId == null) {
            throw new ApiException("Missing the required parameter 'managerUserId' when calling saveUser(Async)");
        }

        // verify the required parameter 'managerEmail' is set
        if (managerEmail == null) {
            throw new ApiException("Missing the required parameter 'managerEmail' when calling saveUser(Async)");
        }

        return saveUserCall(orgRelationId, managerUserId, managerEmail, userEmail, otherUserId, relationType, startDate, enddate, cid, status, _callback);

    }


    private ApiResponse<OrgRelationSaveUserResponse> saveUserWithHttpInfo(Integer orgRelationId, Integer managerUserId, String managerEmail, String userEmail, Integer otherUserId, String relationType, LocalDate startDate, LocalDate enddate, Integer cid, String status) throws ApiException {
        okhttp3.Call localVarCall = saveUserValidateBeforeCall(orgRelationId, managerUserId, managerEmail, userEmail, otherUserId, relationType, startDate, enddate, cid, status, null);
        Type localVarReturnType = new TypeToken<OrgRelationSaveUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveUserAsync(Integer orgRelationId, Integer managerUserId, String managerEmail, String userEmail, Integer otherUserId, String relationType, LocalDate startDate, LocalDate enddate, Integer cid, String status, final ApiCallback<OrgRelationSaveUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveUserValidateBeforeCall(orgRelationId, managerUserId, managerEmail, userEmail, otherUserId, relationType, startDate, enddate, cid, status, _callback);
        Type localVarReturnType = new TypeToken<OrgRelationSaveUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SaveUserRequestBuilder {
        private final Integer orgRelationId;
        private final Integer managerUserId;
        private final String managerEmail;
        private String userEmail;
        private Integer otherUserId;
        private String relationType;
        private LocalDate startDate;
        private LocalDate enddate;
        private Integer cid;
        private String status;

        private SaveUserRequestBuilder(Integer orgRelationId, Integer managerUserId, String managerEmail) {
            this.orgRelationId = orgRelationId;
            this.managerUserId = managerUserId;
            this.managerEmail = managerEmail;
        }

        /**
         * Set userEmail
         * @param userEmail User&#39;s email. (optional)
         * @return SaveUserRequestBuilder
         */
        public SaveUserRequestBuilder userEmail(String userEmail) {
            this.userEmail = userEmail;
            return this;
        }
        
        /**
         * Set otherUserId
         * @param otherUserId User Id of the reporter. (optional)
         * @return SaveUserRequestBuilder
         */
        public SaveUserRequestBuilder otherUserId(Integer otherUserId) {
            this.otherUserId = otherUserId;
            return this;
        }
        
        /**
         * Set relationType
         * @param relationType Type of relation w.r.t manager. (optional)
         * @return SaveUserRequestBuilder
         */
        public SaveUserRequestBuilder relationType(String relationType) {
            this.relationType = relationType;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Date of start in that org unit. (optional)
         * @return SaveUserRequestBuilder
         */
        public SaveUserRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set enddate
         * @param enddate Ending date in that org unit. (optional)
         * @return SaveUserRequestBuilder
         */
        public SaveUserRequestBuilder enddate(LocalDate enddate) {
            this.enddate = enddate;
            return this;
        }
        
        /**
         * Set cid
         * @param cid Company ID. (optional)
         * @return SaveUserRequestBuilder
         */
        public SaveUserRequestBuilder cid(Integer cid) {
            this.cid = cid;
            return this;
        }
        
        /**
         * Set status
         * @param status User is active or not active. (optional)
         * @return SaveUserRequestBuilder
         */
        public SaveUserRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for saveUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return saveUserCall(orgRelationId, managerUserId, managerEmail, userEmail, otherUserId, relationType, startDate, enddate, cid, status, _callback);
        }


        /**
         * Execute saveUser request
         * @return OrgRelationSaveUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public OrgRelationSaveUserResponse execute() throws ApiException {
            ApiResponse<OrgRelationSaveUserResponse> localVarResp = saveUserWithHttpInfo(orgRelationId, managerUserId, managerEmail, userEmail, otherUserId, relationType, startDate, enddate, cid, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute saveUser request with HTTP info returned
         * @return ApiResponse&lt;OrgRelationSaveUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgRelationSaveUserResponse> executeWithHttpInfo() throws ApiException {
            return saveUserWithHttpInfo(orgRelationId, managerUserId, managerEmail, userEmail, otherUserId, relationType, startDate, enddate, cid, status);
        }

        /**
         * Execute saveUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgRelationSaveUserResponse> _callback) throws ApiException {
            return saveUserAsync(orgRelationId, managerUserId, managerEmail, userEmail, otherUserId, relationType, startDate, enddate, cid, status, _callback);
        }
    }

    /**
     * Saves the OrgRelation for the User
     * Saves the OrgRelation for the User.
     * @param orgRelationId ID of OrgRelation for which data will be saved. (required)
     * @param managerUserId User Id of the manager. (required)
     * @param managerEmail Email of manager. (required)
     * @return SaveUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SaveUserRequestBuilder saveUser(Integer orgRelationId, Integer managerUserId, String managerEmail) throws IllegalArgumentException {
        if (orgRelationId == null) throw new IllegalArgumentException("\"orgRelationId\" is required but got null");
        if (managerUserId == null) throw new IllegalArgumentException("\"managerUserId\" is required but got null");
        if (managerEmail == null) throw new IllegalArgumentException("\"managerEmail\" is required but got null");
            

        return new SaveUserRequestBuilder(orgRelationId, managerUserId, managerEmail);
    }
}
