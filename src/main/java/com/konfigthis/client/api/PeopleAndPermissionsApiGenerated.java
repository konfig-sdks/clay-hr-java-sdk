/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import java.time.LocalDate;
import com.konfigthis.client.model.PeopleAndPermissionsAddReportsToRequest;
import com.konfigthis.client.model.PeopleAndPermissionsAddReportsToRequestAddObjectsInner;
import com.konfigthis.client.model.PeopleAndPermissionsAddReportsToResponse;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetails201Response;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequest;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListInner;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactListInner;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationListInner;
import com.konfigthis.client.model.PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner;
import com.konfigthis.client.model.PeopleAndPermissionsDeleteUserAddressResponse;
import com.konfigthis.client.model.PeopleAndPermissionsDeleteUserEmploymentResponse;
import com.konfigthis.client.model.PeopleAndPermissionsGetAllUsersDetailsResponseInner;
import com.konfigthis.client.model.PeopleAndPermissionsGetBasicUserDetailsResponseInner;
import com.konfigthis.client.model.PeopleAndPermissionsGetUsersResponse;
import com.konfigthis.client.model.PeopleAndPermissionsSaveCustomFieldValuesResponse;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserAddressRequest;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserAddressRequestRAWBODYInner;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserAddressResponse;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserEducationRequest;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserEducationRequestRAWBODYInner;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserEmploymentRequest;
import com.konfigthis.client.model.PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner;
import com.konfigthis.client.model.PeopleAndPermissionsUploadUserProfilePictureRequest;
import com.konfigthis.client.model.PeopleAndPermissionsUploadUserProfilePictureResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PeopleAndPermissionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleAndPermissionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleAndPermissionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addReportsToCall(String empId, String email, PeopleAndPermissionsAddReportsToRequest peopleAndPermissionsAddReportsToRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleAndPermissionsAddReportsToRequest;

        // create path and map variables
        String localVarPath = "/api/user/orgrelation/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empId", empId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addReportsToValidateBeforeCall(String empId, String email, PeopleAndPermissionsAddReportsToRequest peopleAndPermissionsAddReportsToRequest, final ApiCallback _callback) throws ApiException {
        return addReportsToCall(empId, email, peopleAndPermissionsAddReportsToRequest, _callback);

    }


    private ApiResponse<PeopleAndPermissionsAddReportsToResponse> addReportsToWithHttpInfo(String empId, String email, PeopleAndPermissionsAddReportsToRequest peopleAndPermissionsAddReportsToRequest) throws ApiException {
        okhttp3.Call localVarCall = addReportsToValidateBeforeCall(empId, email, peopleAndPermissionsAddReportsToRequest, null);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsAddReportsToResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addReportsToAsync(String empId, String email, PeopleAndPermissionsAddReportsToRequest peopleAndPermissionsAddReportsToRequest, final ApiCallback<PeopleAndPermissionsAddReportsToResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addReportsToValidateBeforeCall(empId, email, peopleAndPermissionsAddReportsToRequest, _callback);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsAddReportsToResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddReportsToRequestBuilder {
        private List<PeopleAndPermissionsAddReportsToRequestAddObjectsInner> addObjects;
        private String empId;
        private String email;

        private AddReportsToRequestBuilder() {
        }

        /**
         * Set addObjects
         * @param addObjects  (optional)
         * @return AddReportsToRequestBuilder
         */
        public AddReportsToRequestBuilder addObjects(List<PeopleAndPermissionsAddReportsToRequestAddObjectsInner> addObjects) {
            this.addObjects = addObjects;
            return this;
        }
        
        /**
         * Set empId
         * @param empId The unique identity of the employee.  (optional)
         * @return AddReportsToRequestBuilder
         */
        public AddReportsToRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Set email
         * @param email Email address of the user. (optional)
         * @return AddReportsToRequestBuilder
         */
        public AddReportsToRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for addReportsTo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleAndPermissionsAddReportsToRequest peopleAndPermissionsAddReportsToRequest = buildBodyParams();
            return addReportsToCall(empId, email, peopleAndPermissionsAddReportsToRequest, _callback);
        }

        private PeopleAndPermissionsAddReportsToRequest buildBodyParams() {
            PeopleAndPermissionsAddReportsToRequest peopleAndPermissionsAddReportsToRequest = new PeopleAndPermissionsAddReportsToRequest();
            peopleAndPermissionsAddReportsToRequest.addObjects(this.addObjects);
            return peopleAndPermissionsAddReportsToRequest;
        }

        /**
         * Execute addReportsTo request
         * @return PeopleAndPermissionsAddReportsToResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public PeopleAndPermissionsAddReportsToResponse execute() throws ApiException {
            PeopleAndPermissionsAddReportsToRequest peopleAndPermissionsAddReportsToRequest = buildBodyParams();
            ApiResponse<PeopleAndPermissionsAddReportsToResponse> localVarResp = addReportsToWithHttpInfo(empId, email, peopleAndPermissionsAddReportsToRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addReportsTo request with HTTP info returned
         * @return ApiResponse&lt;PeopleAndPermissionsAddReportsToResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleAndPermissionsAddReportsToResponse> executeWithHttpInfo() throws ApiException {
            PeopleAndPermissionsAddReportsToRequest peopleAndPermissionsAddReportsToRequest = buildBodyParams();
            return addReportsToWithHttpInfo(empId, email, peopleAndPermissionsAddReportsToRequest);
        }

        /**
         * Execute addReportsTo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleAndPermissionsAddReportsToResponse> _callback) throws ApiException {
            PeopleAndPermissionsAddReportsToRequest peopleAndPermissionsAddReportsToRequest = buildBodyParams();
            return addReportsToAsync(empId, email, peopleAndPermissionsAddReportsToRequest, _callback);
        }
    }

    /**
     * Add reports to
     * 
     * @return AddReportsToRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public AddReportsToRequestBuilder addReportsTo() throws IllegalArgumentException {
        return new AddReportsToRequestBuilder();
    }
    private okhttp3.Call createOrUpdateUserDetailsCall(PeopleAndPermissionsCreateOrUpdateUserDetailsRequest peopleAndPermissionsCreateOrUpdateUserDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleAndPermissionsCreateOrUpdateUserDetailsRequest;

        // create path and map variables
        String localVarPath = "/api/user/completeUserDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateUserDetailsValidateBeforeCall(PeopleAndPermissionsCreateOrUpdateUserDetailsRequest peopleAndPermissionsCreateOrUpdateUserDetailsRequest, final ApiCallback _callback) throws ApiException {
        return createOrUpdateUserDetailsCall(peopleAndPermissionsCreateOrUpdateUserDetailsRequest, _callback);

    }


    private ApiResponse<Object> createOrUpdateUserDetailsWithHttpInfo(PeopleAndPermissionsCreateOrUpdateUserDetailsRequest peopleAndPermissionsCreateOrUpdateUserDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateUserDetailsValidateBeforeCall(peopleAndPermissionsCreateOrUpdateUserDetailsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrUpdateUserDetailsAsync(PeopleAndPermissionsCreateOrUpdateUserDetailsRequest peopleAndPermissionsCreateOrUpdateUserDetailsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateUserDetailsValidateBeforeCall(peopleAndPermissionsCreateOrUpdateUserDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateUserDetailsRequestBuilder {
        private String firstName;
        private String email;
        private String lastName;
        private String empId;
        private String gender;
        private String guid;
        private String status;
        private String displayFullName;
        private String middleName;
        private String secondLastName;
        private String shortName;
        private String namePronunciation;
        private String familySuffix;
        private String workerType;
        private String userDateOfBirth;
        private String phone;
        private String cellPhone;
        private Integer position;
        private Integer departmentID;
        private Integer locationId;
        private String locationName;
        private String userStartDate;
        private List<String> reportsToEmail;
        private List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListInner> addressList;
        private List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationListInner> educationList;
        private List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactListInner> contactList;
        private List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner> financialList;
        private String customFieldValues;

        private CreateOrUpdateUserDetailsRequestBuilder() {
        }

        /**
         * Set firstName
         * @param firstName First name of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set email
         * @param email Mail ID of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Last name of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set empId
         * @param empId Employee ID of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Set gender
         * @param gender Gender of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set guid
         * @param guid The unique system generated ID of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder guid(String guid) {
            this.guid = guid;
            return this;
        }
        
        /**
         * Set status
         * @param status Status of the user. A - Active, I - Inactive, F - Future Joiner (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set displayFullName
         * @param displayFullName Display name of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder displayFullName(String displayFullName) {
            this.displayFullName = displayFullName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName Middle name of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set secondLastName
         * @param secondLastName Second Last name of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder secondLastName(String secondLastName) {
            this.secondLastName = secondLastName;
            return this;
        }
        
        /**
         * Set shortName
         * @param shortName Short name of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder shortName(String shortName) {
            this.shortName = shortName;
            return this;
        }
        
        /**
         * Set namePronunciation
         * @param namePronunciation Name Pronunciation (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder namePronunciation(String namePronunciation) {
            this.namePronunciation = namePronunciation;
            return this;
        }
        
        /**
         * Set familySuffix
         * @param familySuffix Family Suffix (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder familySuffix(String familySuffix) {
            this.familySuffix = familySuffix;
            return this;
        }
        
        /**
         * Set workerType
         * @param workerType Worker type of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder workerType(String workerType) {
            this.workerType = workerType;
            return this;
        }
        
        /**
         * Set userDateOfBirth
         * @param userDateOfBirth Birth date of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder userDateOfBirth(String userDateOfBirth) {
            this.userDateOfBirth = userDateOfBirth;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Phone number of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set cellPhone
         * @param cellPhone Cell phone of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder cellPhone(String cellPhone) {
            this.cellPhone = cellPhone;
            return this;
        }
        
        /**
         * Set position
         * @param position Profile ID of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder position(Integer position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set departmentID
         * @param departmentID Org Unit ID of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder departmentID(Integer departmentID) {
            this.departmentID = departmentID;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID of the user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder locationId(Integer locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set locationName
         * @param locationName Location of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder locationName(String locationName) {
            this.locationName = locationName;
            return this;
        }
        
        /**
         * Set userStartDate
         * @param userStartDate Start Date of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder userStartDate(String userStartDate) {
            this.userStartDate = userStartDate;
            return this;
        }
        
        /**
         * Set reportsToEmail
         * @param reportsToEmail Managers detail of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder reportsToEmail(List<String> reportsToEmail) {
            this.reportsToEmail = reportsToEmail;
            return this;
        }
        
        /**
         * Set addressList
         * @param addressList Address detail of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder addressList(List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListInner> addressList) {
            this.addressList = addressList;
            return this;
        }
        
        /**
         * Set educationList
         * @param educationList Education detail of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder educationList(List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationListInner> educationList) {
            this.educationList = educationList;
            return this;
        }
        
        /**
         * Set contactList
         * @param contactList Contact detail of user (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder contactList(List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactListInner> contactList) {
            this.contactList = contactList;
            return this;
        }
        
        /**
         * Set financialList
         * @param financialList Financial detail of user. (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder financialList(List<PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner> financialList) {
            this.financialList = financialList;
            return this;
        }
        
        /**
         * Set customFieldValues
         * @param customFieldValues key - cfcode , value - cfvalue (optional)
         * @return CreateOrUpdateUserDetailsRequestBuilder
         */
        public CreateOrUpdateUserDetailsRequestBuilder customFieldValues(String customFieldValues) {
            this.customFieldValues = customFieldValues;
            return this;
        }
        
        /**
         * Build call for createOrUpdateUserDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleAndPermissionsCreateOrUpdateUserDetailsRequest peopleAndPermissionsCreateOrUpdateUserDetailsRequest = buildBodyParams();
            return createOrUpdateUserDetailsCall(peopleAndPermissionsCreateOrUpdateUserDetailsRequest, _callback);
        }

        private PeopleAndPermissionsCreateOrUpdateUserDetailsRequest buildBodyParams() {
            PeopleAndPermissionsCreateOrUpdateUserDetailsRequest peopleAndPermissionsCreateOrUpdateUserDetailsRequest = new PeopleAndPermissionsCreateOrUpdateUserDetailsRequest();
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.firstName(this.firstName);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.email(this.email);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.lastName(this.lastName);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.empId(this.empId);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.gender(this.gender);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.guid(this.guid);
            if (this.status != null)
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.status(PeopleAndPermissionsCreateOrUpdateUserDetailsRequest.StatusEnum.fromValue(this.status));
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.displayFullName(this.displayFullName);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.middleName(this.middleName);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.secondLastName(this.secondLastName);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.shortName(this.shortName);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.namePronunciation(this.namePronunciation);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.familySuffix(this.familySuffix);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.workerType(this.workerType);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.userDateOfBirth(this.userDateOfBirth);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.phone(this.phone);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.cellPhone(this.cellPhone);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.position(this.position);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.departmentID(this.departmentID);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.locationId(this.locationId);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.locationName(this.locationName);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.userStartDate(this.userStartDate);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.reportsToEmail(this.reportsToEmail);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.addressList(this.addressList);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.educationList(this.educationList);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.contactList(this.contactList);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.financialList(this.financialList);
            peopleAndPermissionsCreateOrUpdateUserDetailsRequest.customFieldValues(this.customFieldValues);
            return peopleAndPermissionsCreateOrUpdateUserDetailsRequest;
        }

        /**
         * Execute createOrUpdateUserDetails request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            PeopleAndPermissionsCreateOrUpdateUserDetailsRequest peopleAndPermissionsCreateOrUpdateUserDetailsRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createOrUpdateUserDetailsWithHttpInfo(peopleAndPermissionsCreateOrUpdateUserDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrUpdateUserDetails request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            PeopleAndPermissionsCreateOrUpdateUserDetailsRequest peopleAndPermissionsCreateOrUpdateUserDetailsRequest = buildBodyParams();
            return createOrUpdateUserDetailsWithHttpInfo(peopleAndPermissionsCreateOrUpdateUserDetailsRequest);
        }

        /**
         * Execute createOrUpdateUserDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            PeopleAndPermissionsCreateOrUpdateUserDetailsRequest peopleAndPermissionsCreateOrUpdateUserDetailsRequest = buildBodyParams();
            return createOrUpdateUserDetailsAsync(peopleAndPermissionsCreateOrUpdateUserDetailsRequest, _callback);
        }
    }

    /**
     * Create or Update user
     * 
     * @return CreateOrUpdateUserDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateUserDetailsRequestBuilder createOrUpdateUserDetails() throws IllegalArgumentException {
        return new CreateOrUpdateUserDetailsRequestBuilder();
    }
    private okhttp3.Call createUserCall(String firstName, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(String firstName, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling createUser(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling createUser(Async)");
        }

        return createUserCall(firstName, email, _callback);

    }


    private ApiResponse<Object> createUserWithHttpInfo(String firstName, String email) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(firstName, email, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserAsync(String firstName, String email, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(firstName, email, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateUserRequestBuilder {
        private final String firstName;
        private final String email;

        private CreateUserRequestBuilder(String firstName, String email) {
            this.firstName = firstName;
            this.email = email;
        }

        /**
         * Build call for createUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createUserCall(firstName, email, _callback);
        }


        /**
         * Execute createUser request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = createUserWithHttpInfo(firstName, email);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createUser request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return createUserWithHttpInfo(firstName, email);
        }

        /**
         * Execute createUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return createUserAsync(firstName, email, _callback);
        }
    }

    /**
     * Create user
     * 
     * @param firstName First name of user. (required)
     * @param email Mail ID of user. (required)
     * @return CreateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserRequestBuilder createUser(String firstName, String email) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new CreateUserRequestBuilder(firstName, email);
    }
    private okhttp3.Call createUserCompensationCall(String value, String compensationType, String currencyCode, String period, String effectivedate, String status, String enddate, String notes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/compensation/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (compensationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compensationType", compensationType));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyCode", currencyCode));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (effectivedate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectivedate", effectivedate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserCompensationValidateBeforeCall(String value, String compensationType, String currencyCode, String period, String effectivedate, String status, String enddate, String notes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling createUserCompensation(Async)");
        }

        // verify the required parameter 'compensationType' is set
        if (compensationType == null) {
            throw new ApiException("Missing the required parameter 'compensationType' when calling createUserCompensation(Async)");
        }

        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling createUserCompensation(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling createUserCompensation(Async)");
        }

        // verify the required parameter 'effectivedate' is set
        if (effectivedate == null) {
            throw new ApiException("Missing the required parameter 'effectivedate' when calling createUserCompensation(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling createUserCompensation(Async)");
        }

        return createUserCompensationCall(value, compensationType, currencyCode, period, effectivedate, status, enddate, notes, _callback);

    }


    private ApiResponse<Object> createUserCompensationWithHttpInfo(String value, String compensationType, String currencyCode, String period, String effectivedate, String status, String enddate, String notes) throws ApiException {
        okhttp3.Call localVarCall = createUserCompensationValidateBeforeCall(value, compensationType, currencyCode, period, effectivedate, status, enddate, notes, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserCompensationAsync(String value, String compensationType, String currencyCode, String period, String effectivedate, String status, String enddate, String notes, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserCompensationValidateBeforeCall(value, compensationType, currencyCode, period, effectivedate, status, enddate, notes, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateUserCompensationRequestBuilder {
        private final String value;
        private final String compensationType;
        private final String currencyCode;
        private final String period;
        private final String effectivedate;
        private final String status;
        private String enddate;
        private String notes;

        private CreateUserCompensationRequestBuilder(String value, String compensationType, String currencyCode, String period, String effectivedate, String status) {
            this.value = value;
            this.compensationType = compensationType;
            this.currencyCode = currencyCode;
            this.period = period;
            this.effectivedate = effectivedate;
            this.status = status;
        }

        /**
         * Set enddate
         * @param enddate  (optional)
         * @return CreateUserCompensationRequestBuilder
         */
        public CreateUserCompensationRequestBuilder enddate(String enddate) {
            this.enddate = enddate;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return CreateUserCompensationRequestBuilder
         */
        public CreateUserCompensationRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for createUserCompensation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createUserCompensationCall(value, compensationType, currencyCode, period, effectivedate, status, enddate, notes, _callback);
        }


        /**
         * Execute createUserCompensation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = createUserCompensationWithHttpInfo(value, compensationType, currencyCode, period, effectivedate, status, enddate, notes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createUserCompensation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return createUserCompensationWithHttpInfo(value, compensationType, currencyCode, period, effectivedate, status, enddate, notes);
        }

        /**
         * Execute createUserCompensation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return createUserCompensationAsync(value, compensationType, currencyCode, period, effectivedate, status, enddate, notes, _callback);
        }
    }

    /**
     * Create compensation for user
     * 
     * @param value Value of compensation (required)
     * @param compensationType Type of compensation.   sal - Salary, pay - , INCTV - Incentive, SVCR - Severance (required)
     * @param currencyCode  (required)
     * @param period Time period for compensation.   HRLY - Hourly, DLY - Daily, WKLY - Weekly,  BWKLY - Bi-Weekly, MTHLY - Monthly, BMTH - Bi-Monthly, QTRLY - Quarterly, BYRLY - Bi-Yearly, YRLY - Yearly,   ONEF - OneOff (required)
     * @param effectivedate  (required)
     * @param status Status of compensation.   ACTV - Active, ARCHV - Archive, PVNL - Provisional (required)
     * @return CreateUserCompensationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserCompensationRequestBuilder createUserCompensation(String value, String compensationType, String currencyCode, String period, String effectivedate, String status) throws IllegalArgumentException {
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        if (compensationType == null) throw new IllegalArgumentException("\"compensationType\" is required but got null");
            

        if (currencyCode == null) throw new IllegalArgumentException("\"currencyCode\" is required but got null");
            

        if (period == null) throw new IllegalArgumentException("\"period\" is required but got null");
            

        if (effectivedate == null) throw new IllegalArgumentException("\"effectivedate\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new CreateUserCompensationRequestBuilder(value, compensationType, currencyCode, period, effectivedate, status);
    }
    private okhttp3.Call deleteUserAddressCall(String addressId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/address/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressId", addressId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserAddressValidateBeforeCall(String addressId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling deleteUserAddress(Async)");
        }

        return deleteUserAddressCall(addressId, _callback);

    }


    private ApiResponse<PeopleAndPermissionsDeleteUserAddressResponse> deleteUserAddressWithHttpInfo(String addressId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserAddressValidateBeforeCall(addressId, null);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsDeleteUserAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteUserAddressAsync(String addressId, final ApiCallback<PeopleAndPermissionsDeleteUserAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserAddressValidateBeforeCall(addressId, _callback);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsDeleteUserAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteUserAddressRequestBuilder {
        private final String addressId;

        private DeleteUserAddressRequestBuilder(String addressId) {
            this.addressId = addressId;
        }

        /**
         * Build call for deleteUserAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserAddressCall(addressId, _callback);
        }


        /**
         * Execute deleteUserAddress request
         * @return PeopleAndPermissionsDeleteUserAddressResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public PeopleAndPermissionsDeleteUserAddressResponse execute() throws ApiException {
            ApiResponse<PeopleAndPermissionsDeleteUserAddressResponse> localVarResp = deleteUserAddressWithHttpInfo(addressId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteUserAddress request with HTTP info returned
         * @return ApiResponse&lt;PeopleAndPermissionsDeleteUserAddressResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleAndPermissionsDeleteUserAddressResponse> executeWithHttpInfo() throws ApiException {
            return deleteUserAddressWithHttpInfo(addressId);
        }

        /**
         * Execute deleteUserAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleAndPermissionsDeleteUserAddressResponse> _callback) throws ApiException {
            return deleteUserAddressAsync(addressId, _callback);
        }
    }

    /**
     * Delete User Address
     * 
     * @param addressId The unique ID of the address. (required)
     * @return DeleteUserAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserAddressRequestBuilder deleteUserAddress(String addressId) throws IllegalArgumentException {
        if (addressId == null) throw new IllegalArgumentException("\"addressId\" is required but got null");
            

        return new DeleteUserAddressRequestBuilder(addressId);
    }
    private okhttp3.Call deleteUserEducationCall(String educationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/education/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (educationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("educationId", educationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserEducationValidateBeforeCall(String educationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'educationId' is set
        if (educationId == null) {
            throw new ApiException("Missing the required parameter 'educationId' when calling deleteUserEducation(Async)");
        }

        return deleteUserEducationCall(educationId, _callback);

    }


    private ApiResponse<Object> deleteUserEducationWithHttpInfo(String educationId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserEducationValidateBeforeCall(educationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteUserEducationAsync(String educationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserEducationValidateBeforeCall(educationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteUserEducationRequestBuilder {
        private final String educationId;

        private DeleteUserEducationRequestBuilder(String educationId) {
            this.educationId = educationId;
        }

        /**
         * Build call for deleteUserEducation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserEducationCall(educationId, _callback);
        }


        /**
         * Execute deleteUserEducation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteUserEducationWithHttpInfo(educationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteUserEducation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteUserEducationWithHttpInfo(educationId);
        }

        /**
         * Execute deleteUserEducation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteUserEducationAsync(educationId, _callback);
        }
    }

    /**
     * Delete User Education
     * 
     * @param educationId Education ID the user (required)
     * @return DeleteUserEducationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserEducationRequestBuilder deleteUserEducation(String educationId) throws IllegalArgumentException {
        if (educationId == null) throw new IllegalArgumentException("\"educationId\" is required but got null");
            

        return new DeleteUserEducationRequestBuilder(educationId);
    }
    private okhttp3.Call deleteUserEmploymentCall(Integer empid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/employment/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (empid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empid", empid));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserEmploymentValidateBeforeCall(Integer empid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'empid' is set
        if (empid == null) {
            throw new ApiException("Missing the required parameter 'empid' when calling deleteUserEmployment(Async)");
        }

        return deleteUserEmploymentCall(empid, _callback);

    }


    private ApiResponse<PeopleAndPermissionsDeleteUserEmploymentResponse> deleteUserEmploymentWithHttpInfo(Integer empid) throws ApiException {
        okhttp3.Call localVarCall = deleteUserEmploymentValidateBeforeCall(empid, null);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsDeleteUserEmploymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteUserEmploymentAsync(Integer empid, final ApiCallback<PeopleAndPermissionsDeleteUserEmploymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserEmploymentValidateBeforeCall(empid, _callback);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsDeleteUserEmploymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteUserEmploymentRequestBuilder {
        private final Integer empid;

        private DeleteUserEmploymentRequestBuilder(Integer empid) {
            this.empid = empid;
        }

        /**
         * Build call for deleteUserEmployment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserEmploymentCall(empid, _callback);
        }


        /**
         * Execute deleteUserEmployment request
         * @return PeopleAndPermissionsDeleteUserEmploymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public PeopleAndPermissionsDeleteUserEmploymentResponse execute() throws ApiException {
            ApiResponse<PeopleAndPermissionsDeleteUserEmploymentResponse> localVarResp = deleteUserEmploymentWithHttpInfo(empid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteUserEmployment request with HTTP info returned
         * @return ApiResponse&lt;PeopleAndPermissionsDeleteUserEmploymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleAndPermissionsDeleteUserEmploymentResponse> executeWithHttpInfo() throws ApiException {
            return deleteUserEmploymentWithHttpInfo(empid);
        }

        /**
         * Execute deleteUserEmployment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleAndPermissionsDeleteUserEmploymentResponse> _callback) throws ApiException {
            return deleteUserEmploymentAsync(empid, _callback);
        }
    }

    /**
     * Deletes User Employment
     * 
     * @param empid The unique identity of the employee.  (required)
     * @return DeleteUserEmploymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserEmploymentRequestBuilder deleteUserEmployment(Integer empid) throws IllegalArgumentException {
        if (empid == null) throw new IllegalArgumentException("\"empid\" is required but got null");
        return new DeleteUserEmploymentRequestBuilder(empid);
    }
    private okhttp3.Call getAllUsersDetailsCall(String name, Integer page, Integer pageSize, String search, LocalDate startDateBefore, LocalDate startDateAfter, LocalDate endDateBefore, LocalDate endDateAfter, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (startDateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateBefore", startDateBefore));
        }

        if (startDateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateAfter", startDateAfter));
        }

        if (endDateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateBefore", endDateBefore));
        }

        if (endDateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateAfter", endDateAfter));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUsersDetailsValidateBeforeCall(String name, Integer page, Integer pageSize, String search, LocalDate startDateBefore, LocalDate startDateAfter, LocalDate endDateBefore, LocalDate endDateAfter, String status, final ApiCallback _callback) throws ApiException {
        return getAllUsersDetailsCall(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, _callback);

    }


    private ApiResponse<List<PeopleAndPermissionsGetAllUsersDetailsResponseInner>> getAllUsersDetailsWithHttpInfo(String name, Integer page, Integer pageSize, String search, LocalDate startDateBefore, LocalDate startDateAfter, LocalDate endDateBefore, LocalDate endDateAfter, String status) throws ApiException {
        okhttp3.Call localVarCall = getAllUsersDetailsValidateBeforeCall(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, null);
        Type localVarReturnType = new TypeToken<List<PeopleAndPermissionsGetAllUsersDetailsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUsersDetailsAsync(String name, Integer page, Integer pageSize, String search, LocalDate startDateBefore, LocalDate startDateAfter, LocalDate endDateBefore, LocalDate endDateAfter, String status, final ApiCallback<List<PeopleAndPermissionsGetAllUsersDetailsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUsersDetailsValidateBeforeCall(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, _callback);
        Type localVarReturnType = new TypeToken<List<PeopleAndPermissionsGetAllUsersDetailsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUsersDetailsRequestBuilder {
        private String name;
        private Integer page;
        private Integer pageSize;
        private String search;
        private LocalDate startDateBefore;
        private LocalDate startDateAfter;
        private LocalDate endDateBefore;
        private LocalDate endDateAfter;
        private String status;

        private GetAllUsersDetailsRequestBuilder() {
        }

        /**
         * Set name
         * @param name Name of the user. (optional)
         * @return GetAllUsersDetailsRequestBuilder
         */
        public GetAllUsersDetailsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number. (optional, default to 1)
         * @return GetAllUsersDetailsRequestBuilder
         */
        public GetAllUsersDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of users per page. (optional, default to 20)
         * @return GetAllUsersDetailsRequestBuilder
         */
        public GetAllUsersDetailsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search  (optional)
         * @return GetAllUsersDetailsRequestBuilder
         */
        public GetAllUsersDetailsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set startDateBefore
         * @param startDateBefore The date before the assigned Start Date. (optional)
         * @return GetAllUsersDetailsRequestBuilder
         */
        public GetAllUsersDetailsRequestBuilder startDateBefore(LocalDate startDateBefore) {
            this.startDateBefore = startDateBefore;
            return this;
        }
        
        /**
         * Set startDateAfter
         * @param startDateAfter The date after the assigned Start Date. (optional)
         * @return GetAllUsersDetailsRequestBuilder
         */
        public GetAllUsersDetailsRequestBuilder startDateAfter(LocalDate startDateAfter) {
            this.startDateAfter = startDateAfter;
            return this;
        }
        
        /**
         * Set endDateBefore
         * @param endDateBefore The date before the assigned End Date. (optional)
         * @return GetAllUsersDetailsRequestBuilder
         */
        public GetAllUsersDetailsRequestBuilder endDateBefore(LocalDate endDateBefore) {
            this.endDateBefore = endDateBefore;
            return this;
        }
        
        /**
         * Set endDateAfter
         * @param endDateAfter The date after the assigned End Date. (optional)
         * @return GetAllUsersDetailsRequestBuilder
         */
        public GetAllUsersDetailsRequestBuilder endDateAfter(LocalDate endDateAfter) {
            this.endDateAfter = endDateAfter;
            return this;
        }
        
        /**
         * Set status
         * @param status Status of the user.    A- Active User   I- Inactive User   F- Future Joiner  (optional, default to A)
         * @return GetAllUsersDetailsRequestBuilder
         */
        public GetAllUsersDetailsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for getAllUsersDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUsersDetailsCall(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, _callback);
        }


        /**
         * Execute getAllUsersDetails request
         * @return List&lt;PeopleAndPermissionsGetAllUsersDetailsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public List<PeopleAndPermissionsGetAllUsersDetailsResponseInner> execute() throws ApiException {
            ApiResponse<List<PeopleAndPermissionsGetAllUsersDetailsResponseInner>> localVarResp = getAllUsersDetailsWithHttpInfo(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUsersDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PeopleAndPermissionsGetAllUsersDetailsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PeopleAndPermissionsGetAllUsersDetailsResponseInner>> executeWithHttpInfo() throws ApiException {
            return getAllUsersDetailsWithHttpInfo(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status);
        }

        /**
         * Execute getAllUsersDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PeopleAndPermissionsGetAllUsersDetailsResponseInner>> _callback) throws ApiException {
            return getAllUsersDetailsAsync(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, _callback);
        }
    }

    /**
     * Retrieve all users details
     * 
     * @return GetAllUsersDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUsersDetailsRequestBuilder getAllUsersDetails() throws IllegalArgumentException {
        return new GetAllUsersDetailsRequestBuilder();
    }
    private okhttp3.Call getBasicUserDetailsCall(String name, Integer page, Integer pageSize, String search, LocalDate startDateBefore, LocalDate startDateAfter, LocalDate endDateBefore, LocalDate endDateAfter, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/users/basic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (startDateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateBefore", startDateBefore));
        }

        if (startDateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateAfter", startDateAfter));
        }

        if (endDateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateBefore", endDateBefore));
        }

        if (endDateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateAfter", endDateAfter));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasicUserDetailsValidateBeforeCall(String name, Integer page, Integer pageSize, String search, LocalDate startDateBefore, LocalDate startDateAfter, LocalDate endDateBefore, LocalDate endDateAfter, String status, final ApiCallback _callback) throws ApiException {
        return getBasicUserDetailsCall(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, _callback);

    }


    private ApiResponse<List<PeopleAndPermissionsGetBasicUserDetailsResponseInner>> getBasicUserDetailsWithHttpInfo(String name, Integer page, Integer pageSize, String search, LocalDate startDateBefore, LocalDate startDateAfter, LocalDate endDateBefore, LocalDate endDateAfter, String status) throws ApiException {
        okhttp3.Call localVarCall = getBasicUserDetailsValidateBeforeCall(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, null);
        Type localVarReturnType = new TypeToken<List<PeopleAndPermissionsGetBasicUserDetailsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBasicUserDetailsAsync(String name, Integer page, Integer pageSize, String search, LocalDate startDateBefore, LocalDate startDateAfter, LocalDate endDateBefore, LocalDate endDateAfter, String status, final ApiCallback<List<PeopleAndPermissionsGetBasicUserDetailsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasicUserDetailsValidateBeforeCall(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, _callback);
        Type localVarReturnType = new TypeToken<List<PeopleAndPermissionsGetBasicUserDetailsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBasicUserDetailsRequestBuilder {
        private String name;
        private Integer page;
        private Integer pageSize;
        private String search;
        private LocalDate startDateBefore;
        private LocalDate startDateAfter;
        private LocalDate endDateBefore;
        private LocalDate endDateAfter;
        private String status;

        private GetBasicUserDetailsRequestBuilder() {
        }

        /**
         * Set name
         * @param name Name of the user. (optional)
         * @return GetBasicUserDetailsRequestBuilder
         */
        public GetBasicUserDetailsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number. (optional, default to 1)
         * @return GetBasicUserDetailsRequestBuilder
         */
        public GetBasicUserDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of users per page. (optional, default to 20)
         * @return GetBasicUserDetailsRequestBuilder
         */
        public GetBasicUserDetailsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search  (optional)
         * @return GetBasicUserDetailsRequestBuilder
         */
        public GetBasicUserDetailsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set startDateBefore
         * @param startDateBefore The date before the assigned Start Date. (optional)
         * @return GetBasicUserDetailsRequestBuilder
         */
        public GetBasicUserDetailsRequestBuilder startDateBefore(LocalDate startDateBefore) {
            this.startDateBefore = startDateBefore;
            return this;
        }
        
        /**
         * Set startDateAfter
         * @param startDateAfter The date after the assigned Start Date. (optional)
         * @return GetBasicUserDetailsRequestBuilder
         */
        public GetBasicUserDetailsRequestBuilder startDateAfter(LocalDate startDateAfter) {
            this.startDateAfter = startDateAfter;
            return this;
        }
        
        /**
         * Set endDateBefore
         * @param endDateBefore The date before the assigned End Date. (optional)
         * @return GetBasicUserDetailsRequestBuilder
         */
        public GetBasicUserDetailsRequestBuilder endDateBefore(LocalDate endDateBefore) {
            this.endDateBefore = endDateBefore;
            return this;
        }
        
        /**
         * Set endDateAfter
         * @param endDateAfter The date after the assigned End Date. (optional)
         * @return GetBasicUserDetailsRequestBuilder
         */
        public GetBasicUserDetailsRequestBuilder endDateAfter(LocalDate endDateAfter) {
            this.endDateAfter = endDateAfter;
            return this;
        }
        
        /**
         * Set status
         * @param status Status of the user.    A- Active User   I- Inactive User   F- Future Joiner  (optional, default to A)
         * @return GetBasicUserDetailsRequestBuilder
         */
        public GetBasicUserDetailsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for getBasicUserDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBasicUserDetailsCall(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, _callback);
        }


        /**
         * Execute getBasicUserDetails request
         * @return List&lt;PeopleAndPermissionsGetBasicUserDetailsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public List<PeopleAndPermissionsGetBasicUserDetailsResponseInner> execute() throws ApiException {
            ApiResponse<List<PeopleAndPermissionsGetBasicUserDetailsResponseInner>> localVarResp = getBasicUserDetailsWithHttpInfo(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBasicUserDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PeopleAndPermissionsGetBasicUserDetailsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PeopleAndPermissionsGetBasicUserDetailsResponseInner>> executeWithHttpInfo() throws ApiException {
            return getBasicUserDetailsWithHttpInfo(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status);
        }

        /**
         * Execute getBasicUserDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PeopleAndPermissionsGetBasicUserDetailsResponseInner>> _callback) throws ApiException {
            return getBasicUserDetailsAsync(name, page, pageSize, search, startDateBefore, startDateAfter, endDateBefore, endDateAfter, status, _callback);
        }
    }

    /**
     * Retrieve basic user details
     * 
     * @return GetBasicUserDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
     </table>
     */
    public GetBasicUserDetailsRequestBuilder getBasicUserDetails() throws IllegalArgumentException {
        return new GetBasicUserDetailsRequestBuilder();
    }
    private okhttp3.Call getFinancialRecordCall(String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/compensation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialRecordValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        return getFinancialRecordCall(email, _callback);

    }


    private ApiResponse<Object> getFinancialRecordWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = getFinancialRecordValidateBeforeCall(email, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFinancialRecordAsync(String email, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialRecordValidateBeforeCall(email, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFinancialRecordRequestBuilder {
        private String email;

        private GetFinancialRecordRequestBuilder() {
        }

        /**
         * Set email
         * @param email Email address of the user. (optional)
         * @return GetFinancialRecordRequestBuilder
         */
        public GetFinancialRecordRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for getFinancialRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFinancialRecordCall(email, _callback);
        }


        /**
         * Execute getFinancialRecord request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getFinancialRecordWithHttpInfo(email);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFinancialRecord request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getFinancialRecordWithHttpInfo(email);
        }

        /**
         * Execute getFinancialRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getFinancialRecordAsync(email, _callback);
        }
    }

    /**
     * Retrieve user financial record
     * 
     * @return GetFinancialRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialRecordRequestBuilder getFinancialRecord() throws IllegalArgumentException {
        return new GetFinancialRecordRequestBuilder();
    }
    private okhttp3.Call getFinancialStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/update/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getFinancialStatusCall(_callback);

    }


    private ApiResponse<Object> getFinancialStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFinancialStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFinancialStatusAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFinancialStatusRequestBuilder {

        private GetFinancialStatusRequestBuilder() {
        }

        /**
         * Build call for getFinancialStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFinancialStatusCall(_callback);
        }


        /**
         * Execute getFinancialStatus request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getFinancialStatusWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFinancialStatus request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getFinancialStatusWithHttpInfo();
        }

        /**
         * Execute getFinancialStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getFinancialStatusAsync(_callback);
        }
    }

    /**
     * Retrieve user financial status
     * 
     * @return GetFinancialStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialStatusRequestBuilder getFinancialStatus() throws IllegalArgumentException {
        return new GetFinancialStatusRequestBuilder();
    }
    private okhttp3.Call getUserBasicInformationCall(String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/basic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserBasicInformationValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        return getUserBasicInformationCall(email, _callback);

    }


    private ApiResponse<Object> getUserBasicInformationWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = getUserBasicInformationValidateBeforeCall(email, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserBasicInformationAsync(String email, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserBasicInformationValidateBeforeCall(email, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserBasicInformationRequestBuilder {
        private String email;

        private GetUserBasicInformationRequestBuilder() {
        }

        /**
         * Set email
         * @param email Email of user (optional)
         * @return GetUserBasicInformationRequestBuilder
         */
        public GetUserBasicInformationRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for getUserBasicInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserBasicInformationCall(email, _callback);
        }


        /**
         * Execute getUserBasicInformation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUserBasicInformationWithHttpInfo(email);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserBasicInformation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUserBasicInformationWithHttpInfo(email);
        }

        /**
         * Execute getUserBasicInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUserBasicInformationAsync(email, _callback);
        }
    }

    /**
     * Retrieve user basic information
     * 
     * @return GetUserBasicInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetUserBasicInformationRequestBuilder getUserBasicInformation() throws IllegalArgumentException {
        return new GetUserBasicInformationRequestBuilder();
    }
    private okhttp3.Call getUserDetailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserDetailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserDetailsCall(_callback);

    }


    private ApiResponse<Object> getUserDetailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserDetailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserDetailsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserDetailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserDetailsRequestBuilder {

        private GetUserDetailsRequestBuilder() {
        }

        /**
         * Build call for getUserDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserDetailsCall(_callback);
        }


        /**
         * Execute getUserDetails request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUserDetailsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserDetails request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUserDetailsWithHttpInfo();
        }

        /**
         * Execute getUserDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUserDetailsAsync(_callback);
        }
    }

    /**
     * Retrieve user details
     * 
     * @return GetUserDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetUserDetailsRequestBuilder getUserDetails() throws IllegalArgumentException {
        return new GetUserDetailsRequestBuilder();
    }
    private okhttp3.Call getUserListCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserListValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        return getUserListCall(name, _callback);

    }


    private ApiResponse<Object> getUserListWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getUserListValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserListAsync(String name, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserListValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserListRequestBuilder {
        private String name;

        private GetUserListRequestBuilder() {
        }

        /**
         * Set name
         * @param name  (optional)
         * @return GetUserListRequestBuilder
         */
        public GetUserListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for getUserList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserListCall(name, _callback);
        }


        /**
         * Execute getUserList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUserListWithHttpInfo(name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUserListWithHttpInfo(name);
        }

        /**
         * Execute getUserList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUserListAsync(name, _callback);
        }
    }

    /**
     * Retrieve a user or list of users
     * 
     * @return GetUserListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetUserListRequestBuilder getUserList() throws IllegalArgumentException {
        return new GetUserListRequestBuilder();
    }
    private okhttp3.Call getUserPermissionsAndMenuConfigurationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPermissionsAndMenuConfigurationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserPermissionsAndMenuConfigurationsCall(_callback);

    }


    private ApiResponse<Object> getUserPermissionsAndMenuConfigurationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserPermissionsAndMenuConfigurationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPermissionsAndMenuConfigurationsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPermissionsAndMenuConfigurationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPermissionsAndMenuConfigurationsRequestBuilder {

        private GetUserPermissionsAndMenuConfigurationsRequestBuilder() {
        }

        /**
         * Build call for getUserPermissionsAndMenuConfigurations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPermissionsAndMenuConfigurationsCall(_callback);
        }


        /**
         * Execute getUserPermissionsAndMenuConfigurations request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUserPermissionsAndMenuConfigurationsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPermissionsAndMenuConfigurations request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUserPermissionsAndMenuConfigurationsWithHttpInfo();
        }

        /**
         * Execute getUserPermissionsAndMenuConfigurations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUserPermissionsAndMenuConfigurationsAsync(_callback);
        }
    }

    /**
     * Retrieve user permissions and menu configurations
     * 
     * @return GetUserPermissionsAndMenuConfigurationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPermissionsAndMenuConfigurationsRequestBuilder getUserPermissionsAndMenuConfigurations() throws IllegalArgumentException {
        return new GetUserPermissionsAndMenuConfigurationsRequestBuilder();
    }
    private okhttp3.Call getUsersCall(String name, Integer page, Integer pageSize, String sortBy, String sortOrder, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(String name, Integer page, Integer pageSize, String sortBy, String sortOrder, String status, final ApiCallback _callback) throws ApiException {
        return getUsersCall(name, page, pageSize, sortBy, sortOrder, status, _callback);

    }


    private ApiResponse<PeopleAndPermissionsGetUsersResponse> getUsersWithHttpInfo(String name, Integer page, Integer pageSize, String sortBy, String sortOrder, String status) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(name, page, pageSize, sortBy, sortOrder, status, null);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsGetUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUsersAsync(String name, Integer page, Integer pageSize, String sortBy, String sortOrder, String status, final ApiCallback<PeopleAndPermissionsGetUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(name, page, pageSize, sortBy, sortOrder, status, _callback);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsGetUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUsersRequestBuilder {
        private String name;
        private Integer page;
        private Integer pageSize;
        private String sortBy;
        private String sortOrder;
        private String status;

        private GetUsersRequestBuilder() {
        }

        /**
         * Set name
         * @param name Name of the user. (optional)
         * @return GetUsersRequestBuilder
         */
        public GetUsersRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number. (optional, default to 1)
         * @return GetUsersRequestBuilder
         */
        public GetUsersRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of users per page. (optional, default to 20)
         * @return GetUsersRequestBuilder
         */
        public GetUsersRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy  (optional)
         * @return GetUsersRequestBuilder
         */
        public GetUsersRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order to sort the users.   asc- Ascending Order   desc- Descending Order  (optional, default to asc)
         * @return GetUsersRequestBuilder
         */
        public GetUsersRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set status
         * @param status Status of the user.    A- Active User   I- Inactive User   F- Future Joiner  (optional, default to A)
         * @return GetUsersRequestBuilder
         */
        public GetUsersRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for getUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUsersCall(name, page, pageSize, sortBy, sortOrder, status, _callback);
        }


        /**
         * Execute getUsers request
         * @return PeopleAndPermissionsGetUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PeopleAndPermissionsGetUsersResponse execute() throws ApiException {
            ApiResponse<PeopleAndPermissionsGetUsersResponse> localVarResp = getUsersWithHttpInfo(name, page, pageSize, sortBy, sortOrder, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUsers request with HTTP info returned
         * @return ApiResponse&lt;PeopleAndPermissionsGetUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleAndPermissionsGetUsersResponse> executeWithHttpInfo() throws ApiException {
            return getUsersWithHttpInfo(name, page, pageSize, sortBy, sortOrder, status);
        }

        /**
         * Execute getUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleAndPermissionsGetUsersResponse> _callback) throws ApiException {
            return getUsersAsync(name, page, pageSize, sortBy, sortOrder, status, _callback);
        }
    }

    /**
     * Retrieve users
     * 
     * @return GetUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetUsersRequestBuilder getUsers() throws IllegalArgumentException {
        return new GetUsersRequestBuilder();
    }
    private okhttp3.Call saveCustomFieldValuesCall(String empId, String guid, String email, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/user/saveCustomFieldValues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empId", empId));
        }

        if (guid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guid", guid));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCustomFieldValuesValidateBeforeCall(String empId, String guid, String email, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        return saveCustomFieldValuesCall(empId, guid, email, requestBody, _callback);

    }


    private ApiResponse<PeopleAndPermissionsSaveCustomFieldValuesResponse> saveCustomFieldValuesWithHttpInfo(String empId, String guid, String email, List<Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = saveCustomFieldValuesValidateBeforeCall(empId, guid, email, requestBody, null);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsSaveCustomFieldValuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveCustomFieldValuesAsync(String empId, String guid, String email, List<Object> requestBody, final ApiCallback<PeopleAndPermissionsSaveCustomFieldValuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCustomFieldValuesValidateBeforeCall(empId, guid, email, requestBody, _callback);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsSaveCustomFieldValuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SaveCustomFieldValuesRequestBuilder {
        private String empId;
        private String guid;
        private String email;
        private List<Object> requestBody;

        private SaveCustomFieldValuesRequestBuilder() {
        }

        /**
         * Set requestBody
         * @param requestBody Custom fields (optional)
         * @return SaveCustomFieldValuesRequestBuilder
         */
        public SaveCustomFieldValuesRequestBuilder requestBody(List<Object> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Set empId
         * @param empId The unique identity of the employee. (optional)
         * @return SaveCustomFieldValuesRequestBuilder
         */
        public SaveCustomFieldValuesRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Set guid
         * @param guid The unique system generated ID of the user. (optional)
         * @return SaveCustomFieldValuesRequestBuilder
         */
        public SaveCustomFieldValuesRequestBuilder guid(String guid) {
            this.guid = guid;
            return this;
        }
        
        /**
         * Set email
         * @param email Email address of the user. (optional)
         * @return SaveCustomFieldValuesRequestBuilder
         */
        public SaveCustomFieldValuesRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for saveCustomFieldValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<Object> requestBody = buildBodyParams();
            return saveCustomFieldValuesCall(empId, guid, email, requestBody, _callback);
        }

        private List<Object> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute saveCustomFieldValues request
         * @return PeopleAndPermissionsSaveCustomFieldValuesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public PeopleAndPermissionsSaveCustomFieldValuesResponse execute() throws ApiException {
            List<Object> requestBody = buildBodyParams();
            ApiResponse<PeopleAndPermissionsSaveCustomFieldValuesResponse> localVarResp = saveCustomFieldValuesWithHttpInfo(empId, guid, email, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute saveCustomFieldValues request with HTTP info returned
         * @return ApiResponse&lt;PeopleAndPermissionsSaveCustomFieldValuesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleAndPermissionsSaveCustomFieldValuesResponse> executeWithHttpInfo() throws ApiException {
            List<Object> requestBody = buildBodyParams();
            return saveCustomFieldValuesWithHttpInfo(empId, guid, email, requestBody);
        }

        /**
         * Execute saveCustomFieldValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleAndPermissionsSaveCustomFieldValuesResponse> _callback) throws ApiException {
            List<Object> requestBody = buildBodyParams();
            return saveCustomFieldValuesAsync(empId, guid, email, requestBody, _callback);
        }
    }

    /**
     * Save Custom Field values
     * Save Custom Field values
     * @return SaveCustomFieldValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SaveCustomFieldValuesRequestBuilder saveCustomFieldValues() throws IllegalArgumentException {
        return new SaveCustomFieldValuesRequestBuilder();
    }
    private okhttp3.Call saveUserAddressCall(String empId, String email, PeopleAndPermissionsSaveUserAddressRequest peopleAndPermissionsSaveUserAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleAndPermissionsSaveUserAddressRequest;

        // create path and map variables
        String localVarPath = "/api/address/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empId", empId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveUserAddressValidateBeforeCall(String empId, String email, PeopleAndPermissionsSaveUserAddressRequest peopleAndPermissionsSaveUserAddressRequest, final ApiCallback _callback) throws ApiException {
        return saveUserAddressCall(empId, email, peopleAndPermissionsSaveUserAddressRequest, _callback);

    }


    private ApiResponse<PeopleAndPermissionsSaveUserAddressResponse> saveUserAddressWithHttpInfo(String empId, String email, PeopleAndPermissionsSaveUserAddressRequest peopleAndPermissionsSaveUserAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = saveUserAddressValidateBeforeCall(empId, email, peopleAndPermissionsSaveUserAddressRequest, null);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsSaveUserAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveUserAddressAsync(String empId, String email, PeopleAndPermissionsSaveUserAddressRequest peopleAndPermissionsSaveUserAddressRequest, final ApiCallback<PeopleAndPermissionsSaveUserAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveUserAddressValidateBeforeCall(empId, email, peopleAndPermissionsSaveUserAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsSaveUserAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SaveUserAddressRequestBuilder {
        private List<PeopleAndPermissionsSaveUserAddressRequestRAWBODYInner> RAW_BODY;
        private String empId;
        private String email;

        private SaveUserAddressRequestBuilder() {
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY  (optional)
         * @return SaveUserAddressRequestBuilder
         */
        public SaveUserAddressRequestBuilder RAW_BODY(List<PeopleAndPermissionsSaveUserAddressRequestRAWBODYInner> RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Set empId
         * @param empId The unique identity of the employee.  (optional)
         * @return SaveUserAddressRequestBuilder
         */
        public SaveUserAddressRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Set email
         * @param email Email address of the user. (optional)
         * @return SaveUserAddressRequestBuilder
         */
        public SaveUserAddressRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for saveUserAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleAndPermissionsSaveUserAddressRequest peopleAndPermissionsSaveUserAddressRequest = buildBodyParams();
            return saveUserAddressCall(empId, email, peopleAndPermissionsSaveUserAddressRequest, _callback);
        }

        private PeopleAndPermissionsSaveUserAddressRequest buildBodyParams() {
            PeopleAndPermissionsSaveUserAddressRequest peopleAndPermissionsSaveUserAddressRequest = new PeopleAndPermissionsSaveUserAddressRequest();
            peopleAndPermissionsSaveUserAddressRequest.RAW_BODY(this.RAW_BODY);
            return peopleAndPermissionsSaveUserAddressRequest;
        }

        /**
         * Execute saveUserAddress request
         * @return PeopleAndPermissionsSaveUserAddressResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public PeopleAndPermissionsSaveUserAddressResponse execute() throws ApiException {
            PeopleAndPermissionsSaveUserAddressRequest peopleAndPermissionsSaveUserAddressRequest = buildBodyParams();
            ApiResponse<PeopleAndPermissionsSaveUserAddressResponse> localVarResp = saveUserAddressWithHttpInfo(empId, email, peopleAndPermissionsSaveUserAddressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute saveUserAddress request with HTTP info returned
         * @return ApiResponse&lt;PeopleAndPermissionsSaveUserAddressResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleAndPermissionsSaveUserAddressResponse> executeWithHttpInfo() throws ApiException {
            PeopleAndPermissionsSaveUserAddressRequest peopleAndPermissionsSaveUserAddressRequest = buildBodyParams();
            return saveUserAddressWithHttpInfo(empId, email, peopleAndPermissionsSaveUserAddressRequest);
        }

        /**
         * Execute saveUserAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleAndPermissionsSaveUserAddressResponse> _callback) throws ApiException {
            PeopleAndPermissionsSaveUserAddressRequest peopleAndPermissionsSaveUserAddressRequest = buildBodyParams();
            return saveUserAddressAsync(empId, email, peopleAndPermissionsSaveUserAddressRequest, _callback);
        }
    }

    /**
     * Save User Address
     * 
     * @return SaveUserAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public SaveUserAddressRequestBuilder saveUserAddress() throws IllegalArgumentException {
        return new SaveUserAddressRequestBuilder();
    }
    private okhttp3.Call saveUserEducationCall(String empId, String email, PeopleAndPermissionsSaveUserEducationRequest peopleAndPermissionsSaveUserEducationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleAndPermissionsSaveUserEducationRequest;

        // create path and map variables
        String localVarPath = "/api/education/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empId", empId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveUserEducationValidateBeforeCall(String empId, String email, PeopleAndPermissionsSaveUserEducationRequest peopleAndPermissionsSaveUserEducationRequest, final ApiCallback _callback) throws ApiException {
        return saveUserEducationCall(empId, email, peopleAndPermissionsSaveUserEducationRequest, _callback);

    }


    private ApiResponse<Object> saveUserEducationWithHttpInfo(String empId, String email, PeopleAndPermissionsSaveUserEducationRequest peopleAndPermissionsSaveUserEducationRequest) throws ApiException {
        okhttp3.Call localVarCall = saveUserEducationValidateBeforeCall(empId, email, peopleAndPermissionsSaveUserEducationRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveUserEducationAsync(String empId, String email, PeopleAndPermissionsSaveUserEducationRequest peopleAndPermissionsSaveUserEducationRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveUserEducationValidateBeforeCall(empId, email, peopleAndPermissionsSaveUserEducationRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SaveUserEducationRequestBuilder {
        private List<PeopleAndPermissionsSaveUserEducationRequestRAWBODYInner> RAW_BODY;
        private String empId;
        private String email;

        private SaveUserEducationRequestBuilder() {
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY  (optional)
         * @return SaveUserEducationRequestBuilder
         */
        public SaveUserEducationRequestBuilder RAW_BODY(List<PeopleAndPermissionsSaveUserEducationRequestRAWBODYInner> RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Set empId
         * @param empId The unique identity of the employee.  (optional)
         * @return SaveUserEducationRequestBuilder
         */
        public SaveUserEducationRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Set email
         * @param email Email address of the user. (optional)
         * @return SaveUserEducationRequestBuilder
         */
        public SaveUserEducationRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for saveUserEducation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleAndPermissionsSaveUserEducationRequest peopleAndPermissionsSaveUserEducationRequest = buildBodyParams();
            return saveUserEducationCall(empId, email, peopleAndPermissionsSaveUserEducationRequest, _callback);
        }

        private PeopleAndPermissionsSaveUserEducationRequest buildBodyParams() {
            PeopleAndPermissionsSaveUserEducationRequest peopleAndPermissionsSaveUserEducationRequest = new PeopleAndPermissionsSaveUserEducationRequest();
            peopleAndPermissionsSaveUserEducationRequest.RAW_BODY(this.RAW_BODY);
            return peopleAndPermissionsSaveUserEducationRequest;
        }

        /**
         * Execute saveUserEducation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            PeopleAndPermissionsSaveUserEducationRequest peopleAndPermissionsSaveUserEducationRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = saveUserEducationWithHttpInfo(empId, email, peopleAndPermissionsSaveUserEducationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute saveUserEducation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            PeopleAndPermissionsSaveUserEducationRequest peopleAndPermissionsSaveUserEducationRequest = buildBodyParams();
            return saveUserEducationWithHttpInfo(empId, email, peopleAndPermissionsSaveUserEducationRequest);
        }

        /**
         * Execute saveUserEducation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            PeopleAndPermissionsSaveUserEducationRequest peopleAndPermissionsSaveUserEducationRequest = buildBodyParams();
            return saveUserEducationAsync(empId, email, peopleAndPermissionsSaveUserEducationRequest, _callback);
        }
    }

    /**
     * Save User Education
     * 
     * @return SaveUserEducationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public SaveUserEducationRequestBuilder saveUserEducation() throws IllegalArgumentException {
        return new SaveUserEducationRequestBuilder();
    }
    private okhttp3.Call saveUserEmploymentCall(String empId, String email, PeopleAndPermissionsSaveUserEmploymentRequest peopleAndPermissionsSaveUserEmploymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleAndPermissionsSaveUserEmploymentRequest;

        // create path and map variables
        String localVarPath = "/api/employment/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empId", empId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveUserEmploymentValidateBeforeCall(String empId, String email, PeopleAndPermissionsSaveUserEmploymentRequest peopleAndPermissionsSaveUserEmploymentRequest, final ApiCallback _callback) throws ApiException {
        return saveUserEmploymentCall(empId, email, peopleAndPermissionsSaveUserEmploymentRequest, _callback);

    }


    private ApiResponse<Object> saveUserEmploymentWithHttpInfo(String empId, String email, PeopleAndPermissionsSaveUserEmploymentRequest peopleAndPermissionsSaveUserEmploymentRequest) throws ApiException {
        okhttp3.Call localVarCall = saveUserEmploymentValidateBeforeCall(empId, email, peopleAndPermissionsSaveUserEmploymentRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveUserEmploymentAsync(String empId, String email, PeopleAndPermissionsSaveUserEmploymentRequest peopleAndPermissionsSaveUserEmploymentRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveUserEmploymentValidateBeforeCall(empId, email, peopleAndPermissionsSaveUserEmploymentRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SaveUserEmploymentRequestBuilder {
        private List<PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner> RAW_BODY;
        private String empId;
        private String email;

        private SaveUserEmploymentRequestBuilder() {
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY  (optional)
         * @return SaveUserEmploymentRequestBuilder
         */
        public SaveUserEmploymentRequestBuilder RAW_BODY(List<PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner> RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Set empId
         * @param empId The unique identity of the employee.  (optional)
         * @return SaveUserEmploymentRequestBuilder
         */
        public SaveUserEmploymentRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Set email
         * @param email Email address of the user. (optional)
         * @return SaveUserEmploymentRequestBuilder
         */
        public SaveUserEmploymentRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for saveUserEmployment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleAndPermissionsSaveUserEmploymentRequest peopleAndPermissionsSaveUserEmploymentRequest = buildBodyParams();
            return saveUserEmploymentCall(empId, email, peopleAndPermissionsSaveUserEmploymentRequest, _callback);
        }

        private PeopleAndPermissionsSaveUserEmploymentRequest buildBodyParams() {
            PeopleAndPermissionsSaveUserEmploymentRequest peopleAndPermissionsSaveUserEmploymentRequest = new PeopleAndPermissionsSaveUserEmploymentRequest();
            peopleAndPermissionsSaveUserEmploymentRequest.RAW_BODY(this.RAW_BODY);
            return peopleAndPermissionsSaveUserEmploymentRequest;
        }

        /**
         * Execute saveUserEmployment request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            PeopleAndPermissionsSaveUserEmploymentRequest peopleAndPermissionsSaveUserEmploymentRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = saveUserEmploymentWithHttpInfo(empId, email, peopleAndPermissionsSaveUserEmploymentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute saveUserEmployment request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            PeopleAndPermissionsSaveUserEmploymentRequest peopleAndPermissionsSaveUserEmploymentRequest = buildBodyParams();
            return saveUserEmploymentWithHttpInfo(empId, email, peopleAndPermissionsSaveUserEmploymentRequest);
        }

        /**
         * Execute saveUserEmployment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            PeopleAndPermissionsSaveUserEmploymentRequest peopleAndPermissionsSaveUserEmploymentRequest = buildBodyParams();
            return saveUserEmploymentAsync(empId, email, peopleAndPermissionsSaveUserEmploymentRequest, _callback);
        }
    }

    /**
     * Save User Employment
     * 
     * @return SaveUserEmploymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public SaveUserEmploymentRequestBuilder saveUserEmployment() throws IllegalArgumentException {
        return new SaveUserEmploymentRequestBuilder();
    }
    private okhttp3.Call updateFinancialRecordCall(String guid, String value, String compensationType, String currencyCode, String period, String status, LocalDate effectivedate, LocalDate enddate, String notes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/compensation/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (guid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guid", guid));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (compensationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compensationType", compensationType));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyCode", currencyCode));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (effectivedate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectivedate", effectivedate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFinancialRecordValidateBeforeCall(String guid, String value, String compensationType, String currencyCode, String period, String status, LocalDate effectivedate, LocalDate enddate, String notes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling updateFinancialRecord(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updateFinancialRecord(Async)");
        }

        // verify the required parameter 'compensationType' is set
        if (compensationType == null) {
            throw new ApiException("Missing the required parameter 'compensationType' when calling updateFinancialRecord(Async)");
        }

        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling updateFinancialRecord(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling updateFinancialRecord(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateFinancialRecord(Async)");
        }

        return updateFinancialRecordCall(guid, value, compensationType, currencyCode, period, status, effectivedate, enddate, notes, _callback);

    }


    private ApiResponse<Object> updateFinancialRecordWithHttpInfo(String guid, String value, String compensationType, String currencyCode, String period, String status, LocalDate effectivedate, LocalDate enddate, String notes) throws ApiException {
        okhttp3.Call localVarCall = updateFinancialRecordValidateBeforeCall(guid, value, compensationType, currencyCode, period, status, effectivedate, enddate, notes, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFinancialRecordAsync(String guid, String value, String compensationType, String currencyCode, String period, String status, LocalDate effectivedate, LocalDate enddate, String notes, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFinancialRecordValidateBeforeCall(guid, value, compensationType, currencyCode, period, status, effectivedate, enddate, notes, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFinancialRecordRequestBuilder {
        private final String guid;
        private final String value;
        private final String compensationType;
        private final String currencyCode;
        private final String period;
        private final String status;
        private LocalDate effectivedate;
        private LocalDate enddate;
        private String notes;

        private UpdateFinancialRecordRequestBuilder(String guid, String value, String compensationType, String currencyCode, String period, String status) {
            this.guid = guid;
            this.value = value;
            this.compensationType = compensationType;
            this.currencyCode = currencyCode;
            this.period = period;
            this.status = status;
        }

        /**
         * Set effectivedate
         * @param effectivedate  (optional)
         * @return UpdateFinancialRecordRequestBuilder
         */
        public UpdateFinancialRecordRequestBuilder effectivedate(LocalDate effectivedate) {
            this.effectivedate = effectivedate;
            return this;
        }
        
        /**
         * Set enddate
         * @param enddate  (optional)
         * @return UpdateFinancialRecordRequestBuilder
         */
        public UpdateFinancialRecordRequestBuilder enddate(LocalDate enddate) {
            this.enddate = enddate;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return UpdateFinancialRecordRequestBuilder
         */
        public UpdateFinancialRecordRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for updateFinancialRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateFinancialRecordCall(guid, value, compensationType, currencyCode, period, status, effectivedate, enddate, notes, _callback);
        }


        /**
         * Execute updateFinancialRecord request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = updateFinancialRecordWithHttpInfo(guid, value, compensationType, currencyCode, period, status, effectivedate, enddate, notes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFinancialRecord request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return updateFinancialRecordWithHttpInfo(guid, value, compensationType, currencyCode, period, status, effectivedate, enddate, notes);
        }

        /**
         * Execute updateFinancialRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return updateFinancialRecordAsync(guid, value, compensationType, currencyCode, period, status, effectivedate, enddate, notes, _callback);
        }
    }

    /**
     * Update financial record of User
     * 
     * @param guid  (required)
     * @param value  (required)
     * @param compensationType Type of compensation.   sal - Salary, pay - , INCTV - Incentive, SVCR - Severance (required)
     * @param currencyCode  (required)
     * @param period Time period for compensation.   HRLY - Hourly, DLY - Daily, WKLY - Weekly,  BWKLY - Bi-Weekly, MTHLY - Monthly, BMTH - Bi-Monthly, QTRLY - Quarterly, BYRLY - Bi-Yearly, YRLY - Yearly,   ONEF - OneOff (required)
     * @param status Status of compensation.   ACTV - Active, ARCHV - Archive, PVNL - Provisional (required)
     * @return UpdateFinancialRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFinancialRecordRequestBuilder updateFinancialRecord(String guid, String value, String compensationType, String currencyCode, String period, String status) throws IllegalArgumentException {
        if (guid == null) throw new IllegalArgumentException("\"guid\" is required but got null");
            

        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        if (compensationType == null) throw new IllegalArgumentException("\"compensationType\" is required but got null");
            

        if (currencyCode == null) throw new IllegalArgumentException("\"currencyCode\" is required but got null");
            

        if (period == null) throw new IllegalArgumentException("\"period\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new UpdateFinancialRecordRequestBuilder(guid, value, compensationType, currencyCode, period, status);
    }
    private okhttp3.Call updateUserCall(String guid, String email, String empId, String firstName, String middleName, String lastName, String secondLastName, String displayFullName, String cellPhone, String phone, String familySuffix, LocalDate userDateOfBirth, String jobGrade, LocalDate userStartDate, LocalDate userEndDate, String gender, String position, String profileId, String shortName, String status, String locationName, String locationId, String notes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (guid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guid", guid));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("empId", empId));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (middleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middleName", middleName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (secondLastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secondLastName", secondLastName));
        }

        if (displayFullName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayFullName", displayFullName));
        }

        if (cellPhone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cellPhone", cellPhone));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (familySuffix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("familySuffix", familySuffix));
        }

        if (userDateOfBirth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userDateOfBirth", userDateOfBirth));
        }

        if (jobGrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobGrade", jobGrade));
        }

        if (userStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userStartDate", userStartDate));
        }

        if (userEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userEndDate", userEndDate));
        }

        if (gender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gender", gender));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profileId", profileId));
        }

        if (shortName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shortName", shortName));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (locationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationName", locationName));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String guid, String email, String empId, String firstName, String middleName, String lastName, String secondLastName, String displayFullName, String cellPhone, String phone, String familySuffix, LocalDate userDateOfBirth, String jobGrade, LocalDate userStartDate, LocalDate userEndDate, String gender, String position, String profileId, String shortName, String status, String locationName, String locationId, String notes, final ApiCallback _callback) throws ApiException {
        return updateUserCall(guid, email, empId, firstName, middleName, lastName, secondLastName, displayFullName, cellPhone, phone, familySuffix, userDateOfBirth, jobGrade, userStartDate, userEndDate, gender, position, profileId, shortName, status, locationName, locationId, notes, _callback);

    }


    private ApiResponse<Object> updateUserWithHttpInfo(String guid, String email, String empId, String firstName, String middleName, String lastName, String secondLastName, String displayFullName, String cellPhone, String phone, String familySuffix, LocalDate userDateOfBirth, String jobGrade, LocalDate userStartDate, LocalDate userEndDate, String gender, String position, String profileId, String shortName, String status, String locationName, String locationId, String notes) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(guid, email, empId, firstName, middleName, lastName, secondLastName, displayFullName, cellPhone, phone, familySuffix, userDateOfBirth, jobGrade, userStartDate, userEndDate, gender, position, profileId, shortName, status, locationName, locationId, notes, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserAsync(String guid, String email, String empId, String firstName, String middleName, String lastName, String secondLastName, String displayFullName, String cellPhone, String phone, String familySuffix, LocalDate userDateOfBirth, String jobGrade, LocalDate userStartDate, LocalDate userEndDate, String gender, String position, String profileId, String shortName, String status, String locationName, String locationId, String notes, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(guid, email, empId, firstName, middleName, lastName, secondLastName, displayFullName, cellPhone, phone, familySuffix, userDateOfBirth, jobGrade, userStartDate, userEndDate, gender, position, profileId, shortName, status, locationName, locationId, notes, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserRequestBuilder {
        private String guid;
        private String email;
        private String empId;
        private String firstName;
        private String middleName;
        private String lastName;
        private String secondLastName;
        private String displayFullName;
        private String cellPhone;
        private String phone;
        private String familySuffix;
        private LocalDate userDateOfBirth;
        private String jobGrade;
        private LocalDate userStartDate;
        private LocalDate userEndDate;
        private String gender;
        private String position;
        private String profileId;
        private String shortName;
        private String status;
        private String locationName;
        private String locationId;
        private String notes;

        private UpdateUserRequestBuilder() {
        }

        /**
         * Set guid
         * @param guid The unique system generated ID of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder guid(String guid) {
            this.guid = guid;
            return this;
        }
        
        /**
         * Set email
         * @param email Email address of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set empId
         * @param empId Employee ID of the user.   To update the employee ID, you need admin access. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder empId(String empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName First name of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName Last name of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Last name of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set secondLastName
         * @param secondLastName Second last name of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder secondLastName(String secondLastName) {
            this.secondLastName = secondLastName;
            return this;
        }
        
        /**
         * Set displayFullName
         * @param displayFullName Display name of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder displayFullName(String displayFullName) {
            this.displayFullName = displayFullName;
            return this;
        }
        
        /**
         * Set cellPhone
         * @param cellPhone Cell phone of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder cellPhone(String cellPhone) {
            this.cellPhone = cellPhone;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Phone number of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set familySuffix
         * @param familySuffix Family suffix of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder familySuffix(String familySuffix) {
            this.familySuffix = familySuffix;
            return this;
        }
        
        /**
         * Set userDateOfBirth
         * @param userDateOfBirth Date of birth of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder userDateOfBirth(LocalDate userDateOfBirth) {
            this.userDateOfBirth = userDateOfBirth;
            return this;
        }
        
        /**
         * Set jobGrade
         * @param jobGrade Job grade of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder jobGrade(String jobGrade) {
            this.jobGrade = jobGrade;
            return this;
        }
        
        /**
         * Set userStartDate
         * @param userStartDate Starting date of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder userStartDate(LocalDate userStartDate) {
            this.userStartDate = userStartDate;
            return this;
        }
        
        /**
         * Set userEndDate
         * @param userEndDate End date of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder userEndDate(LocalDate userEndDate) {
            this.userEndDate = userEndDate;
            return this;
        }
        
        /**
         * Set gender
         * @param gender Gender of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set position
         * @param position Position of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder position(String position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set profileId
         * @param profileId Profile ID of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder profileId(String profileId) {
            this.profileId = profileId;
            return this;
        }
        
        /**
         * Set shortName
         * @param shortName Short name of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder shortName(String shortName) {
            this.shortName = shortName;
            return this;
        }
        
        /**
         * Set status
         * @param status Status of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set locationName
         * @param locationName Location of the user. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder locationName(String locationName) {
            this.locationName = locationName;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID of user location. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for updateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateUserCall(guid, email, empId, firstName, middleName, lastName, secondLastName, displayFullName, cellPhone, phone, familySuffix, userDateOfBirth, jobGrade, userStartDate, userEndDate, gender, position, profileId, shortName, status, locationName, locationId, notes, _callback);
        }


        /**
         * Execute updateUser request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = updateUserWithHttpInfo(guid, email, empId, firstName, middleName, lastName, secondLastName, displayFullName, cellPhone, phone, familySuffix, userDateOfBirth, jobGrade, userStartDate, userEndDate, gender, position, profileId, shortName, status, locationName, locationId, notes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUser request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return updateUserWithHttpInfo(guid, email, empId, firstName, middleName, lastName, secondLastName, displayFullName, cellPhone, phone, familySuffix, userDateOfBirth, jobGrade, userStartDate, userEndDate, gender, position, profileId, shortName, status, locationName, locationId, notes);
        }

        /**
         * Execute updateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return updateUserAsync(guid, email, empId, firstName, middleName, lastName, secondLastName, displayFullName, cellPhone, phone, familySuffix, userDateOfBirth, jobGrade, userStartDate, userEndDate, gender, position, profileId, shortName, status, locationName, locationId, notes, _callback);
        }
    }

    /**
     * Update user
     * 
     * @return UpdateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserRequestBuilder updateUser() throws IllegalArgumentException {
        return new UpdateUserRequestBuilder();
    }
    private okhttp3.Call uploadUserProfilePictureCall(File _file, String userid, PeopleAndPermissionsUploadUserProfilePictureRequest peopleAndPermissionsUploadUserProfilePictureRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleAndPermissionsUploadUserProfilePictureRequest;

        // create path and map variables
        String localVarPath = "/api/user/uploadpicture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (userid != null) {
            localVarFormParams.put("userid", userid);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadUserProfilePictureValidateBeforeCall(File _file, String userid, PeopleAndPermissionsUploadUserProfilePictureRequest peopleAndPermissionsUploadUserProfilePictureRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadUserProfilePicture(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling uploadUserProfilePicture(Async)");
        }

        return uploadUserProfilePictureCall(_file, userid, peopleAndPermissionsUploadUserProfilePictureRequest, _callback);

    }


    private ApiResponse<PeopleAndPermissionsUploadUserProfilePictureResponse> uploadUserProfilePictureWithHttpInfo(File _file, String userid, PeopleAndPermissionsUploadUserProfilePictureRequest peopleAndPermissionsUploadUserProfilePictureRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadUserProfilePictureValidateBeforeCall(_file, userid, peopleAndPermissionsUploadUserProfilePictureRequest, null);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsUploadUserProfilePictureResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadUserProfilePictureAsync(File _file, String userid, PeopleAndPermissionsUploadUserProfilePictureRequest peopleAndPermissionsUploadUserProfilePictureRequest, final ApiCallback<PeopleAndPermissionsUploadUserProfilePictureResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadUserProfilePictureValidateBeforeCall(_file, userid, peopleAndPermissionsUploadUserProfilePictureRequest, _callback);
        Type localVarReturnType = new TypeToken<PeopleAndPermissionsUploadUserProfilePictureResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadUserProfilePictureRequestBuilder {
        private final File _file;
        private final String userid;

        private UploadUserProfilePictureRequestBuilder(File _file, String userid) {
            this._file = _file;
            this.userid = userid;
        }

        /**
         * Build call for uploadUserProfilePicture
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleAndPermissionsUploadUserProfilePictureRequest peopleAndPermissionsUploadUserProfilePictureRequest = buildBodyParams();
            return uploadUserProfilePictureCall(_file, userid, peopleAndPermissionsUploadUserProfilePictureRequest, _callback);
        }

        private PeopleAndPermissionsUploadUserProfilePictureRequest buildBodyParams() {
            PeopleAndPermissionsUploadUserProfilePictureRequest peopleAndPermissionsUploadUserProfilePictureRequest = new PeopleAndPermissionsUploadUserProfilePictureRequest();
            peopleAndPermissionsUploadUserProfilePictureRequest._file(this._file);
            peopleAndPermissionsUploadUserProfilePictureRequest.userid(this.userid);
            return peopleAndPermissionsUploadUserProfilePictureRequest;
        }

        /**
         * Execute uploadUserProfilePicture request
         * @return PeopleAndPermissionsUploadUserProfilePictureResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public PeopleAndPermissionsUploadUserProfilePictureResponse execute() throws ApiException {
            PeopleAndPermissionsUploadUserProfilePictureRequest peopleAndPermissionsUploadUserProfilePictureRequest = buildBodyParams();
            ApiResponse<PeopleAndPermissionsUploadUserProfilePictureResponse> localVarResp = uploadUserProfilePictureWithHttpInfo(_file, userid, peopleAndPermissionsUploadUserProfilePictureRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadUserProfilePicture request with HTTP info returned
         * @return ApiResponse&lt;PeopleAndPermissionsUploadUserProfilePictureResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleAndPermissionsUploadUserProfilePictureResponse> executeWithHttpInfo() throws ApiException {
            PeopleAndPermissionsUploadUserProfilePictureRequest peopleAndPermissionsUploadUserProfilePictureRequest = buildBodyParams();
            return uploadUserProfilePictureWithHttpInfo(_file, userid, peopleAndPermissionsUploadUserProfilePictureRequest);
        }

        /**
         * Execute uploadUserProfilePicture request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleAndPermissionsUploadUserProfilePictureResponse> _callback) throws ApiException {
            PeopleAndPermissionsUploadUserProfilePictureRequest peopleAndPermissionsUploadUserProfilePictureRequest = buildBodyParams();
            return uploadUserProfilePictureAsync(_file, userid, peopleAndPermissionsUploadUserProfilePictureRequest, _callback);
        }
    }

    /**
     * Upload user profile
     *  
     * @param _file Upload the profile picture here. (required)
     * @param userid The ID of the user whose profile picture has to be updated. (required)
     * @return UploadUserProfilePictureRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public UploadUserProfilePictureRequestBuilder uploadUserProfilePicture(File _file, String userid) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        if (userid == null) throw new IllegalArgumentException("\"userid\" is required but got null");
            

        return new UploadUserProfilePictureRequestBuilder(_file, userid);
    }
}
