/*
 * Expense Reports
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.TimecardsGetByUserId200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimecardsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimecardsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimecardsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call clockOutCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timecard/clock/out";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clockOutValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling clockOut(Async)");
        }

        return clockOutCall(authorization, _callback);

    }


    private ApiResponse<Object> clockOutWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = clockOutValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call clockOutAsync(String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = clockOutValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClockOutRequestBuilder {
        private final String authorization;

        private ClockOutRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Build call for clockOut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return clockOutCall(authorization, _callback);
        }


        /**
         * Execute clockOut request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = clockOutWithHttpInfo(authorization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute clockOut request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return clockOutWithHttpInfo(authorization);
        }

        /**
         * Execute clockOut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return clockOutAsync(authorization, _callback);
        }
    }

    /**
     * Clock Out
     * 
     * @param authorization Authorization (required)
     * @return ClockOutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ClockOutRequestBuilder clockOut(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new ClockOutRequestBuilder(authorization);
    }
    private okhttp3.Call createPastTimecardCall(String authorization, String activity, Double amount, String approvalRejectionReason, String billable, Integer cardId, String caseNum, String caseURL, String categoryCode, String chargeType, Integer cid, Integer createUserID, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, String customHours, LocalDate date, String description, Integer elapsedTimeDate, Integer elapsedTimeDay, Integer elapsedTimeHours, Integer elapsedTimeMinutes, Integer elapsedTimeMonth, Integer elapsedTimeSeconds, Long elapsedTimeTime, Integer elapsedTimeTimezoneOffset, Integer elapsedTimeYear, Integer endDateTimeDate, Integer endDateTimeDay, Integer endDateTimeHours, Integer endDateTimeMinutes, Integer endDateTimeMonth, Integer endDateTimeNanos, Integer endDateTimeSeconds, Long endDateTimeTime, Integer endDateTimeTimezoneOffset, Integer endDateTimeYear, String endDateTimeStr, Integer id, Integer invoiceId, String notes, Integer numberOfDays, LocalDate paymentDate, Integer projectId, String projectManager, Integer projectModelAccount, String ptoComputed, String source, Integer startDateTimeDate, Integer startDateTimeDay, Integer startDateTimeHours, Integer startDateTimeMinutes, Integer startDateTimeMonth, Integer startDateTimeNanos, Integer startDateTimeSeconds, Long startDateTimeTime, Integer startDateTimeTimezoneOffset, Integer startDateTimeYear, String startDateTimeStr, String status, String sumOfElapsedTime, Integer timesheetId, String timezone, Long usedTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timecard/clockin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity", activity));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (approvalRejectionReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalRejectionReason", approvalRejectionReason));
        }

        if (billable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billable", billable));
        }

        if (cardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardId", cardId));
        }

        if (caseNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNum", caseNum));
        }

        if (caseURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseURL", caseURL));
        }

        if (categoryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryCode", categoryCode));
        }

        if (chargeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chargeType", chargeType));
        }

        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (createUserID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createUserID", createUserID));
        }

        if (createtsDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.date", createtsDate));
        }

        if (createtsDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.day", createtsDay));
        }

        if (createtsHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.hours", createtsHours));
        }

        if (createtsMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.minutes", createtsMinutes));
        }

        if (createtsMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.month", createtsMonth));
        }

        if (createtsNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.nanos", createtsNanos));
        }

        if (createtsSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.seconds", createtsSeconds));
        }

        if (createtsTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.time", createtsTime));
        }

        if (createtsTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.timezoneOffset", createtsTimezoneOffset));
        }

        if (createtsYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.year", createtsYear));
        }

        if (customHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customHours", customHours));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (elapsedTimeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.date", elapsedTimeDate));
        }

        if (elapsedTimeDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.day", elapsedTimeDay));
        }

        if (elapsedTimeHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.hours", elapsedTimeHours));
        }

        if (elapsedTimeMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.minutes", elapsedTimeMinutes));
        }

        if (elapsedTimeMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.month", elapsedTimeMonth));
        }

        if (elapsedTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.seconds", elapsedTimeSeconds));
        }

        if (elapsedTimeTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.time", elapsedTimeTime));
        }

        if (elapsedTimeTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.timezoneOffset", elapsedTimeTimezoneOffset));
        }

        if (elapsedTimeYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.year", elapsedTimeYear));
        }

        if (endDateTimeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.date", endDateTimeDate));
        }

        if (endDateTimeDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.day", endDateTimeDay));
        }

        if (endDateTimeHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.hours", endDateTimeHours));
        }

        if (endDateTimeMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.minutes", endDateTimeMinutes));
        }

        if (endDateTimeMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.month", endDateTimeMonth));
        }

        if (endDateTimeNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.nanos", endDateTimeNanos));
        }

        if (endDateTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.seconds", endDateTimeSeconds));
        }

        if (endDateTimeTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.time", endDateTimeTime));
        }

        if (endDateTimeTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.timezoneOffset", endDateTimeTimezoneOffset));
        }

        if (endDateTimeYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.year", endDateTimeYear));
        }

        if (endDateTimeStr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTimeStr", endDateTimeStr));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (invoiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceId", invoiceId));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (numberOfDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfDays", numberOfDays));
        }

        if (paymentDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentDate", paymentDate));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (projectManager != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectManager", projectManager));
        }

        if (projectModelAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectModel.account", projectModelAccount));
        }

        if (ptoComputed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ptoComputed", ptoComputed));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (startDateTimeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.date", startDateTimeDate));
        }

        if (startDateTimeDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.day", startDateTimeDay));
        }

        if (startDateTimeHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.hours", startDateTimeHours));
        }

        if (startDateTimeMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.minutes", startDateTimeMinutes));
        }

        if (startDateTimeMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.month", startDateTimeMonth));
        }

        if (startDateTimeNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.nanos", startDateTimeNanos));
        }

        if (startDateTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.seconds", startDateTimeSeconds));
        }

        if (startDateTimeTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.time", startDateTimeTime));
        }

        if (startDateTimeTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.timezoneOffset", startDateTimeTimezoneOffset));
        }

        if (startDateTimeYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime.year", startDateTimeYear));
        }

        if (startDateTimeStr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTimeStr", startDateTimeStr));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sumOfElapsedTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sumOfElapsedTime", sumOfElapsedTime));
        }

        if (timesheetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timesheetId", timesheetId));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (usedTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedTime", usedTime));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPastTimecardValidateBeforeCall(String authorization, String activity, Double amount, String approvalRejectionReason, String billable, Integer cardId, String caseNum, String caseURL, String categoryCode, String chargeType, Integer cid, Integer createUserID, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, String customHours, LocalDate date, String description, Integer elapsedTimeDate, Integer elapsedTimeDay, Integer elapsedTimeHours, Integer elapsedTimeMinutes, Integer elapsedTimeMonth, Integer elapsedTimeSeconds, Long elapsedTimeTime, Integer elapsedTimeTimezoneOffset, Integer elapsedTimeYear, Integer endDateTimeDate, Integer endDateTimeDay, Integer endDateTimeHours, Integer endDateTimeMinutes, Integer endDateTimeMonth, Integer endDateTimeNanos, Integer endDateTimeSeconds, Long endDateTimeTime, Integer endDateTimeTimezoneOffset, Integer endDateTimeYear, String endDateTimeStr, Integer id, Integer invoiceId, String notes, Integer numberOfDays, LocalDate paymentDate, Integer projectId, String projectManager, Integer projectModelAccount, String ptoComputed, String source, Integer startDateTimeDate, Integer startDateTimeDay, Integer startDateTimeHours, Integer startDateTimeMinutes, Integer startDateTimeMonth, Integer startDateTimeNanos, Integer startDateTimeSeconds, Long startDateTimeTime, Integer startDateTimeTimezoneOffset, Integer startDateTimeYear, String startDateTimeStr, String status, String sumOfElapsedTime, Integer timesheetId, String timezone, Long usedTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createPastTimecard(Async)");
        }

        return createPastTimecardCall(authorization, activity, amount, approvalRejectionReason, billable, cardId, caseNum, caseURL, categoryCode, chargeType, cid, createUserID, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, ptoComputed, source, startDateTimeDate, startDateTimeDay, startDateTimeHours, startDateTimeMinutes, startDateTimeMonth, startDateTimeNanos, startDateTimeSeconds, startDateTimeTime, startDateTimeTimezoneOffset, startDateTimeYear, startDateTimeStr, status, sumOfElapsedTime, timesheetId, timezone, usedTime, _callback);

    }


    private ApiResponse<Object> createPastTimecardWithHttpInfo(String authorization, String activity, Double amount, String approvalRejectionReason, String billable, Integer cardId, String caseNum, String caseURL, String categoryCode, String chargeType, Integer cid, Integer createUserID, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, String customHours, LocalDate date, String description, Integer elapsedTimeDate, Integer elapsedTimeDay, Integer elapsedTimeHours, Integer elapsedTimeMinutes, Integer elapsedTimeMonth, Integer elapsedTimeSeconds, Long elapsedTimeTime, Integer elapsedTimeTimezoneOffset, Integer elapsedTimeYear, Integer endDateTimeDate, Integer endDateTimeDay, Integer endDateTimeHours, Integer endDateTimeMinutes, Integer endDateTimeMonth, Integer endDateTimeNanos, Integer endDateTimeSeconds, Long endDateTimeTime, Integer endDateTimeTimezoneOffset, Integer endDateTimeYear, String endDateTimeStr, Integer id, Integer invoiceId, String notes, Integer numberOfDays, LocalDate paymentDate, Integer projectId, String projectManager, Integer projectModelAccount, String ptoComputed, String source, Integer startDateTimeDate, Integer startDateTimeDay, Integer startDateTimeHours, Integer startDateTimeMinutes, Integer startDateTimeMonth, Integer startDateTimeNanos, Integer startDateTimeSeconds, Long startDateTimeTime, Integer startDateTimeTimezoneOffset, Integer startDateTimeYear, String startDateTimeStr, String status, String sumOfElapsedTime, Integer timesheetId, String timezone, Long usedTime) throws ApiException {
        okhttp3.Call localVarCall = createPastTimecardValidateBeforeCall(authorization, activity, amount, approvalRejectionReason, billable, cardId, caseNum, caseURL, categoryCode, chargeType, cid, createUserID, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, ptoComputed, source, startDateTimeDate, startDateTimeDay, startDateTimeHours, startDateTimeMinutes, startDateTimeMonth, startDateTimeNanos, startDateTimeSeconds, startDateTimeTime, startDateTimeTimezoneOffset, startDateTimeYear, startDateTimeStr, status, sumOfElapsedTime, timesheetId, timezone, usedTime, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPastTimecardAsync(String authorization, String activity, Double amount, String approvalRejectionReason, String billable, Integer cardId, String caseNum, String caseURL, String categoryCode, String chargeType, Integer cid, Integer createUserID, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, String customHours, LocalDate date, String description, Integer elapsedTimeDate, Integer elapsedTimeDay, Integer elapsedTimeHours, Integer elapsedTimeMinutes, Integer elapsedTimeMonth, Integer elapsedTimeSeconds, Long elapsedTimeTime, Integer elapsedTimeTimezoneOffset, Integer elapsedTimeYear, Integer endDateTimeDate, Integer endDateTimeDay, Integer endDateTimeHours, Integer endDateTimeMinutes, Integer endDateTimeMonth, Integer endDateTimeNanos, Integer endDateTimeSeconds, Long endDateTimeTime, Integer endDateTimeTimezoneOffset, Integer endDateTimeYear, String endDateTimeStr, Integer id, Integer invoiceId, String notes, Integer numberOfDays, LocalDate paymentDate, Integer projectId, String projectManager, Integer projectModelAccount, String ptoComputed, String source, Integer startDateTimeDate, Integer startDateTimeDay, Integer startDateTimeHours, Integer startDateTimeMinutes, Integer startDateTimeMonth, Integer startDateTimeNanos, Integer startDateTimeSeconds, Long startDateTimeTime, Integer startDateTimeTimezoneOffset, Integer startDateTimeYear, String startDateTimeStr, String status, String sumOfElapsedTime, Integer timesheetId, String timezone, Long usedTime, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPastTimecardValidateBeforeCall(authorization, activity, amount, approvalRejectionReason, billable, cardId, caseNum, caseURL, categoryCode, chargeType, cid, createUserID, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, ptoComputed, source, startDateTimeDate, startDateTimeDay, startDateTimeHours, startDateTimeMinutes, startDateTimeMonth, startDateTimeNanos, startDateTimeSeconds, startDateTimeTime, startDateTimeTimezoneOffset, startDateTimeYear, startDateTimeStr, status, sumOfElapsedTime, timesheetId, timezone, usedTime, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePastTimecardRequestBuilder {
        private final String authorization;
        private String activity;
        private Double amount;
        private String approvalRejectionReason;
        private String billable;
        private Integer cardId;
        private String caseNum;
        private String caseURL;
        private String categoryCode;
        private String chargeType;
        private Integer cid;
        private Integer createUserID;
        private Integer createtsDate;
        private Integer createtsDay;
        private Integer createtsHours;
        private Integer createtsMinutes;
        private Integer createtsMonth;
        private Integer createtsNanos;
        private Integer createtsSeconds;
        private Long createtsTime;
        private Integer createtsTimezoneOffset;
        private Integer createtsYear;
        private String customHours;
        private LocalDate date;
        private String description;
        private Integer elapsedTimeDate;
        private Integer elapsedTimeDay;
        private Integer elapsedTimeHours;
        private Integer elapsedTimeMinutes;
        private Integer elapsedTimeMonth;
        private Integer elapsedTimeSeconds;
        private Long elapsedTimeTime;
        private Integer elapsedTimeTimezoneOffset;
        private Integer elapsedTimeYear;
        private Integer endDateTimeDate;
        private Integer endDateTimeDay;
        private Integer endDateTimeHours;
        private Integer endDateTimeMinutes;
        private Integer endDateTimeMonth;
        private Integer endDateTimeNanos;
        private Integer endDateTimeSeconds;
        private Long endDateTimeTime;
        private Integer endDateTimeTimezoneOffset;
        private Integer endDateTimeYear;
        private String endDateTimeStr;
        private Integer id;
        private Integer invoiceId;
        private String notes;
        private Integer numberOfDays;
        private LocalDate paymentDate;
        private Integer projectId;
        private String projectManager;
        private Integer projectModelAccount;
        private String ptoComputed;
        private String source;
        private Integer startDateTimeDate;
        private Integer startDateTimeDay;
        private Integer startDateTimeHours;
        private Integer startDateTimeMinutes;
        private Integer startDateTimeMonth;
        private Integer startDateTimeNanos;
        private Integer startDateTimeSeconds;
        private Long startDateTimeTime;
        private Integer startDateTimeTimezoneOffset;
        private Integer startDateTimeYear;
        private String startDateTimeStr;
        private String status;
        private String sumOfElapsedTime;
        private Integer timesheetId;
        private String timezone;
        private Long usedTime;

        private CreatePastTimecardRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set activity
         * @param activity  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder activity(String activity) {
            this.activity = activity;
            return this;
        }
        
        /**
         * Set amount
         * @param amount  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set approvalRejectionReason
         * @param approvalRejectionReason  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder approvalRejectionReason(String approvalRejectionReason) {
            this.approvalRejectionReason = approvalRejectionReason;
            return this;
        }
        
        /**
         * Set billable
         * @param billable  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder billable(String billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set cardId
         * @param cardId  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder cardId(Integer cardId) {
            this.cardId = cardId;
            return this;
        }
        
        /**
         * Set caseNum
         * @param caseNum  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder caseNum(String caseNum) {
            this.caseNum = caseNum;
            return this;
        }
        
        /**
         * Set caseURL
         * @param caseURL  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder caseURL(String caseURL) {
            this.caseURL = caseURL;
            return this;
        }
        
        /**
         * Set categoryCode
         * @param categoryCode  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder categoryCode(String categoryCode) {
            this.categoryCode = categoryCode;
            return this;
        }
        
        /**
         * Set chargeType
         * @param chargeType  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder chargeType(String chargeType) {
            this.chargeType = chargeType;
            return this;
        }
        
        /**
         * Set cid
         * @param cid  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder cid(Integer cid) {
            this.cid = cid;
            return this;
        }
        
        /**
         * Set createUserID
         * @param createUserID  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createUserID(Integer createUserID) {
            this.createUserID = createUserID;
            return this;
        }
        
        /**
         * Set createtsDate
         * @param createtsDate  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsDate(Integer createtsDate) {
            this.createtsDate = createtsDate;
            return this;
        }
        
        /**
         * Set createtsDay
         * @param createtsDay  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsDay(Integer createtsDay) {
            this.createtsDay = createtsDay;
            return this;
        }
        
        /**
         * Set createtsHours
         * @param createtsHours  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsHours(Integer createtsHours) {
            this.createtsHours = createtsHours;
            return this;
        }
        
        /**
         * Set createtsMinutes
         * @param createtsMinutes  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsMinutes(Integer createtsMinutes) {
            this.createtsMinutes = createtsMinutes;
            return this;
        }
        
        /**
         * Set createtsMonth
         * @param createtsMonth  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsMonth(Integer createtsMonth) {
            this.createtsMonth = createtsMonth;
            return this;
        }
        
        /**
         * Set createtsNanos
         * @param createtsNanos  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsNanos(Integer createtsNanos) {
            this.createtsNanos = createtsNanos;
            return this;
        }
        
        /**
         * Set createtsSeconds
         * @param createtsSeconds  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsSeconds(Integer createtsSeconds) {
            this.createtsSeconds = createtsSeconds;
            return this;
        }
        
        /**
         * Set createtsTime
         * @param createtsTime  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsTime(Long createtsTime) {
            this.createtsTime = createtsTime;
            return this;
        }
        
        /**
         * Set createtsTimezoneOffset
         * @param createtsTimezoneOffset  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsTimezoneOffset(Integer createtsTimezoneOffset) {
            this.createtsTimezoneOffset = createtsTimezoneOffset;
            return this;
        }
        
        /**
         * Set createtsYear
         * @param createtsYear  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder createtsYear(Integer createtsYear) {
            this.createtsYear = createtsYear;
            return this;
        }
        
        /**
         * Set customHours
         * @param customHours  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder customHours(String customHours) {
            this.customHours = customHours;
            return this;
        }
        
        /**
         * Set date
         * @param date  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set elapsedTimeDate
         * @param elapsedTimeDate  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder elapsedTimeDate(Integer elapsedTimeDate) {
            this.elapsedTimeDate = elapsedTimeDate;
            return this;
        }
        
        /**
         * Set elapsedTimeDay
         * @param elapsedTimeDay  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder elapsedTimeDay(Integer elapsedTimeDay) {
            this.elapsedTimeDay = elapsedTimeDay;
            return this;
        }
        
        /**
         * Set elapsedTimeHours
         * @param elapsedTimeHours  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder elapsedTimeHours(Integer elapsedTimeHours) {
            this.elapsedTimeHours = elapsedTimeHours;
            return this;
        }
        
        /**
         * Set elapsedTimeMinutes
         * @param elapsedTimeMinutes  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder elapsedTimeMinutes(Integer elapsedTimeMinutes) {
            this.elapsedTimeMinutes = elapsedTimeMinutes;
            return this;
        }
        
        /**
         * Set elapsedTimeMonth
         * @param elapsedTimeMonth  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder elapsedTimeMonth(Integer elapsedTimeMonth) {
            this.elapsedTimeMonth = elapsedTimeMonth;
            return this;
        }
        
        /**
         * Set elapsedTimeSeconds
         * @param elapsedTimeSeconds  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder elapsedTimeSeconds(Integer elapsedTimeSeconds) {
            this.elapsedTimeSeconds = elapsedTimeSeconds;
            return this;
        }
        
        /**
         * Set elapsedTimeTime
         * @param elapsedTimeTime  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder elapsedTimeTime(Long elapsedTimeTime) {
            this.elapsedTimeTime = elapsedTimeTime;
            return this;
        }
        
        /**
         * Set elapsedTimeTimezoneOffset
         * @param elapsedTimeTimezoneOffset  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder elapsedTimeTimezoneOffset(Integer elapsedTimeTimezoneOffset) {
            this.elapsedTimeTimezoneOffset = elapsedTimeTimezoneOffset;
            return this;
        }
        
        /**
         * Set elapsedTimeYear
         * @param elapsedTimeYear  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder elapsedTimeYear(Integer elapsedTimeYear) {
            this.elapsedTimeYear = elapsedTimeYear;
            return this;
        }
        
        /**
         * Set endDateTimeDate
         * @param endDateTimeDate  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeDate(Integer endDateTimeDate) {
            this.endDateTimeDate = endDateTimeDate;
            return this;
        }
        
        /**
         * Set endDateTimeDay
         * @param endDateTimeDay  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeDay(Integer endDateTimeDay) {
            this.endDateTimeDay = endDateTimeDay;
            return this;
        }
        
        /**
         * Set endDateTimeHours
         * @param endDateTimeHours  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeHours(Integer endDateTimeHours) {
            this.endDateTimeHours = endDateTimeHours;
            return this;
        }
        
        /**
         * Set endDateTimeMinutes
         * @param endDateTimeMinutes  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeMinutes(Integer endDateTimeMinutes) {
            this.endDateTimeMinutes = endDateTimeMinutes;
            return this;
        }
        
        /**
         * Set endDateTimeMonth
         * @param endDateTimeMonth  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeMonth(Integer endDateTimeMonth) {
            this.endDateTimeMonth = endDateTimeMonth;
            return this;
        }
        
        /**
         * Set endDateTimeNanos
         * @param endDateTimeNanos  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeNanos(Integer endDateTimeNanos) {
            this.endDateTimeNanos = endDateTimeNanos;
            return this;
        }
        
        /**
         * Set endDateTimeSeconds
         * @param endDateTimeSeconds  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeSeconds(Integer endDateTimeSeconds) {
            this.endDateTimeSeconds = endDateTimeSeconds;
            return this;
        }
        
        /**
         * Set endDateTimeTime
         * @param endDateTimeTime  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeTime(Long endDateTimeTime) {
            this.endDateTimeTime = endDateTimeTime;
            return this;
        }
        
        /**
         * Set endDateTimeTimezoneOffset
         * @param endDateTimeTimezoneOffset  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeTimezoneOffset(Integer endDateTimeTimezoneOffset) {
            this.endDateTimeTimezoneOffset = endDateTimeTimezoneOffset;
            return this;
        }
        
        /**
         * Set endDateTimeYear
         * @param endDateTimeYear  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeYear(Integer endDateTimeYear) {
            this.endDateTimeYear = endDateTimeYear;
            return this;
        }
        
        /**
         * Set endDateTimeStr
         * @param endDateTimeStr  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder endDateTimeStr(String endDateTimeStr) {
            this.endDateTimeStr = endDateTimeStr;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set invoiceId
         * @param invoiceId  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder invoiceId(Integer invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set numberOfDays
         * @param numberOfDays  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder numberOfDays(Integer numberOfDays) {
            this.numberOfDays = numberOfDays;
            return this;
        }
        
        /**
         * Set paymentDate
         * @param paymentDate  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder paymentDate(LocalDate paymentDate) {
            this.paymentDate = paymentDate;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder projectId(Integer projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set projectManager
         * @param projectManager  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder projectManager(String projectManager) {
            this.projectManager = projectManager;
            return this;
        }
        
        /**
         * Set projectModelAccount
         * @param projectModelAccount  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder projectModelAccount(Integer projectModelAccount) {
            this.projectModelAccount = projectModelAccount;
            return this;
        }
        
        /**
         * Set ptoComputed
         * @param ptoComputed  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder ptoComputed(String ptoComputed) {
            this.ptoComputed = ptoComputed;
            return this;
        }
        
        /**
         * Set source
         * @param source  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set startDateTimeDate
         * @param startDateTimeDate  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeDate(Integer startDateTimeDate) {
            this.startDateTimeDate = startDateTimeDate;
            return this;
        }
        
        /**
         * Set startDateTimeDay
         * @param startDateTimeDay  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeDay(Integer startDateTimeDay) {
            this.startDateTimeDay = startDateTimeDay;
            return this;
        }
        
        /**
         * Set startDateTimeHours
         * @param startDateTimeHours  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeHours(Integer startDateTimeHours) {
            this.startDateTimeHours = startDateTimeHours;
            return this;
        }
        
        /**
         * Set startDateTimeMinutes
         * @param startDateTimeMinutes  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeMinutes(Integer startDateTimeMinutes) {
            this.startDateTimeMinutes = startDateTimeMinutes;
            return this;
        }
        
        /**
         * Set startDateTimeMonth
         * @param startDateTimeMonth  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeMonth(Integer startDateTimeMonth) {
            this.startDateTimeMonth = startDateTimeMonth;
            return this;
        }
        
        /**
         * Set startDateTimeNanos
         * @param startDateTimeNanos  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeNanos(Integer startDateTimeNanos) {
            this.startDateTimeNanos = startDateTimeNanos;
            return this;
        }
        
        /**
         * Set startDateTimeSeconds
         * @param startDateTimeSeconds  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeSeconds(Integer startDateTimeSeconds) {
            this.startDateTimeSeconds = startDateTimeSeconds;
            return this;
        }
        
        /**
         * Set startDateTimeTime
         * @param startDateTimeTime  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeTime(Long startDateTimeTime) {
            this.startDateTimeTime = startDateTimeTime;
            return this;
        }
        
        /**
         * Set startDateTimeTimezoneOffset
         * @param startDateTimeTimezoneOffset  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeTimezoneOffset(Integer startDateTimeTimezoneOffset) {
            this.startDateTimeTimezoneOffset = startDateTimeTimezoneOffset;
            return this;
        }
        
        /**
         * Set startDateTimeYear
         * @param startDateTimeYear  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeYear(Integer startDateTimeYear) {
            this.startDateTimeYear = startDateTimeYear;
            return this;
        }
        
        /**
         * Set startDateTimeStr
         * @param startDateTimeStr  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder startDateTimeStr(String startDateTimeStr) {
            this.startDateTimeStr = startDateTimeStr;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set sumOfElapsedTime
         * @param sumOfElapsedTime  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder sumOfElapsedTime(String sumOfElapsedTime) {
            this.sumOfElapsedTime = sumOfElapsedTime;
            return this;
        }
        
        /**
         * Set timesheetId
         * @param timesheetId  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder timesheetId(Integer timesheetId) {
            this.timesheetId = timesheetId;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set usedTime
         * @param usedTime  (optional)
         * @return CreatePastTimecardRequestBuilder
         */
        public CreatePastTimecardRequestBuilder usedTime(Long usedTime) {
            this.usedTime = usedTime;
            return this;
        }
        
        /**
         * Build call for createPastTimecard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPastTimecardCall(authorization, activity, amount, approvalRejectionReason, billable, cardId, caseNum, caseURL, categoryCode, chargeType, cid, createUserID, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, ptoComputed, source, startDateTimeDate, startDateTimeDay, startDateTimeHours, startDateTimeMinutes, startDateTimeMonth, startDateTimeNanos, startDateTimeSeconds, startDateTimeTime, startDateTimeTimezoneOffset, startDateTimeYear, startDateTimeStr, status, sumOfElapsedTime, timesheetId, timezone, usedTime, _callback);
        }


        /**
         * Execute createPastTimecard request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = createPastTimecardWithHttpInfo(authorization, activity, amount, approvalRejectionReason, billable, cardId, caseNum, caseURL, categoryCode, chargeType, cid, createUserID, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, ptoComputed, source, startDateTimeDate, startDateTimeDay, startDateTimeHours, startDateTimeMinutes, startDateTimeMonth, startDateTimeNanos, startDateTimeSeconds, startDateTimeTime, startDateTimeTimezoneOffset, startDateTimeYear, startDateTimeStr, status, sumOfElapsedTime, timesheetId, timezone, usedTime);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPastTimecard request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return createPastTimecardWithHttpInfo(authorization, activity, amount, approvalRejectionReason, billable, cardId, caseNum, caseURL, categoryCode, chargeType, cid, createUserID, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, ptoComputed, source, startDateTimeDate, startDateTimeDay, startDateTimeHours, startDateTimeMinutes, startDateTimeMonth, startDateTimeNanos, startDateTimeSeconds, startDateTimeTime, startDateTimeTimezoneOffset, startDateTimeYear, startDateTimeStr, status, sumOfElapsedTime, timesheetId, timezone, usedTime);
        }

        /**
         * Execute createPastTimecard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return createPastTimecardAsync(authorization, activity, amount, approvalRejectionReason, billable, cardId, caseNum, caseURL, categoryCode, chargeType, cid, createUserID, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, ptoComputed, source, startDateTimeDate, startDateTimeDay, startDateTimeHours, startDateTimeMinutes, startDateTimeMonth, startDateTimeNanos, startDateTimeSeconds, startDateTimeTime, startDateTimeTimezoneOffset, startDateTimeYear, startDateTimeStr, status, sumOfElapsedTime, timesheetId, timezone, usedTime, _callback);
        }
    }

    /**
     * Create a past timecard.
     * 
     * @param authorization Authorization (required)
     * @return CreatePastTimecardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreatePastTimecardRequestBuilder createPastTimecard(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new CreatePastTimecardRequestBuilder(authorization);
    }
    private okhttp3.Call createTimecardCall(Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, String customHours, LocalDate date, String description, Integer elapsedTimeDate, Integer elapsedTimeDay, Integer elapsedTimeHours, Integer elapsedTimeMinutes, Integer elapsedTimeMonth, Integer elapsedTimeSeconds, Long elapsedTimeTime, Integer elapsedTimeTimezoneOffset, Integer elapsedTimeYear, Integer endDateTimeDate, Integer endDateTimeDay, Integer endDateTimeHours, Integer endDateTimeMinutes, Integer endDateTimeMonth, Integer endDateTimeNanos, Integer endDateTimeSeconds, Long endDateTimeTime, Integer endDateTimeTimezoneOffset, Integer endDateTimeYear, String endDateTimeStr, Integer id, Integer invoiceId, String notes, Integer numberOfDays, LocalDate paymentDate, Integer projectId, String projectManager, Integer projectModelAccount, Integer timesheetId, String timezone, Long usedTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timecard/addtimecard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createtsDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.date", createtsDate));
        }

        if (createtsDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.day", createtsDay));
        }

        if (createtsHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.hours", createtsHours));
        }

        if (createtsMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.minutes", createtsMinutes));
        }

        if (createtsMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.month", createtsMonth));
        }

        if (createtsNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.nanos", createtsNanos));
        }

        if (createtsSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.seconds", createtsSeconds));
        }

        if (createtsTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.time", createtsTime));
        }

        if (createtsTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.timezoneOffset", createtsTimezoneOffset));
        }

        if (createtsYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.year", createtsYear));
        }

        if (customHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customHours", customHours));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (elapsedTimeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.date", elapsedTimeDate));
        }

        if (elapsedTimeDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.day", elapsedTimeDay));
        }

        if (elapsedTimeHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.hours", elapsedTimeHours));
        }

        if (elapsedTimeMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.minutes", elapsedTimeMinutes));
        }

        if (elapsedTimeMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.month", elapsedTimeMonth));
        }

        if (elapsedTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.seconds", elapsedTimeSeconds));
        }

        if (elapsedTimeTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.time", elapsedTimeTime));
        }

        if (elapsedTimeTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.timezoneOffset", elapsedTimeTimezoneOffset));
        }

        if (elapsedTimeYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elapsedTime.year", elapsedTimeYear));
        }

        if (endDateTimeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.date", endDateTimeDate));
        }

        if (endDateTimeDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.day", endDateTimeDay));
        }

        if (endDateTimeHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.hours", endDateTimeHours));
        }

        if (endDateTimeMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.minutes", endDateTimeMinutes));
        }

        if (endDateTimeMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.month", endDateTimeMonth));
        }

        if (endDateTimeNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.nanos", endDateTimeNanos));
        }

        if (endDateTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.seconds", endDateTimeSeconds));
        }

        if (endDateTimeTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.time", endDateTimeTime));
        }

        if (endDateTimeTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.timezoneOffset", endDateTimeTimezoneOffset));
        }

        if (endDateTimeYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime.year", endDateTimeYear));
        }

        if (endDateTimeStr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTimeStr", endDateTimeStr));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (invoiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceId", invoiceId));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (numberOfDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfDays", numberOfDays));
        }

        if (paymentDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentDate", paymentDate));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (projectManager != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectManager", projectManager));
        }

        if (projectModelAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectModel.account", projectModelAccount));
        }

        if (timesheetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timesheetId", timesheetId));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (usedTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedTime", usedTime));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTimecardValidateBeforeCall(Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, String customHours, LocalDate date, String description, Integer elapsedTimeDate, Integer elapsedTimeDay, Integer elapsedTimeHours, Integer elapsedTimeMinutes, Integer elapsedTimeMonth, Integer elapsedTimeSeconds, Long elapsedTimeTime, Integer elapsedTimeTimezoneOffset, Integer elapsedTimeYear, Integer endDateTimeDate, Integer endDateTimeDay, Integer endDateTimeHours, Integer endDateTimeMinutes, Integer endDateTimeMonth, Integer endDateTimeNanos, Integer endDateTimeSeconds, Long endDateTimeTime, Integer endDateTimeTimezoneOffset, Integer endDateTimeYear, String endDateTimeStr, Integer id, Integer invoiceId, String notes, Integer numberOfDays, LocalDate paymentDate, Integer projectId, String projectManager, Integer projectModelAccount, Integer timesheetId, String timezone, Long usedTime, final ApiCallback _callback) throws ApiException {
        return createTimecardCall(createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, timesheetId, timezone, usedTime, _callback);

    }


    private ApiResponse<Object> createTimecardWithHttpInfo(Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, String customHours, LocalDate date, String description, Integer elapsedTimeDate, Integer elapsedTimeDay, Integer elapsedTimeHours, Integer elapsedTimeMinutes, Integer elapsedTimeMonth, Integer elapsedTimeSeconds, Long elapsedTimeTime, Integer elapsedTimeTimezoneOffset, Integer elapsedTimeYear, Integer endDateTimeDate, Integer endDateTimeDay, Integer endDateTimeHours, Integer endDateTimeMinutes, Integer endDateTimeMonth, Integer endDateTimeNanos, Integer endDateTimeSeconds, Long endDateTimeTime, Integer endDateTimeTimezoneOffset, Integer endDateTimeYear, String endDateTimeStr, Integer id, Integer invoiceId, String notes, Integer numberOfDays, LocalDate paymentDate, Integer projectId, String projectManager, Integer projectModelAccount, Integer timesheetId, String timezone, Long usedTime) throws ApiException {
        okhttp3.Call localVarCall = createTimecardValidateBeforeCall(createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, timesheetId, timezone, usedTime, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTimecardAsync(Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, String customHours, LocalDate date, String description, Integer elapsedTimeDate, Integer elapsedTimeDay, Integer elapsedTimeHours, Integer elapsedTimeMinutes, Integer elapsedTimeMonth, Integer elapsedTimeSeconds, Long elapsedTimeTime, Integer elapsedTimeTimezoneOffset, Integer elapsedTimeYear, Integer endDateTimeDate, Integer endDateTimeDay, Integer endDateTimeHours, Integer endDateTimeMinutes, Integer endDateTimeMonth, Integer endDateTimeNanos, Integer endDateTimeSeconds, Long endDateTimeTime, Integer endDateTimeTimezoneOffset, Integer endDateTimeYear, String endDateTimeStr, Integer id, Integer invoiceId, String notes, Integer numberOfDays, LocalDate paymentDate, Integer projectId, String projectManager, Integer projectModelAccount, Integer timesheetId, String timezone, Long usedTime, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTimecardValidateBeforeCall(createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, timesheetId, timezone, usedTime, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTimecardRequestBuilder {
        private Integer createtsDate;
        private Integer createtsDay;
        private Integer createtsHours;
        private Integer createtsMinutes;
        private Integer createtsMonth;
        private Integer createtsNanos;
        private Integer createtsSeconds;
        private Long createtsTime;
        private Integer createtsTimezoneOffset;
        private Integer createtsYear;
        private String customHours;
        private LocalDate date;
        private String description;
        private Integer elapsedTimeDate;
        private Integer elapsedTimeDay;
        private Integer elapsedTimeHours;
        private Integer elapsedTimeMinutes;
        private Integer elapsedTimeMonth;
        private Integer elapsedTimeSeconds;
        private Long elapsedTimeTime;
        private Integer elapsedTimeTimezoneOffset;
        private Integer elapsedTimeYear;
        private Integer endDateTimeDate;
        private Integer endDateTimeDay;
        private Integer endDateTimeHours;
        private Integer endDateTimeMinutes;
        private Integer endDateTimeMonth;
        private Integer endDateTimeNanos;
        private Integer endDateTimeSeconds;
        private Long endDateTimeTime;
        private Integer endDateTimeTimezoneOffset;
        private Integer endDateTimeYear;
        private String endDateTimeStr;
        private Integer id;
        private Integer invoiceId;
        private String notes;
        private Integer numberOfDays;
        private LocalDate paymentDate;
        private Integer projectId;
        private String projectManager;
        private Integer projectModelAccount;
        private Integer timesheetId;
        private String timezone;
        private Long usedTime;

        private CreateTimecardRequestBuilder() {
        }

        /**
         * Set createtsDate
         * @param createtsDate  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsDate(Integer createtsDate) {
            this.createtsDate = createtsDate;
            return this;
        }
        
        /**
         * Set createtsDay
         * @param createtsDay  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsDay(Integer createtsDay) {
            this.createtsDay = createtsDay;
            return this;
        }
        
        /**
         * Set createtsHours
         * @param createtsHours  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsHours(Integer createtsHours) {
            this.createtsHours = createtsHours;
            return this;
        }
        
        /**
         * Set createtsMinutes
         * @param createtsMinutes  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsMinutes(Integer createtsMinutes) {
            this.createtsMinutes = createtsMinutes;
            return this;
        }
        
        /**
         * Set createtsMonth
         * @param createtsMonth  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsMonth(Integer createtsMonth) {
            this.createtsMonth = createtsMonth;
            return this;
        }
        
        /**
         * Set createtsNanos
         * @param createtsNanos  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsNanos(Integer createtsNanos) {
            this.createtsNanos = createtsNanos;
            return this;
        }
        
        /**
         * Set createtsSeconds
         * @param createtsSeconds  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsSeconds(Integer createtsSeconds) {
            this.createtsSeconds = createtsSeconds;
            return this;
        }
        
        /**
         * Set createtsTime
         * @param createtsTime  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsTime(Long createtsTime) {
            this.createtsTime = createtsTime;
            return this;
        }
        
        /**
         * Set createtsTimezoneOffset
         * @param createtsTimezoneOffset  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsTimezoneOffset(Integer createtsTimezoneOffset) {
            this.createtsTimezoneOffset = createtsTimezoneOffset;
            return this;
        }
        
        /**
         * Set createtsYear
         * @param createtsYear  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder createtsYear(Integer createtsYear) {
            this.createtsYear = createtsYear;
            return this;
        }
        
        /**
         * Set customHours
         * @param customHours  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder customHours(String customHours) {
            this.customHours = customHours;
            return this;
        }
        
        /**
         * Set date
         * @param date  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set elapsedTimeDate
         * @param elapsedTimeDate  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder elapsedTimeDate(Integer elapsedTimeDate) {
            this.elapsedTimeDate = elapsedTimeDate;
            return this;
        }
        
        /**
         * Set elapsedTimeDay
         * @param elapsedTimeDay  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder elapsedTimeDay(Integer elapsedTimeDay) {
            this.elapsedTimeDay = elapsedTimeDay;
            return this;
        }
        
        /**
         * Set elapsedTimeHours
         * @param elapsedTimeHours  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder elapsedTimeHours(Integer elapsedTimeHours) {
            this.elapsedTimeHours = elapsedTimeHours;
            return this;
        }
        
        /**
         * Set elapsedTimeMinutes
         * @param elapsedTimeMinutes  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder elapsedTimeMinutes(Integer elapsedTimeMinutes) {
            this.elapsedTimeMinutes = elapsedTimeMinutes;
            return this;
        }
        
        /**
         * Set elapsedTimeMonth
         * @param elapsedTimeMonth  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder elapsedTimeMonth(Integer elapsedTimeMonth) {
            this.elapsedTimeMonth = elapsedTimeMonth;
            return this;
        }
        
        /**
         * Set elapsedTimeSeconds
         * @param elapsedTimeSeconds  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder elapsedTimeSeconds(Integer elapsedTimeSeconds) {
            this.elapsedTimeSeconds = elapsedTimeSeconds;
            return this;
        }
        
        /**
         * Set elapsedTimeTime
         * @param elapsedTimeTime  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder elapsedTimeTime(Long elapsedTimeTime) {
            this.elapsedTimeTime = elapsedTimeTime;
            return this;
        }
        
        /**
         * Set elapsedTimeTimezoneOffset
         * @param elapsedTimeTimezoneOffset  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder elapsedTimeTimezoneOffset(Integer elapsedTimeTimezoneOffset) {
            this.elapsedTimeTimezoneOffset = elapsedTimeTimezoneOffset;
            return this;
        }
        
        /**
         * Set elapsedTimeYear
         * @param elapsedTimeYear  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder elapsedTimeYear(Integer elapsedTimeYear) {
            this.elapsedTimeYear = elapsedTimeYear;
            return this;
        }
        
        /**
         * Set endDateTimeDate
         * @param endDateTimeDate  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeDate(Integer endDateTimeDate) {
            this.endDateTimeDate = endDateTimeDate;
            return this;
        }
        
        /**
         * Set endDateTimeDay
         * @param endDateTimeDay  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeDay(Integer endDateTimeDay) {
            this.endDateTimeDay = endDateTimeDay;
            return this;
        }
        
        /**
         * Set endDateTimeHours
         * @param endDateTimeHours  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeHours(Integer endDateTimeHours) {
            this.endDateTimeHours = endDateTimeHours;
            return this;
        }
        
        /**
         * Set endDateTimeMinutes
         * @param endDateTimeMinutes  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeMinutes(Integer endDateTimeMinutes) {
            this.endDateTimeMinutes = endDateTimeMinutes;
            return this;
        }
        
        /**
         * Set endDateTimeMonth
         * @param endDateTimeMonth  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeMonth(Integer endDateTimeMonth) {
            this.endDateTimeMonth = endDateTimeMonth;
            return this;
        }
        
        /**
         * Set endDateTimeNanos
         * @param endDateTimeNanos  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeNanos(Integer endDateTimeNanos) {
            this.endDateTimeNanos = endDateTimeNanos;
            return this;
        }
        
        /**
         * Set endDateTimeSeconds
         * @param endDateTimeSeconds  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeSeconds(Integer endDateTimeSeconds) {
            this.endDateTimeSeconds = endDateTimeSeconds;
            return this;
        }
        
        /**
         * Set endDateTimeTime
         * @param endDateTimeTime  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeTime(Long endDateTimeTime) {
            this.endDateTimeTime = endDateTimeTime;
            return this;
        }
        
        /**
         * Set endDateTimeTimezoneOffset
         * @param endDateTimeTimezoneOffset  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeTimezoneOffset(Integer endDateTimeTimezoneOffset) {
            this.endDateTimeTimezoneOffset = endDateTimeTimezoneOffset;
            return this;
        }
        
        /**
         * Set endDateTimeYear
         * @param endDateTimeYear  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeYear(Integer endDateTimeYear) {
            this.endDateTimeYear = endDateTimeYear;
            return this;
        }
        
        /**
         * Set endDateTimeStr
         * @param endDateTimeStr  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder endDateTimeStr(String endDateTimeStr) {
            this.endDateTimeStr = endDateTimeStr;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set invoiceId
         * @param invoiceId  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder invoiceId(Integer invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set numberOfDays
         * @param numberOfDays  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder numberOfDays(Integer numberOfDays) {
            this.numberOfDays = numberOfDays;
            return this;
        }
        
        /**
         * Set paymentDate
         * @param paymentDate  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder paymentDate(LocalDate paymentDate) {
            this.paymentDate = paymentDate;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder projectId(Integer projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set projectManager
         * @param projectManager  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder projectManager(String projectManager) {
            this.projectManager = projectManager;
            return this;
        }
        
        /**
         * Set projectModelAccount
         * @param projectModelAccount  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder projectModelAccount(Integer projectModelAccount) {
            this.projectModelAccount = projectModelAccount;
            return this;
        }
        
        /**
         * Set timesheetId
         * @param timesheetId  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder timesheetId(Integer timesheetId) {
            this.timesheetId = timesheetId;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set usedTime
         * @param usedTime  (optional)
         * @return CreateTimecardRequestBuilder
         */
        public CreateTimecardRequestBuilder usedTime(Long usedTime) {
            this.usedTime = usedTime;
            return this;
        }
        
        /**
         * Build call for createTimecard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTimecardCall(createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, timesheetId, timezone, usedTime, _callback);
        }


        /**
         * Execute createTimecard request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = createTimecardWithHttpInfo(createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, timesheetId, timezone, usedTime);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTimecard request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return createTimecardWithHttpInfo(createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, timesheetId, timezone, usedTime);
        }

        /**
         * Execute createTimecard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return createTimecardAsync(createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, customHours, date, description, elapsedTimeDate, elapsedTimeDay, elapsedTimeHours, elapsedTimeMinutes, elapsedTimeMonth, elapsedTimeSeconds, elapsedTimeTime, elapsedTimeTimezoneOffset, elapsedTimeYear, endDateTimeDate, endDateTimeDay, endDateTimeHours, endDateTimeMinutes, endDateTimeMonth, endDateTimeNanos, endDateTimeSeconds, endDateTimeTime, endDateTimeTimezoneOffset, endDateTimeYear, endDateTimeStr, id, invoiceId, notes, numberOfDays, paymentDate, projectId, projectManager, projectModelAccount, timesheetId, timezone, usedTime, _callback);
        }
    }

    /**
     * Create a new timecard.
     * 
     * @return CreateTimecardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreateTimecardRequestBuilder createTimecard() throws IllegalArgumentException {
        return new CreateTimecardRequestBuilder();
    }
    private okhttp3.Call getByUserIdCall(String email, String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/timecard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (guid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guid", guid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByUserIdValidateBeforeCall(String email, String guid, final ApiCallback _callback) throws ApiException {
        return getByUserIdCall(email, guid, _callback);

    }


    private ApiResponse<String> getByUserIdWithHttpInfo(String email, String guid) throws ApiException {
        okhttp3.Call localVarCall = getByUserIdValidateBeforeCall(email, guid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByUserIdAsync(String email, String guid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByUserIdValidateBeforeCall(email, guid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByUserIdRequestBuilder {
        private String email;
        private String guid;

        private GetByUserIdRequestBuilder() {
        }

        /**
         * Set email
         * @param email email of the user. (optional)
         * @return GetByUserIdRequestBuilder
         */
        public GetByUserIdRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set guid
         * @param guid Graphical user ID. (optional)
         * @return GetByUserIdRequestBuilder
         */
        public GetByUserIdRequestBuilder guid(String guid) {
            this.guid = guid;
            return this;
        }
        
        /**
         * Build call for getByUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByUserIdCall(email, guid, _callback);
        }


        /**
         * Execute getByUserId request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByUserIdWithHttpInfo(email, guid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByUserId request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByUserIdWithHttpInfo(email, guid);
        }

        /**
         * Execute getByUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByUserIdAsync(email, guid, _callback);
        }
    }

    /**
     * Retrieve timecard details by User ID.
     * Retrieve timecard details based on User ID with Add Time Cards For Other permission.
     * @return GetByUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetByUserIdRequestBuilder getByUserId() throws IllegalArgumentException {
        return new GetByUserIdRequestBuilder();
    }
    private okhttp3.Call getByUserId_0Call(String email, String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/timecards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (guid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guid", guid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByUserId_0ValidateBeforeCall(String email, String guid, final ApiCallback _callback) throws ApiException {
        return getByUserId_0Call(email, guid, _callback);

    }


    private ApiResponse<TimecardsGetByUserId200Response> getByUserId_0WithHttpInfo(String email, String guid) throws ApiException {
        okhttp3.Call localVarCall = getByUserId_0ValidateBeforeCall(email, guid, null);
        Type localVarReturnType = new TypeToken<TimecardsGetByUserId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByUserId_0Async(String email, String guid, final ApiCallback<TimecardsGetByUserId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByUserId_0ValidateBeforeCall(email, guid, _callback);
        Type localVarReturnType = new TypeToken<TimecardsGetByUserId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByUserId0RequestBuilder {
        private String email;
        private String guid;

        private GetByUserId0RequestBuilder() {
        }

        /**
         * Set email
         * @param email email of the user. (optional)
         * @return GetByUserId0RequestBuilder
         */
        public GetByUserId0RequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set guid
         * @param guid Graphical user ID. (optional)
         * @return GetByUserId0RequestBuilder
         */
        public GetByUserId0RequestBuilder guid(String guid) {
            this.guid = guid;
            return this;
        }
        
        /**
         * Build call for getByUserId_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByUserId_0Call(email, guid, _callback);
        }


        /**
         * Execute getByUserId_0 request
         * @return TimecardsGetByUserId200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public TimecardsGetByUserId200Response execute() throws ApiException {
            ApiResponse<TimecardsGetByUserId200Response> localVarResp = getByUserId_0WithHttpInfo(email, guid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByUserId_0 request with HTTP info returned
         * @return ApiResponse&lt;TimecardsGetByUserId200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimecardsGetByUserId200Response> executeWithHttpInfo() throws ApiException {
            return getByUserId_0WithHttpInfo(email, guid);
        }

        /**
         * Execute getByUserId_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimecardsGetByUserId200Response> _callback) throws ApiException {
            return getByUserId_0Async(email, guid, _callback);
        }
    }

    /**
     * Retrieve timecard basic details by User ID.
     * Retrieve timecard basic details based on User ID with Add Time Cards For Other permission.
     * @return GetByUserId0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetByUserId0RequestBuilder getByUserId_0() throws IllegalArgumentException {
        return new GetByUserId0RequestBuilder();
    }
    private okhttp3.Call getDetailsByTimecardIdCall(Integer timecardId, Boolean flatcustomfields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timecards/details/{timecardId}"
            .replace("{" + "timecardId" + "}", localVarApiClient.escapeString(timecardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flatcustomfields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flatcustomfields", flatcustomfields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsByTimecardIdValidateBeforeCall(Integer timecardId, Boolean flatcustomfields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timecardId' is set
        if (timecardId == null) {
            throw new ApiException("Missing the required parameter 'timecardId' when calling getDetailsByTimecardId(Async)");
        }

        return getDetailsByTimecardIdCall(timecardId, flatcustomfields, _callback);

    }


    private ApiResponse<String> getDetailsByTimecardIdWithHttpInfo(Integer timecardId, Boolean flatcustomfields) throws ApiException {
        okhttp3.Call localVarCall = getDetailsByTimecardIdValidateBeforeCall(timecardId, flatcustomfields, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsByTimecardIdAsync(Integer timecardId, Boolean flatcustomfields, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsByTimecardIdValidateBeforeCall(timecardId, flatcustomfields, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsByTimecardIdRequestBuilder {
        private final Integer timecardId;
        private Boolean flatcustomfields;

        private GetDetailsByTimecardIdRequestBuilder(Integer timecardId) {
            this.timecardId = timecardId;
        }

        /**
         * Set flatcustomfields
         * @param flatcustomfields  (optional, default to false)
         * @return GetDetailsByTimecardIdRequestBuilder
         */
        public GetDetailsByTimecardIdRequestBuilder flatcustomfields(Boolean flatcustomfields) {
            this.flatcustomfields = flatcustomfields;
            return this;
        }
        
        /**
         * Build call for getDetailsByTimecardId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsByTimecardIdCall(timecardId, flatcustomfields, _callback);
        }


        /**
         * Execute getDetailsByTimecardId request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getDetailsByTimecardIdWithHttpInfo(timecardId, flatcustomfields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailsByTimecardId request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getDetailsByTimecardIdWithHttpInfo(timecardId, flatcustomfields);
        }

        /**
         * Execute getDetailsByTimecardId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getDetailsByTimecardIdAsync(timecardId, flatcustomfields, _callback);
        }
    }

    /**
     * Retrieve timecard details based on timecard ID.
     * Retrieve timecard details based on timecard ID with Add Time Cards For Other permission.
     * @param timecardId Timecard ID of the timecard. (required)
     * @return GetDetailsByTimecardIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsByTimecardIdRequestBuilder getDetailsByTimecardId(Integer timecardId) throws IllegalArgumentException {
        if (timecardId == null) throw new IllegalArgumentException("\"timecardId\" is required but got null");
        return new GetDetailsByTimecardIdRequestBuilder(timecardId);
    }
    private okhttp3.Call getTVCForClockinWithQRCodeUsingCidCall(Integer cid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verify/tvc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTVCForClockinWithQRCodeUsingCidValidateBeforeCall(Integer cid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling getTVCForClockinWithQRCodeUsingCid(Async)");
        }

        return getTVCForClockinWithQRCodeUsingCidCall(cid, _callback);

    }


    private ApiResponse<Object> getTVCForClockinWithQRCodeUsingCidWithHttpInfo(Integer cid) throws ApiException {
        okhttp3.Call localVarCall = getTVCForClockinWithQRCodeUsingCidValidateBeforeCall(cid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTVCForClockinWithQRCodeUsingCidAsync(Integer cid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTVCForClockinWithQRCodeUsingCidValidateBeforeCall(cid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTVCForClockinWithQRCodeUsingCidRequestBuilder {
        private final Integer cid;

        private GetTVCForClockinWithQRCodeUsingCidRequestBuilder(Integer cid) {
            this.cid = cid;
        }

        /**
         * Build call for getTVCForClockinWithQRCodeUsingCid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTVCForClockinWithQRCodeUsingCidCall(cid, _callback);
        }


        /**
         * Execute getTVCForClockinWithQRCodeUsingCid request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTVCForClockinWithQRCodeUsingCidWithHttpInfo(cid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTVCForClockinWithQRCodeUsingCid request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTVCForClockinWithQRCodeUsingCidWithHttpInfo(cid);
        }

        /**
         * Execute getTVCForClockinWithQRCodeUsingCid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTVCForClockinWithQRCodeUsingCidAsync(cid, _callback);
        }
    }

    /**
     * TVC code for clockin with QR Code using cid.
     * 
     * @param cid cid (required)
     * @return GetTVCForClockinWithQRCodeUsingCidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetTVCForClockinWithQRCodeUsingCidRequestBuilder getTVCForClockinWithQRCodeUsingCid(Integer cid) throws IllegalArgumentException {
        if (cid == null) throw new IllegalArgumentException("\"cid\" is required but got null");
        return new GetTVCForClockinWithQRCodeUsingCidRequestBuilder(cid);
    }
    private okhttp3.Call getUserByIdCall(String authorization, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timecard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIdValidateBeforeCall(String authorization, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getUserById(Async)");
        }

        return getUserByIdCall(authorization, type, _callback);

    }


    private ApiResponse<Object> getUserByIdWithHttpInfo(String authorization, String type) throws ApiException {
        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(authorization, type, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserByIdAsync(String authorization, String type, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(authorization, type, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserByIdRequestBuilder {
        private final String authorization;
        private String type;

        private GetUserByIdRequestBuilder(String authorization) {
            this.authorization = authorization;
        }

        /**
         * Set type
         * @param type type (optional, default to leave)
         * @return GetUserByIdRequestBuilder
         */
        public GetUserByIdRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for getUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserByIdCall(authorization, type, _callback);
        }


        /**
         * Execute getUserById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUserByIdWithHttpInfo(authorization, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUserByIdWithHttpInfo(authorization, type);
        }

        /**
         * Execute getUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUserByIdAsync(authorization, type, _callback);
        }
    }

    /**
     * Get timecards by user id.
     * 
     * @param authorization Authorization (required)
     * @return GetUserByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetUserByIdRequestBuilder getUserById(String authorization) throws IllegalArgumentException {
        if (authorization == null) throw new IllegalArgumentException("\"authorization\" is required but got null");
            

        return new GetUserByIdRequestBuilder(authorization);
    }
    private okhttp3.Call registerDeviceForClockInWithAssetModelCall(String accessories, Integer acknowledge, Integer assetID, String assetno, String assetstatus, String assettype, LocalDate purchaseDate, Integer selfAssign, String serialno, String service, String source, String specs, String supplier, String useStatusCode, String userDomain, String userMail, String userPassword, String uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessories", accessories));
        }

        if (acknowledge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acknowledge", acknowledge));
        }

        if (assetID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assetID", assetID));
        }

        if (assetno != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assetno", assetno));
        }

        if (assetstatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assetstatus", assetstatus));
        }

        if (assettype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assettype", assettype));
        }

        if (purchaseDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaseDate", purchaseDate));
        }

        if (selfAssign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selfAssign", selfAssign));
        }

        if (serialno != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serialno", serialno));
        }

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (specs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("specs", specs));
        }

        if (supplier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supplier", supplier));
        }

        if (useStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useStatusCode", useStatusCode));
        }

        if (userDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userDomain", userDomain));
        }

        if (userMail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userMail", userMail));
        }

        if (userPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userPassword", userPassword));
        }

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuid", uuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerDeviceForClockInWithAssetModelValidateBeforeCall(String accessories, Integer acknowledge, Integer assetID, String assetno, String assetstatus, String assettype, LocalDate purchaseDate, Integer selfAssign, String serialno, String service, String source, String specs, String supplier, String useStatusCode, String userDomain, String userMail, String userPassword, String uuid, final ApiCallback _callback) throws ApiException {
        return registerDeviceForClockInWithAssetModelCall(accessories, acknowledge, assetID, assetno, assetstatus, assettype, purchaseDate, selfAssign, serialno, service, source, specs, supplier, useStatusCode, userDomain, userMail, userPassword, uuid, _callback);

    }


    private ApiResponse<Object> registerDeviceForClockInWithAssetModelWithHttpInfo(String accessories, Integer acknowledge, Integer assetID, String assetno, String assetstatus, String assettype, LocalDate purchaseDate, Integer selfAssign, String serialno, String service, String source, String specs, String supplier, String useStatusCode, String userDomain, String userMail, String userPassword, String uuid) throws ApiException {
        okhttp3.Call localVarCall = registerDeviceForClockInWithAssetModelValidateBeforeCall(accessories, acknowledge, assetID, assetno, assetstatus, assettype, purchaseDate, selfAssign, serialno, service, source, specs, supplier, useStatusCode, userDomain, userMail, userPassword, uuid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerDeviceForClockInWithAssetModelAsync(String accessories, Integer acknowledge, Integer assetID, String assetno, String assetstatus, String assettype, LocalDate purchaseDate, Integer selfAssign, String serialno, String service, String source, String specs, String supplier, String useStatusCode, String userDomain, String userMail, String userPassword, String uuid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerDeviceForClockInWithAssetModelValidateBeforeCall(accessories, acknowledge, assetID, assetno, assetstatus, assettype, purchaseDate, selfAssign, serialno, service, source, specs, supplier, useStatusCode, userDomain, userMail, userPassword, uuid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterDeviceForClockInWithAssetModelRequestBuilder {
        private String accessories;
        private Integer acknowledge;
        private Integer assetID;
        private String assetno;
        private String assetstatus;
        private String assettype;
        private LocalDate purchaseDate;
        private Integer selfAssign;
        private String serialno;
        private String service;
        private String source;
        private String specs;
        private String supplier;
        private String useStatusCode;
        private String userDomain;
        private String userMail;
        private String userPassword;
        private String uuid;

        private RegisterDeviceForClockInWithAssetModelRequestBuilder() {
        }

        /**
         * Set accessories
         * @param accessories  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder accessories(String accessories) {
            this.accessories = accessories;
            return this;
        }
        
        /**
         * Set acknowledge
         * @param acknowledge  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder acknowledge(Integer acknowledge) {
            this.acknowledge = acknowledge;
            return this;
        }
        
        /**
         * Set assetID
         * @param assetID  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder assetID(Integer assetID) {
            this.assetID = assetID;
            return this;
        }
        
        /**
         * Set assetno
         * @param assetno  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder assetno(String assetno) {
            this.assetno = assetno;
            return this;
        }
        
        /**
         * Set assetstatus
         * @param assetstatus  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder assetstatus(String assetstatus) {
            this.assetstatus = assetstatus;
            return this;
        }
        
        /**
         * Set assettype
         * @param assettype  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder assettype(String assettype) {
            this.assettype = assettype;
            return this;
        }
        
        /**
         * Set purchaseDate
         * @param purchaseDate  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder purchaseDate(LocalDate purchaseDate) {
            this.purchaseDate = purchaseDate;
            return this;
        }
        
        /**
         * Set selfAssign
         * @param selfAssign  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder selfAssign(Integer selfAssign) {
            this.selfAssign = selfAssign;
            return this;
        }
        
        /**
         * Set serialno
         * @param serialno  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder serialno(String serialno) {
            this.serialno = serialno;
            return this;
        }
        
        /**
         * Set service
         * @param service  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder service(String service) {
            this.service = service;
            return this;
        }
        
        /**
         * Set source
         * @param source  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set specs
         * @param specs  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder specs(String specs) {
            this.specs = specs;
            return this;
        }
        
        /**
         * Set supplier
         * @param supplier  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder supplier(String supplier) {
            this.supplier = supplier;
            return this;
        }
        
        /**
         * Set useStatusCode
         * @param useStatusCode  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder useStatusCode(String useStatusCode) {
            this.useStatusCode = useStatusCode;
            return this;
        }
        
        /**
         * Set userDomain
         * @param userDomain  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder userDomain(String userDomain) {
            this.userDomain = userDomain;
            return this;
        }
        
        /**
         * Set userMail
         * @param userMail  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder userMail(String userMail) {
            this.userMail = userMail;
            return this;
        }
        
        /**
         * Set userPassword
         * @param userPassword  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder userPassword(String userPassword) {
            this.userPassword = userPassword;
            return this;
        }
        
        /**
         * Set uuid
         * @param uuid  (optional)
         * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
         */
        public RegisterDeviceForClockInWithAssetModelRequestBuilder uuid(String uuid) {
            this.uuid = uuid;
            return this;
        }
        
        /**
         * Build call for registerDeviceForClockInWithAssetModel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return registerDeviceForClockInWithAssetModelCall(accessories, acknowledge, assetID, assetno, assetstatus, assettype, purchaseDate, selfAssign, serialno, service, source, specs, supplier, useStatusCode, userDomain, userMail, userPassword, uuid, _callback);
        }


        /**
         * Execute registerDeviceForClockInWithAssetModel request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = registerDeviceForClockInWithAssetModelWithHttpInfo(accessories, acknowledge, assetID, assetno, assetstatus, assettype, purchaseDate, selfAssign, serialno, service, source, specs, supplier, useStatusCode, userDomain, userMail, userPassword, uuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerDeviceForClockInWithAssetModel request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return registerDeviceForClockInWithAssetModelWithHttpInfo(accessories, acknowledge, assetID, assetno, assetstatus, assettype, purchaseDate, selfAssign, serialno, service, source, specs, supplier, useStatusCode, userDomain, userMail, userPassword, uuid);
        }

        /**
         * Execute registerDeviceForClockInWithAssetModel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return registerDeviceForClockInWithAssetModelAsync(accessories, acknowledge, assetID, assetno, assetstatus, assettype, purchaseDate, selfAssign, serialno, service, source, specs, supplier, useStatusCode, userDomain, userMail, userPassword, uuid, _callback);
        }
    }

    /**
     * Register device for ClockIn with AssetModel.
     * 
     * @return RegisterDeviceForClockInWithAssetModelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RegisterDeviceForClockInWithAssetModelRequestBuilder registerDeviceForClockInWithAssetModel() throws IllegalArgumentException {
        return new RegisterDeviceForClockInWithAssetModelRequestBuilder();
    }
    private okhttp3.Call verifyDeviceWithDeviceUUIDCall(String deviceUUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verify/device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceUUID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceUUID", deviceUUID));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDeviceWithDeviceUUIDValidateBeforeCall(String deviceUUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceUUID' is set
        if (deviceUUID == null) {
            throw new ApiException("Missing the required parameter 'deviceUUID' when calling verifyDeviceWithDeviceUUID(Async)");
        }

        return verifyDeviceWithDeviceUUIDCall(deviceUUID, _callback);

    }


    private ApiResponse<Object> verifyDeviceWithDeviceUUIDWithHttpInfo(String deviceUUID) throws ApiException {
        okhttp3.Call localVarCall = verifyDeviceWithDeviceUUIDValidateBeforeCall(deviceUUID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyDeviceWithDeviceUUIDAsync(String deviceUUID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDeviceWithDeviceUUIDValidateBeforeCall(deviceUUID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyDeviceWithDeviceUUIDRequestBuilder {
        private final String deviceUUID;

        private VerifyDeviceWithDeviceUUIDRequestBuilder(String deviceUUID) {
            this.deviceUUID = deviceUUID;
        }

        /**
         * Build call for verifyDeviceWithDeviceUUID
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyDeviceWithDeviceUUIDCall(deviceUUID, _callback);
        }


        /**
         * Execute verifyDeviceWithDeviceUUID request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = verifyDeviceWithDeviceUUIDWithHttpInfo(deviceUUID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyDeviceWithDeviceUUID request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return verifyDeviceWithDeviceUUIDWithHttpInfo(deviceUUID);
        }

        /**
         * Execute verifyDeviceWithDeviceUUID request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return verifyDeviceWithDeviceUUIDAsync(deviceUUID, _callback);
        }
    }

    /**
     * Device verification with DeviceUUID.
     * 
     * @param deviceUUID deviceUUID (required)
     * @return VerifyDeviceWithDeviceUUIDRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public VerifyDeviceWithDeviceUUIDRequestBuilder verifyDeviceWithDeviceUUID(String deviceUUID) throws IllegalArgumentException {
        if (deviceUUID == null) throw new IllegalArgumentException("\"deviceUUID\" is required but got null");
            

        return new VerifyDeviceWithDeviceUUIDRequestBuilder(deviceUUID);
    }
    private okhttp3.Call verifyUserWithUseridCall(String adpAssociateOID, Double allocation, String appleUserIdentifier, String assignments, String authToken, String calWeekPref, Integer calendarId, Integer candidateId, Integer careerPathwayId, String cellPhone, Integer cid, Integer countryId, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, Integer createuserid, String thumbnail, String timecardPeriodPref, String timezone, String tosVersion, String userCountry, String userDateFormat, LocalDate userDateOfBirth, String userDisplayName, LocalDate userEndDate, String userName, String userNameFormat, String userType, Boolean view, String workerType, String workingDays, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verify/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adpAssociateOID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adpAssociateOID", adpAssociateOID));
        }

        if (allocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocation", allocation));
        }

        if (appleUserIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appleUserIdentifier", appleUserIdentifier));
        }

        if (assignments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignments", assignments));
        }

        if (authToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authToken", authToken));
        }

        if (calWeekPref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calWeekPref", calWeekPref));
        }

        if (calendarId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calendarId", calendarId));
        }

        if (candidateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("candidateId", candidateId));
        }

        if (careerPathwayId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("careerPathwayId", careerPathwayId));
        }

        if (cellPhone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cellPhone", cellPhone));
        }

        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryId", countryId));
        }

        if (createtsDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.date", createtsDate));
        }

        if (createtsDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.day", createtsDay));
        }

        if (createtsHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.hours", createtsHours));
        }

        if (createtsMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.minutes", createtsMinutes));
        }

        if (createtsMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.month", createtsMonth));
        }

        if (createtsNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.nanos", createtsNanos));
        }

        if (createtsSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.seconds", createtsSeconds));
        }

        if (createtsTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.time", createtsTime));
        }

        if (createtsTimezoneOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.timezoneOffset", createtsTimezoneOffset));
        }

        if (createtsYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createts.year", createtsYear));
        }

        if (createuserid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createuserid", createuserid));
        }

        if (thumbnail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbnail", thumbnail));
        }

        if (timecardPeriodPref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timecardPeriodPref", timecardPeriodPref));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (tosVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tosVersion", tosVersion));
        }

        if (userCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userCountry", userCountry));
        }

        if (userDateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userDateFormat", userDateFormat));
        }

        if (userDateOfBirth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userDateOfBirth", userDateOfBirth));
        }

        if (userDisplayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userDisplayName", userDisplayName));
        }

        if (userEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userEndDate", userEndDate));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (userNameFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userNameFormat", userNameFormat));
        }

        if (userType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userType", userType));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (workerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workerType", workerType));
        }

        if (workingDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workingDays", workingDays));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyUserWithUseridValidateBeforeCall(String adpAssociateOID, Double allocation, String appleUserIdentifier, String assignments, String authToken, String calWeekPref, Integer calendarId, Integer candidateId, Integer careerPathwayId, String cellPhone, Integer cid, Integer countryId, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, Integer createuserid, String thumbnail, String timecardPeriodPref, String timezone, String tosVersion, String userCountry, String userDateFormat, LocalDate userDateOfBirth, String userDisplayName, LocalDate userEndDate, String userName, String userNameFormat, String userType, Boolean view, String workerType, String workingDays, final ApiCallback _callback) throws ApiException {
        return verifyUserWithUseridCall(adpAssociateOID, allocation, appleUserIdentifier, assignments, authToken, calWeekPref, calendarId, candidateId, careerPathwayId, cellPhone, cid, countryId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, createuserid, thumbnail, timecardPeriodPref, timezone, tosVersion, userCountry, userDateFormat, userDateOfBirth, userDisplayName, userEndDate, userName, userNameFormat, userType, view, workerType, workingDays, _callback);

    }


    private ApiResponse<Object> verifyUserWithUseridWithHttpInfo(String adpAssociateOID, Double allocation, String appleUserIdentifier, String assignments, String authToken, String calWeekPref, Integer calendarId, Integer candidateId, Integer careerPathwayId, String cellPhone, Integer cid, Integer countryId, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, Integer createuserid, String thumbnail, String timecardPeriodPref, String timezone, String tosVersion, String userCountry, String userDateFormat, LocalDate userDateOfBirth, String userDisplayName, LocalDate userEndDate, String userName, String userNameFormat, String userType, Boolean view, String workerType, String workingDays) throws ApiException {
        okhttp3.Call localVarCall = verifyUserWithUseridValidateBeforeCall(adpAssociateOID, allocation, appleUserIdentifier, assignments, authToken, calWeekPref, calendarId, candidateId, careerPathwayId, cellPhone, cid, countryId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, createuserid, thumbnail, timecardPeriodPref, timezone, tosVersion, userCountry, userDateFormat, userDateOfBirth, userDisplayName, userEndDate, userName, userNameFormat, userType, view, workerType, workingDays, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyUserWithUseridAsync(String adpAssociateOID, Double allocation, String appleUserIdentifier, String assignments, String authToken, String calWeekPref, Integer calendarId, Integer candidateId, Integer careerPathwayId, String cellPhone, Integer cid, Integer countryId, Integer createtsDate, Integer createtsDay, Integer createtsHours, Integer createtsMinutes, Integer createtsMonth, Integer createtsNanos, Integer createtsSeconds, Long createtsTime, Integer createtsTimezoneOffset, Integer createtsYear, Integer createuserid, String thumbnail, String timecardPeriodPref, String timezone, String tosVersion, String userCountry, String userDateFormat, LocalDate userDateOfBirth, String userDisplayName, LocalDate userEndDate, String userName, String userNameFormat, String userType, Boolean view, String workerType, String workingDays, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyUserWithUseridValidateBeforeCall(adpAssociateOID, allocation, appleUserIdentifier, assignments, authToken, calWeekPref, calendarId, candidateId, careerPathwayId, cellPhone, cid, countryId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, createuserid, thumbnail, timecardPeriodPref, timezone, tosVersion, userCountry, userDateFormat, userDateOfBirth, userDisplayName, userEndDate, userName, userNameFormat, userType, view, workerType, workingDays, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyUserWithUseridRequestBuilder {
        private String adpAssociateOID;
        private Double allocation;
        private String appleUserIdentifier;
        private String assignments;
        private String authToken;
        private String calWeekPref;
        private Integer calendarId;
        private Integer candidateId;
        private Integer careerPathwayId;
        private String cellPhone;
        private Integer cid;
        private Integer countryId;
        private Integer createtsDate;
        private Integer createtsDay;
        private Integer createtsHours;
        private Integer createtsMinutes;
        private Integer createtsMonth;
        private Integer createtsNanos;
        private Integer createtsSeconds;
        private Long createtsTime;
        private Integer createtsTimezoneOffset;
        private Integer createtsYear;
        private Integer createuserid;
        private String thumbnail;
        private String timecardPeriodPref;
        private String timezone;
        private String tosVersion;
        private String userCountry;
        private String userDateFormat;
        private LocalDate userDateOfBirth;
        private String userDisplayName;
        private LocalDate userEndDate;
        private String userName;
        private String userNameFormat;
        private String userType;
        private Boolean view;
        private String workerType;
        private String workingDays;

        private VerifyUserWithUseridRequestBuilder() {
        }

        /**
         * Set adpAssociateOID
         * @param adpAssociateOID  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder adpAssociateOID(String adpAssociateOID) {
            this.adpAssociateOID = adpAssociateOID;
            return this;
        }
        
        /**
         * Set allocation
         * @param allocation  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder allocation(Double allocation) {
            this.allocation = allocation;
            return this;
        }
        
        /**
         * Set appleUserIdentifier
         * @param appleUserIdentifier  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder appleUserIdentifier(String appleUserIdentifier) {
            this.appleUserIdentifier = appleUserIdentifier;
            return this;
        }
        
        /**
         * Set assignments
         * @param assignments  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder assignments(String assignments) {
            this.assignments = assignments;
            return this;
        }
        
        /**
         * Set authToken
         * @param authToken  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder authToken(String authToken) {
            this.authToken = authToken;
            return this;
        }
        
        /**
         * Set calWeekPref
         * @param calWeekPref  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder calWeekPref(String calWeekPref) {
            this.calWeekPref = calWeekPref;
            return this;
        }
        
        /**
         * Set calendarId
         * @param calendarId  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder calendarId(Integer calendarId) {
            this.calendarId = calendarId;
            return this;
        }
        
        /**
         * Set candidateId
         * @param candidateId  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder candidateId(Integer candidateId) {
            this.candidateId = candidateId;
            return this;
        }
        
        /**
         * Set careerPathwayId
         * @param careerPathwayId  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder careerPathwayId(Integer careerPathwayId) {
            this.careerPathwayId = careerPathwayId;
            return this;
        }
        
        /**
         * Set cellPhone
         * @param cellPhone  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder cellPhone(String cellPhone) {
            this.cellPhone = cellPhone;
            return this;
        }
        
        /**
         * Set cid
         * @param cid  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder cid(Integer cid) {
            this.cid = cid;
            return this;
        }
        
        /**
         * Set countryId
         * @param countryId  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder countryId(Integer countryId) {
            this.countryId = countryId;
            return this;
        }
        
        /**
         * Set createtsDate
         * @param createtsDate  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsDate(Integer createtsDate) {
            this.createtsDate = createtsDate;
            return this;
        }
        
        /**
         * Set createtsDay
         * @param createtsDay  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsDay(Integer createtsDay) {
            this.createtsDay = createtsDay;
            return this;
        }
        
        /**
         * Set createtsHours
         * @param createtsHours  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsHours(Integer createtsHours) {
            this.createtsHours = createtsHours;
            return this;
        }
        
        /**
         * Set createtsMinutes
         * @param createtsMinutes  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsMinutes(Integer createtsMinutes) {
            this.createtsMinutes = createtsMinutes;
            return this;
        }
        
        /**
         * Set createtsMonth
         * @param createtsMonth  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsMonth(Integer createtsMonth) {
            this.createtsMonth = createtsMonth;
            return this;
        }
        
        /**
         * Set createtsNanos
         * @param createtsNanos  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsNanos(Integer createtsNanos) {
            this.createtsNanos = createtsNanos;
            return this;
        }
        
        /**
         * Set createtsSeconds
         * @param createtsSeconds  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsSeconds(Integer createtsSeconds) {
            this.createtsSeconds = createtsSeconds;
            return this;
        }
        
        /**
         * Set createtsTime
         * @param createtsTime  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsTime(Long createtsTime) {
            this.createtsTime = createtsTime;
            return this;
        }
        
        /**
         * Set createtsTimezoneOffset
         * @param createtsTimezoneOffset  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsTimezoneOffset(Integer createtsTimezoneOffset) {
            this.createtsTimezoneOffset = createtsTimezoneOffset;
            return this;
        }
        
        /**
         * Set createtsYear
         * @param createtsYear  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createtsYear(Integer createtsYear) {
            this.createtsYear = createtsYear;
            return this;
        }
        
        /**
         * Set createuserid
         * @param createuserid  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder createuserid(Integer createuserid) {
            this.createuserid = createuserid;
            return this;
        }
        
        /**
         * Set thumbnail
         * @param thumbnail  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder thumbnail(String thumbnail) {
            this.thumbnail = thumbnail;
            return this;
        }
        
        /**
         * Set timecardPeriodPref
         * @param timecardPeriodPref  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder timecardPeriodPref(String timecardPeriodPref) {
            this.timecardPeriodPref = timecardPeriodPref;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set tosVersion
         * @param tosVersion  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder tosVersion(String tosVersion) {
            this.tosVersion = tosVersion;
            return this;
        }
        
        /**
         * Set userCountry
         * @param userCountry  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder userCountry(String userCountry) {
            this.userCountry = userCountry;
            return this;
        }
        
        /**
         * Set userDateFormat
         * @param userDateFormat  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder userDateFormat(String userDateFormat) {
            this.userDateFormat = userDateFormat;
            return this;
        }
        
        /**
         * Set userDateOfBirth
         * @param userDateOfBirth  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder userDateOfBirth(LocalDate userDateOfBirth) {
            this.userDateOfBirth = userDateOfBirth;
            return this;
        }
        
        /**
         * Set userDisplayName
         * @param userDisplayName  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder userDisplayName(String userDisplayName) {
            this.userDisplayName = userDisplayName;
            return this;
        }
        
        /**
         * Set userEndDate
         * @param userEndDate  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder userEndDate(LocalDate userEndDate) {
            this.userEndDate = userEndDate;
            return this;
        }
        
        /**
         * Set userName
         * @param userName  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder userName(String userName) {
            this.userName = userName;
            return this;
        }
        
        /**
         * Set userNameFormat
         * @param userNameFormat  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder userNameFormat(String userNameFormat) {
            this.userNameFormat = userNameFormat;
            return this;
        }
        
        /**
         * Set userType
         * @param userType  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder userType(String userType) {
            this.userType = userType;
            return this;
        }
        
        /**
         * Set view
         * @param view  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder view(Boolean view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set workerType
         * @param workerType  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder workerType(String workerType) {
            this.workerType = workerType;
            return this;
        }
        
        /**
         * Set workingDays
         * @param workingDays  (optional)
         * @return VerifyUserWithUseridRequestBuilder
         */
        public VerifyUserWithUseridRequestBuilder workingDays(String workingDays) {
            this.workingDays = workingDays;
            return this;
        }
        
        /**
         * Build call for verifyUserWithUserid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyUserWithUseridCall(adpAssociateOID, allocation, appleUserIdentifier, assignments, authToken, calWeekPref, calendarId, candidateId, careerPathwayId, cellPhone, cid, countryId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, createuserid, thumbnail, timecardPeriodPref, timezone, tosVersion, userCountry, userDateFormat, userDateOfBirth, userDisplayName, userEndDate, userName, userNameFormat, userType, view, workerType, workingDays, _callback);
        }


        /**
         * Execute verifyUserWithUserid request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = verifyUserWithUseridWithHttpInfo(adpAssociateOID, allocation, appleUserIdentifier, assignments, authToken, calWeekPref, calendarId, candidateId, careerPathwayId, cellPhone, cid, countryId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, createuserid, thumbnail, timecardPeriodPref, timezone, tosVersion, userCountry, userDateFormat, userDateOfBirth, userDisplayName, userEndDate, userName, userNameFormat, userType, view, workerType, workingDays);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyUserWithUserid request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return verifyUserWithUseridWithHttpInfo(adpAssociateOID, allocation, appleUserIdentifier, assignments, authToken, calWeekPref, calendarId, candidateId, careerPathwayId, cellPhone, cid, countryId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, createuserid, thumbnail, timecardPeriodPref, timezone, tosVersion, userCountry, userDateFormat, userDateOfBirth, userDisplayName, userEndDate, userName, userNameFormat, userType, view, workerType, workingDays);
        }

        /**
         * Execute verifyUserWithUserid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return verifyUserWithUseridAsync(adpAssociateOID, allocation, appleUserIdentifier, assignments, authToken, calWeekPref, calendarId, candidateId, careerPathwayId, cellPhone, cid, countryId, createtsDate, createtsDay, createtsHours, createtsMinutes, createtsMonth, createtsNanos, createtsSeconds, createtsTime, createtsTimezoneOffset, createtsYear, createuserid, thumbnail, timecardPeriodPref, timezone, tosVersion, userCountry, userDateFormat, userDateOfBirth, userDisplayName, userEndDate, userName, userNameFormat, userType, view, workerType, workingDays, _callback);
        }
    }

    /**
     * User verification with userid.
     * 
     * @return VerifyUserWithUseridRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public VerifyUserWithUseridRequestBuilder verifyUserWithUserid() throws IllegalArgumentException {
        return new VerifyUserWithUseridRequestBuilder();
    }
}
